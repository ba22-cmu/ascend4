/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040200
#define SWIGPYTHON
#define SWIG_DIRECTORS
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE
#define SWIGPYTHON_FASTPROXY

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 


#if defined(__GNUC__) && defined(_WIN32) && !defined(SWIG_PYTHON_NO_HYPOT_WORKAROUND)
/* Workaround for '::hypot' has not been declared', see https://bugs.python.org/issue11566 */
# include <math.h>
#endif

#if !defined(PY_SSIZE_T_CLEAN) && !defined(SWIG_NO_PY_SSIZE_T_CLEAN)
#define PY_SSIZE_T_CLEAN
#endif

#if __GNUC__ >= 7
#pragma GCC diagnostic push
#if defined(__cplusplus) && __cplusplus >=201703L
#pragma GCC diagnostic ignored "-Wregister" /* For python-2.7 headers that use register */
#endif
#endif

#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */

#if defined(_MSC_VER) && _MSC_VER >= 1929
/* Workaround compilation errors when redefining _DEBUG in MSVC 2019 version 16.10 and later
 * See https://github.com/swig/swig/issues/2090 */
# include <corecrt.h>
#endif

# undef _DEBUG
# include <Python.h>
# define _DEBUG 1
#else
# include <Python.h>
#endif

#if __GNUC__ >= 7
#pragma GCC diagnostic pop
#endif

#include <stdio.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4
#define SWIG_POINTER_CLEAR         0x8
#define SWIG_POINTER_RELEASE       (SWIG_POINTER_CLEAR | SWIG_POINTER_DISOWN)

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
/* Runtime errors are < 0 */
#define SWIG_ERROR                 (-1)
/* Errors in range -1 to -99 are in swigerrors.swg (errors for all languages including those not using the runtime) */
/* Errors in range -100 to -199 are language specific errors defined in *errors.swg */
/* Errors < -200 are generic runtime specific errors */
#define SWIG_ERROR_RELEASE_NOT_OWNED (-200)

#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporary objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del object mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif

#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  Choose the last
     name. It should be the most specific; a fully resolved name
     but not necessarily with default template parameters expanded. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13


/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Wrapper around PyUnicode_AsUTF8AndSize - call Py_XDECREF on the returned pbytes when finished with the returned string */
SWIGINTERN const char *
SWIG_PyUnicode_AsUTF8AndSize(PyObject *str, Py_ssize_t *psize, PyObject **pbytes)
{
#if PY_VERSION_HEX >= 0x03030000
# if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030A0000
  *pbytes = NULL;
  return PyUnicode_AsUTF8AndSize(str, psize);
# else
   *pbytes = PyUnicode_AsUTF8String(str);
   const char *chars = *pbytes ? PyBytes_AsString(*pbytes) : NULL;
   if (chars && psize)
     *psize = PyBytes_Size(*pbytes);
  return chars;
# endif
#else
  char *chars = NULL;
  *pbytes = NULL;
  PyString_AsStringAndSize(str, &chars, psize);
  return chars;
#endif
}

SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* SWIGPY_USE_CAPSULE is no longer used within SWIG itself, but some user interface files check for it. */
# define SWIGPY_USE_CAPSULE
#ifdef SWIGPYTHON_BUILTIN
# define SWIGPY_CAPSULE_ATTR_NAME "type_pointer_capsule_builtin" SWIG_TYPE_TABLE_NAME
#else
# define SWIGPY_CAPSULE_ATTR_NAME "type_pointer_capsule" SWIG_TYPE_TABLE_NAME
#endif
# define SWIGPY_CAPSULE_NAME ("swig_runtime_data" SWIG_RUNTIME_VERSION "." SWIGPY_CAPSULE_ATTR_NAME)

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#define Py_hash_t long
#endif

#ifdef Py_LIMITED_API
# define PyTuple_GET_ITEM PyTuple_GetItem
/* Note that PyTuple_SetItem() has different semantics from PyTuple_SET_ITEM as it decref's the original tuple item, so in general they cannot be used
  interchangeably. However in SWIG-generated code PyTuple_SET_ITEM is only used with newly initialized tuples without any items and for them this does work. */
# define PyTuple_SET_ITEM PyTuple_SetItem
# define PyTuple_GET_SIZE PyTuple_Size
# define PyCFunction_GET_FLAGS PyCFunction_GetFlags
# define PyCFunction_GET_FUNCTION PyCFunction_GetFunction
# define PyCFunction_GET_SELF PyCFunction_GetSelf
# define PyList_GET_ITEM PyList_GetItem
# define PyList_SET_ITEM PyList_SetItem
# define PySliceObject PyObject
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred())
    PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    PyObject *old_str = PyObject_Str(value);
    PyObject *bytes = NULL;
    const char *tmp = SWIG_PyUnicode_AsUTF8AndSize(old_str, NULL, &bytes);
    PyErr_Clear();
    Py_XINCREF(type);
    if (tmp)
      PyErr_Format(type, "%s %s", tmp, mesg);
    else
      PyErr_Format(type, "%s", mesg);
    Py_XDECREF(bytes);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

SWIGRUNTIME int
SWIG_Python_TypeErrorOccurred(PyObject *obj)
{
  PyObject *error;
  if (obj)
    return 0;
  error = PyErr_Occurred();
  return error && PyErr_GivenExceptionMatches(error, PyExc_TypeError);
}

SWIGRUNTIME void
SWIG_Python_RaiseOrModifyTypeError(const char *message)
{
  if (SWIG_Python_TypeErrorOccurred(NULL)) {
    /* Use existing TypeError to preserve stacktrace and enhance with given message */
    PyObject *newvalue;
    PyObject *type = NULL, *value = NULL, *traceback = NULL;
    PyErr_Fetch(&type, &value, &traceback);
#if PY_VERSION_HEX >= 0x03000000
    newvalue = PyUnicode_FromFormat("%S\nAdditional information:\n%s", value, message);
#else
    newvalue = PyString_FromFormat("%s\nAdditional information:\n%s", PyString_AsString(value), message);
#endif
    if (newvalue) {
      Py_XDECREF(value);
      PyErr_Restore(type, newvalue, traceback);
    } else {
      PyErr_Restore(type, value, traceback);
    }
  } else {
    /* Raise TypeError using given message */
    PyErr_SetString(PyExc_TypeError, message);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    define SWIG_PYTHON_USE_GIL
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      if PY_VERSION_HEX < 0x03070000
#        define SWIG_PYTHON_INITIALIZE_THREADS PyEval_InitThreads()
#      else
#        define SWIG_PYTHON_INITIALIZE_THREADS
#      endif
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { status = false; PyEval_RestoreThread(save); }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  const char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

#if PY_VERSION_HEX < 0x02070000 /* 2.7.0 */
# error "This version of SWIG only supports Python >= 2.7"
#endif

#if PY_VERSION_HEX >= 0x03000000 && PY_VERSION_HEX < 0x03030000
# error "This version of SWIG only supports Python 3 >= 3.3"
#endif

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      if (result) {
        PyList_SET_ITEM(result, 0, o2);
      } else {
        Py_DECREF(obj);
        return o2;
      }
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

SWIGINTERN int
SWIG_Python_CheckNoKeywords(PyObject *kwargs, const char *name) {
  int no_kwargs = 1;
  if (kwargs) {
    assert(PyDict_Check(kwargs));
    if (PyDict_Size(kwargs) > 0) {
      PyErr_Format(PyExc_TypeError, "%s() does not take keyword arguments", name);
      no_kwargs = 0;
    }
  }
  return no_kwargs;
}

/* A functor is a function object with one single object argument */
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
 
/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */
 
typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

SWIGINTERN PyObject *
swig_varlink_repr(PyObject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_InternFromString("<Swig global variables>");
#else
  return PyString_FromString("<Swig global variables>");
#endif
}

SWIGINTERN PyObject *
swig_varlink_str(PyObject *o) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
#if PY_VERSION_HEX >= 0x03000000
  PyObject *str = PyUnicode_InternFromString("(");
  PyObject *tail;
  PyObject *joined;
  swig_globalvar *var;
  for (var = v->vars; var; var=var->next) {
    tail = PyUnicode_FromString(var->name);
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
    if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
    }
  }
  tail = PyUnicode_InternFromString(")");
  joined = PyUnicode_Concat(str, tail);
  Py_DecRef(str);
  Py_DecRef(tail);
  str = joined;
#else
  PyObject *str = PyString_FromString("(");
  swig_globalvar *var;
  for (var = v->vars; var; var=var->next) {
    PyString_ConcatAndDel(&str,PyString_FromString(var->name));
    if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
  }
  PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
  return str;
}

SWIGINTERN void
swig_varlink_dealloc(PyObject *o) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  swig_globalvar *var = v->vars;
  while (var) {
    swig_globalvar *n = var->next;
    free(var->name);
    free(var);
    var = n;
  }
}

SWIGINTERN PyObject *
swig_varlink_getattr(PyObject *o, char *n) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  PyObject *res = NULL;
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      res = (*var->get_attr)();
      break;
    }
    var = var->next;
  }
  if (res == NULL && !PyErr_Occurred()) {
    PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
  }
  return res;
}

SWIGINTERN int
swig_varlink_setattr(PyObject *o, char *n, PyObject *p) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  int res = 1;
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      res = (*var->set_attr)(p);
      break;
    }
    var = var->next;
  }
  if (res == 1 && !PyErr_Occurred()) {
    PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
  }
  return res;
}

SWIGINTERN PyTypeObject*
swig_varlink_type(void) {
  static char varlink__doc__[] = "Swig var link object";
#ifndef Py_LIMITED_API
  static PyTypeObject varlink_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                  /* ob_size */
#endif
      "swigvarlink",                      /* tp_name */
      sizeof(swig_varlinkobject),         /* tp_basicsize */
      0,                                  /* tp_itemsize */
      (destructor) swig_varlink_dealloc,  /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                       /*tp_print*/
#else
      (Py_ssize_t)0,                      /*tp_vectorcall_offset*/
#endif
      (getattrfunc) swig_varlink_getattr, /* tp_getattr */
      (setattrfunc) swig_varlink_setattr, /* tp_setattr */
      0,                                  /* tp_compare */
      (reprfunc) swig_varlink_repr,       /* tp_repr */
      0,                                  /* tp_as_number */
      0,                                  /* tp_as_sequence */
      0,                                  /* tp_as_mapping */
      0,                                  /* tp_hash */
      0,                                  /* tp_call */
      (reprfunc) swig_varlink_str,        /* tp_str */
      0,                                  /* tp_getattro */
      0,                                  /* tp_setattro */
      0,                                  /* tp_as_buffer */
      0,                                  /* tp_flags */
      varlink__doc__,                     /* tp_doc */
      0,                                  /* tp_traverse */
      0,                                  /* tp_clear */
      0,                                  /* tp_richcompare */
      0,                                  /* tp_weaklistoffset */
      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
      0,                                  /* tp_del */
      0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                  /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                  /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                  /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030C0000
      0,                                  /* tp_watched */
#endif
#ifdef COUNT_ALLOCS
      0,                                  /* tp_allocs */
      0,                                  /* tp_frees */
      0,                                  /* tp_maxalloc */
      0,                                  /* tp_prev */
      0                                   /* tp_next */
#endif
    };
    varlink_type = tmp;
    type_init = 1;
    if (PyType_Ready(&varlink_type) < 0)
      return NULL;
  }
  return &varlink_type;
#else
  PyType_Slot slots[] = {
    { Py_tp_dealloc, (void *)swig_varlink_dealloc },
    { Py_tp_repr, (void *)swig_varlink_repr },
    { Py_tp_getattr, (void *)swig_varlink_getattr },
    { Py_tp_setattr, (void *)swig_varlink_setattr },
    { Py_tp_str, (void *)swig_varlink_str },
    { Py_tp_doc, (void *)varlink__doc__ },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "swigvarlink",
    sizeof(swig_varlinkobject),
    0,
    Py_TPFLAGS_DEFAULT,
    slots
  };
  return (PyTypeObject *)PyType_FromSpec(&spec);
#endif
}

/* Create a variable linking object for use later */
SWIGINTERN PyObject *
SWIG_Python_newvarlink(void) {
  swig_varlinkobject *result = PyObject_New(swig_varlinkobject, swig_varlink_type());
  if (result) {
    result->vars = 0;
  }
  return ((PyObject*) result);
}

SWIGINTERN void 
SWIG_Python_addvarlink(PyObject *p, const char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v = (swig_varlinkobject *) p;
  swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  if (gv) {
    size_t size = strlen(name)+1;
    gv->name = (char *)malloc(size);
    if (gv->name) {
      memcpy(gv->name, name, size);
      gv->get_attr = get_attr;
      gv->set_attr = set_attr;
      gv->next = v->vars;
    }
  }
  v->vars = gv;
}


static PyObject *Swig_Globals_global = NULL;
  
SWIGINTERN PyObject *
SWIG_globals(void) {
  if (Swig_Globals_global == NULL) {
    Swig_Globals_global = SWIG_newvarlink();
  }
  return Swig_Globals_global;
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  int fail = data ? data->implicitconv : 0;
  if (fail)
    PyErr_SetString(PyExc_TypeError, "Implicit conversion is prohibited for explicit constructors.");
  return fail;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      Py_INCREF(obj);
      data->newargs = obj;
    } else {
      data->newraw = PyObject_GetAttrString(data->klass, "__new__");
      if (data->newraw) {
        data->newargs = PyTuple_New(1);
        if (data->newargs) {
          Py_INCREF(obj);
          PyTuple_SET_ITEM(data->newargs, 0, obj);
        } else {
          Py_DECREF(data->newraw);
          Py_DECREF(data->klass);
          free(data);
          return 0;
        }
      } else {
        Py_INCREF(obj);
        data->newargs = obj;
      }
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, "__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      data->delargs = !(PyCFunction_GET_FLAGS(data->destroy) & METH_O);
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data)
{
  Py_XDECREF(data->klass);
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
  free(data);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_XINCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    PyObject *val = SwigPyObject_long(v);
    if (val) {
      PyObject *ofmt;
      PyTuple_SET_ITEM(args, 0, val);
      ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
        res = PyUnicode_Format(ofmt,args);
#else
        res = PyString_Format(ofmt,args);
#endif
        Py_DECREF(ofmt);
      }
    }
    Py_DECREF(args);
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_repr(SwigPyObject *v)
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (repr && v->next) {
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
    if (nrep) {
# if PY_VERSION_HEX >= 0x03000000
      PyObject *joined = PyUnicode_Concat(repr, nrep);
      Py_DecRef(repr);
      Py_DecRef(nrep);
      repr = joined;
# else
      PyString_ConcatAndDel(&repr,nrep);
# endif
    } else {
      Py_DecRef(repr);
      repr = NULL;
    }
  }
  return repr;
}

/* We need a version taking two PyObject* parameters so it's a valid
 * PyCFunction to use in swigobject_methods[]. */
SWIGRUNTIME PyObject *
SwigPyObject_repr2(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  return SwigPyObject_repr((SwigPyObject*)v);
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res = NULL;
  if (!PyErr_Occurred()) {
    if (op != Py_EQ && op != Py_NE) {
      Py_INCREF(Py_NotImplemented);
      return Py_NotImplemented;
    }
    res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  }
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
  PyTypeObject *target_tp = SwigPyObject_type();
  PyTypeObject *op_type = Py_TYPE(op);
#ifdef SWIGPYTHON_BUILTIN
  if (PyType_IsSubtype(op_type, target_tp))
    return 1;
  return (strcmp(op_type->tp_name, "SwigPyObject") == 0);
#else
  if (op_type == target_tp)
    return 1;
# ifdef Py_LIMITED_API
  int cmp;
  PyObject *tp_name = PyObject_GetAttrString((PyObject *)op_type, "__name__");
  if (!tp_name)
    return 0;
  cmp = PyUnicode_CompareWithASCIIString(tp_name, "SwigPyObject");
  Py_DECREF(tp_name);
  return cmp == 0;
# else
  return (strcmp(op_type->tp_name, "SwigPyObject") == 0);
# endif
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

static PyObject* Swig_Capsule_global = NULL;

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *type = NULL, *value = NULL, *traceback = NULL;
      PyErr_Fetch(&type, &value, &traceback);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        if (tmp) {
          res = SWIG_Python_CallFunctor(destroy, tmp);
        } else {
          res = 0;
        }
        Py_XDECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(type, value, traceback);

      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
    Py_XDECREF(Swig_Capsule_global);
  }
  Py_XDECREF(next);
#ifdef SWIGPYTHON_BUILTIN
  Py_XDECREF(sobj->dict);
#endif
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  ((SwigPyObject *)next)->next = sobj->next;
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) {
    return NULL;
  } else {
    SwigPyObject *sobj = (SwigPyObject *)v;
    PyObject *obj = PyBool_FromLong(sobj->own);
    if (val) {
      if (PyObject_IsTrue(val)) {
        Py_DECREF(SwigPyObject_acquire(v,args));
      } else {
        Py_DECREF(SwigPyObject_disown(v,args));
      }
    } 
    return obj;
  }
}

static PyMethodDef
swigobject_methods[] = {
  {"disown",  SwigPyObject_disown,  METH_NOARGS,  "releases ownership of the pointer"},
  {"acquire", SwigPyObject_acquire, METH_NOARGS,  "acquires ownership of the pointer"},
  {"own",     SwigPyObject_own,     METH_VARARGS, "returns/sets ownership of the pointer"},
  {"append",  SwigPyObject_append,  METH_O,       "appends another 'this' object"},
  {"next",    SwigPyObject_next,    METH_NOARGS,  "returns the next 'this' object"},
  {"__repr__",SwigPyObject_repr2,   METH_NOARGS,  "returns object representation"},
  {0, 0, 0, 0}  
};

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";
#ifndef Py_LIMITED_API
  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#else
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyObject",                       /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                         /*tp_print*/
#else
      (Py_ssize_t)0,                        /*tp_vectorcall_offset*/
#endif
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
      0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,                                    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030C0000
      0,                                    /* tp_watched */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpyobject_type) != 0)
      return NULL;
  }
  return &swigpyobject_type;
#else
  PyType_Slot slots[] = {
    { Py_tp_dealloc, (void *)SwigPyObject_dealloc },
    { Py_tp_repr, (void *)SwigPyObject_repr },
    { Py_tp_getattro, (void *)PyObject_GenericGetAttr },
    { Py_tp_doc, (void *)swigobject_doc },
    { Py_tp_richcompare, (void *)SwigPyObject_richcompare },
    { Py_tp_methods, (void *)swigobject_methods },
    { Py_nb_int, (void *)SwigPyObject_long },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "SwigPyObject",
    sizeof(SwigPyObject),
    0,
    Py_TPFLAGS_DEFAULT,
    slots
  };
  return (PyTypeObject *)PyType_FromSpec(&spec);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_New(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
#ifdef SWIGPYTHON_BUILTIN
    sobj->dict = 0;
#endif
    if (own == SWIG_POINTER_OWN) {
      /* Obtain a reference to the Python capsule wrapping the module information, so that the
       * module information is correctly destroyed after all SWIG python objects have been freed
       * by the GC (and corresponding destructors invoked) */
      Py_XINCREF(Swig_Capsule_global);
    }
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((const char *)v->pack, (const char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  PyTypeObject* op_type = Py_TYPE(op);
  if (op_type == SwigPyPacked_TypeOnce())
    return 1;
#ifdef Py_LIMITED_API
  int cmp;
  PyObject *tp_name = PyObject_GetAttrString((PyObject *)op_type, "__name__");
  if (!tp_name)
    return 0;
  cmp = PyUnicode_CompareWithASCIIString(tp_name, "SwigPyPacked");
  Py_DECREF(tp_name);
  return cmp == 0;
#else
  return (strcmp(op_type->tp_name, "SwigPyPacked") == 0);
#endif
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
#ifndef Py_LIMITED_API
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyPacked",                       /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                         /*tp_print*/
#else
      (Py_ssize_t)0,                        /*tp_vectorcall_offset*/
#endif
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030C0000
      0,                                    /* tp_watched */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpypacked_type) != 0)
      return NULL;
  }
  return &swigpypacked_type;
#else
  PyType_Slot slots[] = {
    { Py_tp_dealloc, (void *)SwigPyPacked_dealloc },
    { Py_tp_repr, (void *)SwigPyPacked_repr },
    { Py_tp_str, (void *)SwigPyPacked_str },
    { Py_tp_getattro, (void *)PyObject_GenericGetAttr },
    { Py_tp_doc, (void *)swigpacked_doc },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "SwigPyPacked",
    sizeof(SwigPyPacked),
    0,
    Py_TPFLAGS_DEFAULT,
    slots
  };
  return (PyTypeObject *)PyType_FromSpec(&spec);
#endif
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_New(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

static PyObject *Swig_This_global = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (Swig_This_global == NULL)
    Swig_This_global = SWIG_Python_str_FromChar("this");
  return Swig_This_global;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (((flags & SWIG_POINTER_RELEASE) == SWIG_POINTER_RELEASE) && !sobj->own) {
      res = SWIG_ERROR_RELEASE_NOT_OWNED;
    } else {
      if (own)
        *own = *own | sobj->own;
      if (flags & SWIG_POINTER_DISOWN) {
        sobj->own = 0;
      }
      if (flags & SWIG_POINTER_CLEAR) {
        sobj->ptr = 0;
      }
      res = SWIG_OK;
    }
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
      if (!SWIG_IsOK(res) && obj == Py_None) {
        if (ptr)
          *ptr = 0;
        if (PyErr_Occurred())
          PyErr_Clear();
        res = SWIG_OK;
      }
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    swig_cast_info *tc;

    /* here we get the method pointer for callbacks */
#ifndef Py_LIMITED_API
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
#else
    PyObject* pystr_doc = PyObject_GetAttrString(obj, "__doc__");
    PyObject *bytes = NULL;
    const char *doc = pystr_doc ? SWIG_PyUnicode_AsUTF8AndSize(pystr_doc, NULL, &bytes) : 0;
#endif
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
#ifdef Py_LIMITED_API
    Py_XDECREF(bytes);
    Py_XDECREF(pystr_doc);
#endif
    if (!desc)
      return SWIG_ERROR;
    tc = SWIG_TypeCheck(desc,ty);
    if (tc) {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    } else {
      return SWIG_ERROR;
    }
    return SWIG_OK;
  }
}

/* Convert a packed pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
        PyObject *dict = *dictptr;
        if (dict == NULL) {
          dict = PyDict_New();
          *dictptr = dict;
        }
        if (dict) {
          PyDict_SetItem(dict, SWIG_This(), swig_this);
        } else{
          Py_DECREF(inst);
          inst = 0;
        }
      }
#else
      if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
        Py_DECREF(inst);
        inst = 0;
      }
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *empty_args = PyTuple_New(0);
    if (empty_args) {
      PyObject *empty_kwargs = PyDict_New();
      if (empty_kwargs) {
#ifndef Py_LIMITED_API
        newfunc newfn = ((PyTypeObject *)data->newargs)->tp_new;
#else
        newfunc newfn = (newfunc)PyType_GetSlot((PyTypeObject *)data->newargs, Py_tp_new);
#endif
        inst = newfn((PyTypeObject *)data->newargs, empty_args, empty_kwargs);
        Py_DECREF(empty_kwargs);
        if (inst) {
          if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
            Py_DECREF(inst);
            inst = 0;
          } else {
            PyType_Modified(Py_TYPE(inst));
          }
        }
      }
      Py_DECREF(empty_args);
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
}

SWIGRUNTIME int
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  PyObject **dictptr = _PyObject_GetDictPtr(inst);
  if (dictptr != NULL) {
    PyObject *dict = *dictptr;
    if (dict == NULL) {
      dict = PyDict_New();
      *dictptr = dict;
    }
    if (dict) {
      return PyDict_SetItem(dict, SWIG_This(), swig_this);
    } else{
      return -1;
    }
  }
#endif
  return PyObject_SetAttr(inst, SWIG_This(), swig_this);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      Py_DECREF(SwigPyObject_append((PyObject*) sthis, obj[1]));
    } else {
      if (SWIG_Python_SetSwigThis(obj[0], obj[1]) != 0)
        return NULL;
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
#ifndef Py_LIMITED_API
        allocfunc alloc = clientdata->pytype->tp_alloc;
#else
        allocfunc alloc = (allocfunc)PyType_GetSlot(clientdata->pytype, Py_tp_alloc);
#endif
        PyObject *next_self = alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      if (newobj) {
        newobj->dict = 0;
      }
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

static PyObject *Swig_TypeCache_global = NULL;

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  if (Swig_TypeCache_global == NULL) {
    Swig_TypeCache_global = PyDict_New();
  }
  return Swig_TypeCache_global;
}

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
#ifdef SWIG_LINK_RUNTIME
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
  }
#else
  void *type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
  if (PyErr_Occurred()) {
    PyErr_Clear();
    type_pointer = (void *)0;
  }
#endif
  return (swig_module_info *) type_pointer;
}


static int interpreter_counter = 0; /* how many (sub-)interpreters are using swig_module's types */

SWIGRUNTIME void
SWIG_Python_DestroyModule(PyObject *obj)
{
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
  swig_type_info **types = swig_module->types;
  size_t i;
  if (--interpreter_counter != 0) /* another sub-interpreter may still be using the swig_module's types */
    return;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      ty->clientdata = 0;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  Swig_This_global = NULL;
  Py_DECREF(SWIG_globals());
  Swig_Globals_global = NULL;
  Py_DECREF(SWIG_Python_TypeCache());
  Swig_TypeCache_global = NULL;
  Swig_Capsule_global = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule("swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule("swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    if (PyModule_AddObject(module, SWIGPY_CAPSULE_ATTR_NAME, pointer) == 0) {
      ++interpreter_counter;
      Swig_Capsule_global = pointer;
    } else {
      Py_DECREF(pointer);
    }
  } else {
    Py_XDECREF(pointer);
  }
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
      if (obj) {
        PyDict_SetItem(cache, key, obj);
        Py_DECREF(obj);
      }
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      PyObject *bytes = NULL;
      const char *tmp = SWIG_PyUnicode_AsUTF8AndSize(old_str, NULL, &bytes);
      const char *errmesg = tmp ? tmp : "Invalid error message";
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, errmesg);
      } else {
	PyErr_Format(type, "%s %s", errmesg, mesg);
      }
      Py_XDECREF(bytes);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
#ifndef Py_LIMITED_API
      /* tp_name is not accessible */
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	PyObject *bytes = NULL;
	const char *cstr = str ? SWIG_PyUnicode_AsUTF8AndSize(str, NULL, &bytes) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(bytes);
	Py_XDECREF(str);
	return;
      }
#endif
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) != 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
      if (!encoded_name)
        goto done;
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) do { if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } } while (0) 



#ifdef __cplusplus
extern "C" {
#endif

/* Method creation and docstring support functions */

SWIGINTERN PyMethodDef *SWIG_PythonGetProxyDoc(const char *name);
SWIGINTERN PyObject *SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func);
SWIGINTERN PyObject *SWIG_PyStaticMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func);

#ifdef __cplusplus
}
#endif


  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Python proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DIRECTOR_PYTHON_HEADER_
#define SWIG_DIRECTOR_PYTHON_HEADER_

#include <string>
#include <iostream>
#include <exception>
#include <vector>
#include <map>

#if defined(SWIG_PYTHON_THREADS)
/*  __THREAD__ is the old macro to activate some thread support */
# if !defined(__THREAD__)
#   define __THREAD__ 1
# endif
#endif

#ifdef __THREAD__
#ifndef Py_LIMITED_API
# include "pythread.h"
#else
# if defined(_WIN32)
#   include <windows.h>
# else
#   include <pthread.h>
# endif
#endif
#endif

/*
  Use -DSWIG_PYTHON_DIRECTOR_NO_VTABLE if you don't want to generate a 'virtual
  table', and avoid multiple GetAttr calls to retrieve the python
  methods.
*/

#ifndef SWIG_PYTHON_DIRECTOR_NO_VTABLE
#ifndef SWIG_PYTHON_DIRECTOR_VTABLE
#define SWIG_PYTHON_DIRECTOR_VTABLE
#endif
#endif



/*
  Use -DSWIG_DIRECTOR_NO_UEH if you prefer to avoid the use of the
  Undefined Exception Handler provided by swig.
*/
#ifndef SWIG_DIRECTOR_NO_UEH
#ifndef SWIG_DIRECTOR_UEH
#define SWIG_DIRECTOR_UEH
#endif
#endif


/*
  Use -DSWIG_DIRECTOR_NORTTI if you prefer to avoid the use of the
  native C++ RTTI and dynamic_cast<>. But be aware that directors
  could stop working when using this option.
*/
#ifdef SWIG_DIRECTOR_NORTTI
/*
   When we don't use the native C++ RTTI, we implement a minimal one
   only for Directors.
*/
# ifndef SWIG_DIRECTOR_RTDIR
# define SWIG_DIRECTOR_RTDIR

namespace Swig {
  class Director;
  SWIGINTERN std::map<void *, Director *>& get_rtdir_map() {
    static std::map<void *, Director *> rtdir_map;
    return rtdir_map;
  }

  SWIGINTERNINLINE void set_rtdir(void *vptr, Director *rtdir) {
    get_rtdir_map()[vptr] = rtdir;
  }

  SWIGINTERNINLINE Director *get_rtdir(void *vptr) {
    std::map<void *, Director *>::const_iterator pos = get_rtdir_map().find(vptr);
    Director *rtdir = (pos != get_rtdir_map().end()) ? pos->second : 0;
    return rtdir;
  }
}
# endif /* SWIG_DIRECTOR_RTDIR */

# define SWIG_DIRECTOR_CAST(ARG) Swig::get_rtdir(static_cast<void *>(ARG))
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2) Swig::set_rtdir(static_cast<void *>(ARG1), ARG2)

#else

# define SWIG_DIRECTOR_CAST(ARG) dynamic_cast<Swig::Director *>(ARG)
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2)

#endif /* SWIG_DIRECTOR_NORTTI */

extern "C" {
  struct swig_type_info;
}

namespace Swig {

  /* memory handler */
  struct GCItem {
    virtual ~GCItem() {}

    virtual int get_own() const {
      return 0;
    }
  };

  struct GCItem_var {
    GCItem_var(GCItem *item = 0) : _item(item) {
    }

    GCItem_var& operator=(GCItem *item) {
      GCItem *tmp = _item;
      _item = item;
      delete tmp;
      return *this;
    }

    ~GCItem_var() {
      delete _item;
    }

    GCItem * operator->() const {
      return _item;
    }

  private:
    GCItem *_item;
  };

  struct GCItem_Object : GCItem {
    GCItem_Object(int own) : _own(own) {
    }

    virtual ~GCItem_Object() {
    }

    int get_own() const {
      return _own;
    }

  private:
    int _own;
  };

  template <typename Type>
  struct GCItem_T : GCItem {
    GCItem_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCItem_T() {
      delete _ptr;
    }

  private:
    Type *_ptr;
  };

  template <typename Type>
  struct GCArray_T : GCItem {
    GCArray_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCArray_T() {
      delete[] _ptr;
    }

  private:
    Type *_ptr;
  };

  /* base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;
  public:
    DirectorException(PyObject *error, const char *hdr ="", const char *msg ="") : swig_msg(hdr) {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (msg[0]) {
        swig_msg += " ";
        swig_msg += msg;
      }
      if (!PyErr_Occurred()) {
        PyErr_SetString(error, swig_msg.c_str());
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
    }

    virtual ~DirectorException() throw() {
    }

    /* Deprecated, use what() instead */
    const char *getMessage() const {
      return what();
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }

    static void raise(PyObject *error, const char *msg) {
      throw DirectorException(error, msg);
    }

    static void raise(const char *msg) {
      raise(PyExc_RuntimeError, msg);
    }
  };

  /* type mismatch in the return value from a python method call */
  class DirectorTypeMismatchException : public DirectorException {
  public:
    DirectorTypeMismatchException(PyObject *error, const char *msg="")
      : DirectorException(error, "SWIG director type mismatch", msg) {
    }

    DirectorTypeMismatchException(const char *msg="")
      : DirectorException(PyExc_TypeError, "SWIG director type mismatch", msg) {
    }

    static void raise(PyObject *error, const char *msg) {
      throw DirectorTypeMismatchException(error, msg);
    }

    static void raise(const char *msg) {
      throw DirectorTypeMismatchException(msg);
    }
  };

  /* any python exception that occurs during a director method call */
  class DirectorMethodException : public DirectorException {
  public:
    DirectorMethodException(const char *msg = "")
      : DirectorException(PyExc_RuntimeError, "SWIG director method error.", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorMethodException(msg);
    }
  };

  /* attempt to call a pure virtual method via a director method */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg = "")
      : DirectorException(PyExc_RuntimeError, "SWIG director pure virtual method called", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };


#ifdef __THREAD__
#ifndef Py_LIMITED_API
   class Mutex
   {
   public:
       Mutex() {
           mutex_ = PyThread_allocate_lock();
       }

       ~Mutex() {
           PyThread_release_lock(mutex_);
       }

   private:
       void Lock() {
           PyThread_acquire_lock(mutex_, WAIT_LOCK);
       }

       void Unlock() {
           PyThread_free_lock(mutex_);
       }

       PyThread_type_lock mutex_;

       friend class Guard;
   };
#elif defined(_WIN32)
    class Mutex : private CRITICAL_SECTION {
    public:
        Mutex() {
            InitializeCriticalSection(this);
        }

        ~Mutex() {
            DeleteCriticalSection(this);
        }

    private:
        void Lock() {
            EnterCriticalSection(this);
        }

        void Unlock() {
            LeaveCriticalSection(this);
        }

        friend class Guard;
    };
#else
    class Mutex {
    public:
        Mutex() {
            pthread_mutex_init(&mutex_, NULL);
        }

        ~Mutex() {
            pthread_mutex_destroy(&mutex_);
        }

    private:
        void Lock() {
            pthread_mutex_lock(&mutex_);
        }

        void Unlock() {
            pthread_mutex_unlock(&mutex_);
        }

        friend class Guard;

        pthread_mutex_t mutex_;
    };
#endif
  class Guard {
    Mutex &mutex_;

  public:
    Guard(Mutex & mutex) : mutex_(mutex) {
      mutex_.Lock();
    }

    ~Guard() {
      mutex_.Unlock();
    }
  };
# define SWIG_GUARD(mutex) Guard _guard(mutex)
#else
# define SWIG_GUARD(mutex)
#endif

  /* director base class */
  class Director {
  private:
    /* pointer to the wrapped python object */
    PyObject *swig_self;
    /* flag indicating whether the object is owned by python or c++ */
    mutable bool swig_disown_flag;

    /* decrement the reference count of the wrapped python object */
    void swig_decref() const {
      if (swig_disown_flag) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_DECREF(swig_self);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }

  public:
    /* wrap a python object. */
    Director(PyObject *self) : swig_self(self), swig_disown_flag(false) {
    }

    /* discard our reference at destruction */
    virtual ~Director() {
      swig_decref();
    }

    /* return a pointer to the wrapped python object */
    PyObject *swig_get_self() const {
      return swig_self;
    }

    /* acquire ownership of the wrapped python object (the sense of "disown" is from python) */
    void swig_disown() const {
      if (!swig_disown_flag) {
        swig_disown_flag=true;
        swig_incref();
      }
    }

    /* increase the reference count of the wrapped python object */
    void swig_incref() const {
      if (swig_disown_flag) {
        Py_INCREF(swig_self);
      }
    }

    /* methods to implement pseudo protected director members */
    virtual bool swig_get_inner(const char * /* swig_protected_method_name */) const {
      return true;
    }

    virtual void swig_set_inner(const char * /* swig_protected_method_name */, bool /* swig_val */) const {
    }

  /* ownership management */
  private:
    typedef std::map<void *, GCItem_var> swig_ownership_map;
    mutable swig_ownership_map swig_owner;
#ifdef __THREAD__
    static Mutex swig_mutex_own;
#endif

  public:
    template <typename Type>
    void swig_acquire_ownership_array(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCArray_T<Type>(vptr);
      }
    }

    template <typename Type>
    void swig_acquire_ownership(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_T<Type>(vptr);
      }
    }

    void swig_acquire_ownership_obj(void *vptr, int own) const {
      if (vptr && own) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_Object(own);
      }
    }

    int swig_release_ownership(void *vptr) const {
      int own = 0;
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_ownership_map::iterator iter = swig_owner.find(vptr);
        if (iter != swig_owner.end()) {
          own = iter->second->get_own();
          swig_owner.erase(iter);
        }
      }
      return own;
    }

    template <typename Type>
    static PyObject *swig_pyobj_disown(PyObject *pyobj, PyObject *SWIGUNUSEDPARM(args)) {
      SwigPyObject *sobj = (SwigPyObject *)pyobj;
      sobj->own = 0;
      Director *d = SWIG_DIRECTOR_CAST(reinterpret_cast<Type *>(sobj->ptr));
      if (d)
        d->swig_disown();
      return PyWeakref_NewProxy(pyobj, NULL);
    }
  };

#ifdef __THREAD__
  Mutex Director::swig_mutex_own;
#endif
}

#endif

/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_ASCXX_SetT_SymChar_t swig_types[0]
#define SWIGTYPE_p_ASCXX_SetT_long_t swig_types[1]
#define SWIGTYPE_p_Annotation swig_types[2]
#define SWIGTYPE_p_AnnotationDatabase swig_types[3]
#define SWIGTYPE_p_BlockStatusType swig_types[4]
#define SWIGTYPE_p_Compiler swig_types[5]
#define SWIGTYPE_p_Curve swig_types[6]
#define SWIGTYPE_p_Dimensions swig_types[7]
#define SWIGTYPE_p_ExtMethod swig_types[8]
#define SWIGTYPE_p_ExternalFunc swig_types[9]
#define SWIGTYPE_p_IncidenceMatrix swig_types[10]
#define SWIGTYPE_p_IncidencePoint swig_types[11]
#define SWIGTYPE_p_IncidencePointType swig_types[12]
#define SWIGTYPE_p_InitProcedure swig_types[13]
#define SWIGTYPE_p_Instanc swig_types[14]
#define SWIGTYPE_p_Instance swig_types[15]
#define SWIGTYPE_p_InstanceStatus swig_types[16]
#define SWIGTYPE_p_Integrator swig_types[17]
#define SWIGTYPE_p_IntegratorReporterConsole swig_types[18]
#define SWIGTYPE_p_IntegratorReporterCxx swig_types[19]
#define SWIGTYPE_p_IntegratorReporterNull swig_types[20]
#define SWIGTYPE_p_Library swig_types[21]
#define SWIGTYPE_p_Matrix swig_types[22]
#define SWIGTYPE_p_Method swig_types[23]
#define SWIGTYPE_p_Module swig_types[24]
#define SWIGTYPE_p_Nam swig_types[25]
#define SWIGTYPE_p_Plot swig_types[26]
#define SWIGTYPE_p_Registry swig_types[27]
#define SWIGTYPE_p_Relation swig_types[28]
#define SWIGTYPE_p_Reporter swig_types[29]
#define SWIGTYPE_p_Simulation swig_types[30]
#define SWIGTYPE_p_SingularityInfo swig_types[31]
#define SWIGTYPE_p_Solver swig_types[32]
#define SWIGTYPE_p_SolverHooks swig_types[33]
#define SWIGTYPE_p_SolverHooksManager swig_types[34]
#define SWIGTYPE_p_SolverParameter swig_types[35]
#define SWIGTYPE_p_SolverParameters swig_types[36]
#define SWIGTYPE_p_SolverReporter swig_types[37]
#define SWIGTYPE_p_SolverStatus swig_types[38]
#define SWIGTYPE_p_SymChar swig_types[39]
#define SWIGTYPE_p_Type swig_types[40]
#define SWIGTYPE_p_TypeDescription swig_types[41]
#define SWIGTYPE_p_Units swig_types[42]
#define SWIGTYPE_p_UnitsM swig_types[43]
#define SWIGTYPE_p_Value swig_types[44]
#define SWIGTYPE_p_ValueType swig_types[45]
#define SWIGTYPE_p_Variable swig_types[46]
#define SWIGTYPE_p_allocator_type swig_types[47]
#define SWIGTYPE_p_char swig_types[48]
#define SWIGTYPE_p_difference_type swig_types[49]
#define SWIGTYPE_p_dim_type swig_types[50]
#define SWIGTYPE_p_error_reporter_callback_t swig_types[51]
#define SWIGTYPE_p_key_type swig_types[52]
#define SWIGTYPE_p_mapped_type swig_types[53]
#define SWIGTYPE_p_mtx_matrix_t swig_types[54]
#define SWIGTYPE_p_p_PyObject swig_types[55]
#define SWIGTYPE_p_size_type swig_types[56]
#define SWIGTYPE_p_slv_parameter swig_types[57]
#define SWIGTYPE_p_std__allocatorT_Annotation_t swig_types[58]
#define SWIGTYPE_p_std__allocatorT_Curve_t swig_types[59]
#define SWIGTYPE_p_std__allocatorT_ExtMethod_t swig_types[60]
#define SWIGTYPE_p_std__allocatorT_IncidencePoint_t swig_types[61]
#define SWIGTYPE_p_std__allocatorT_Instanc_t swig_types[62]
#define SWIGTYPE_p_std__allocatorT_Method_t swig_types[63]
#define SWIGTYPE_p_std__allocatorT_Module_t swig_types[64]
#define SWIGTYPE_p_std__allocatorT_Relation_t swig_types[65]
#define SWIGTYPE_p_std__allocatorT_Solver_t swig_types[66]
#define SWIGTYPE_p_std__allocatorT_Type_t swig_types[67]
#define SWIGTYPE_p_std__allocatorT_UnitsM_t swig_types[68]
#define SWIGTYPE_p_std__allocatorT_Variable_t swig_types[69]
#define SWIGTYPE_p_std__allocatorT_double_t swig_types[70]
#define SWIGTYPE_p_std__allocatorT_int_t swig_types[71]
#define SWIGTYPE_p_std__allocatorT_std__pairT_int_const_std__string_t_t swig_types[72]
#define SWIGTYPE_p_std__allocatorT_std__string_t swig_types[73]
#define SWIGTYPE_p_std__allocatorT_std__vectorT_double_t_t swig_types[74]
#define SWIGTYPE_p_std__lessT_Type_t swig_types[75]
#define SWIGTYPE_p_std__lessT_int_t swig_types[76]
#define SWIGTYPE_p_std__mapT_int_std__string_t swig_types[77]
#define SWIGTYPE_p_std__setT_Type_t swig_types[78]
#define SWIGTYPE_p_std__string swig_types[79]
#define SWIGTYPE_p_std__vectorT_Annotation_t swig_types[80]
#define SWIGTYPE_p_std__vectorT_Curve_t swig_types[81]
#define SWIGTYPE_p_std__vectorT_ExtMethod_t swig_types[82]
#define SWIGTYPE_p_std__vectorT_IncidencePoint_t swig_types[83]
#define SWIGTYPE_p_std__vectorT_Instanc_t swig_types[84]
#define SWIGTYPE_p_std__vectorT_Method_t swig_types[85]
#define SWIGTYPE_p_std__vectorT_Module_t swig_types[86]
#define SWIGTYPE_p_std__vectorT_Relation_t swig_types[87]
#define SWIGTYPE_p_std__vectorT_Solver_t swig_types[88]
#define SWIGTYPE_p_std__vectorT_Type_t swig_types[89]
#define SWIGTYPE_p_std__vectorT_UnitsM_t swig_types[90]
#define SWIGTYPE_p_std__vectorT_Variable_t swig_types[91]
#define SWIGTYPE_p_std__vectorT_double_t swig_types[92]
#define SWIGTYPE_p_std__vectorT_int_t swig_types[93]
#define SWIGTYPE_p_std__vectorT_std__string_t swig_types[94]
#define SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t swig_types[95]
#define SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t swig_types[96]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[97]
#define SWIGTYPE_p_tm swig_types[98]
#define SWIGTYPE_p_value_t swig_types[99]
#define SWIGTYPE_p_value_type swig_types[100]
#define SWIGTYPE_p_var_variable swig_types[101]
static swig_type_info *swig_types[103];
static swig_module_info swig_module = {swig_types, 102, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#ifdef SWIG_TypeQuery
# undef SWIG_TypeQuery
#endif
#define SWIG_TypeQuery SWIG_Python_TypeQuery

/*-----------------------------------------------
              @(target):= _ascpy.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__ascpy

#else
#  define SWIG_init    init_ascpy

#endif
#define SWIG_name    "_ascpy"

#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <iostream>

#if PY_VERSION_HEX >= 0x03020000
# define SWIGPY_SLICE_ARG(obj) ((PyObject*) (obj))
#else
# define SWIGPY_SLICE_ARG(obj) ((PySliceObject*) (obj))
#endif


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <stddef.h>


namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    Py_INCREF(pyself);
    return pyself;
  }
#endif
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = (double) PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx, cx, rd;
   errno = 0;
   fx = floor(x);
   cx = ceil(x);
   rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      // Largest double not larger than ULONG_MAX (not portably calculated easily)
      // Note that double(ULONG_MAX) is stored in a double rounded up by one (for 64-bit unsigned long)
      // 0xfffffffffffff800ULL == (uint64_t)std::nextafter(double(__uint128_t(ULONG_MAX)+1), double(0))
      const double ulong_max = sizeof(unsigned long) == 8 ? 0xfffffffffffff800ULL : ULONG_MAX;
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ulong_max)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, 0, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
      if (val) *val = (unsigned long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}


  #define SWIG_From_long   PyInt_FromLong 


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_long_SS_long  (long long value)
{
  return ((value < LONG_MIN) || (value > LONG_MAX)) ?
    PyLong_FromLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    return SWIG_From_long  (static_cast< long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(ptrdiff_t) <= sizeof(long long) */
    return SWIG_From_long_SS_long  (static_cast< long long >(value));
  }
#endif
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      // Largest double not larger than LONG_MAX (not portably calculated easily)
      // Note that double(LONG_MAX) is stored in a double rounded up by one (for 64-bit long)
      // 0x7ffffffffffffc00LL == (int64_t)std::nextafter(double(__uint128_t(LONG_MAX)+1), double(0))
      const double long_max = sizeof(long) == 8 ? 0x7ffffffffffffc00LL : LONG_MAX;
      // No equivalent needed for 64-bit double(LONG_MIN) is exactly LONG_MIN
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, long_max)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_long_SS_long (PyObject *obj, long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    long long v = PyLong_AsLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    long v;
    res = SWIG_AsVal_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    const double mant_min = -mant_max;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, mant_min, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, mant_min, mant_max)) {
      if (val) *val = (long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    long v;
    res = SWIG_AsVal_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(ptrdiff_t) <= sizeof(long long)) {
    long long v;
    res = SWIG_AsVal_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  }
#endif
  return res;
}


#include <algorithm>


#include <vector>


#include <utility>


#include <map>


#include <algorithm>


#include <set>


#include "library.h"
#include "compiler.h"
#include "type.h"
#include "instance.h"
#include "variable.h"
#include "relation.h"
#include "name.h"
#include "reporter.h"
#include "simulation.h"
#include "solver.h"
#include "symchar.h"
#include "set.h"
#include "dimensions.h"
#include "units.h"
#include "extmethod.h"
#include "plot.h"
#include "curve.h"
#include "solverparameters.h"
#include "solverstatus.h"
#include "solverreporter.h"
#include "incidencematrix.h"
#include "registry.h"
#include "annotation.h"
#include "annotationdatabase.h"

extern "C"{
#include <ascend/compiler/importhandler.h>
#include <ascend/general/ascMalloc.h>
}

#ifdef ASC_WITH_DMALLOC
# include <dmalloc.h>
#endif



namespace swig {
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  /*
    Partial specialization for pointers (traits_info)
  */
  template <class Type> struct traits_info<Type *> {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers (traits)
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category>
  struct traits_as { };

  template <class Type, class Category>
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      int res = SWIG_ERROR;
      swig_type_info *descriptor = type_info<Type>();
      if (val) {
        Type *p = 0;
        int newmem = 0;
        res = descriptor ? SWIG_ConvertPtrAndOwn(obj, (void **)&p, descriptor, 0, &newmem) : SWIG_ERROR;
        if (SWIG_IsOK(res)) {
          if (newmem & SWIG_CAST_NEW_MEMORY) {
            res |= SWIG_NEWOBJMASK;
          }
          *val = p;
        }
      } else {
        res = descriptor ? SWIG_ConvertPtr(obj, 0, descriptor, 0) : SWIG_ERROR;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj) {
    return traits_as<Type, typename traits<Type>::category>::as(obj);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyForwardIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyForwardIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyForwardIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyForwardIteratorOpen_T<OutIterator, ValueType, FromOper>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyForwardIteratorOpen_T<OutIterator>(curr, seq)
    {
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyForwardIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyForwardIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyForwardIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

  protected:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyForwardIteratorClosed_T<OutIterator,ValueType,FromOper>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyForwardIteratorClosed_T<OutIterator, ValueType, FromOper> base0;
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyForwardIteratorClosed_T<OutIterator,ValueType,FromOper>(curr, first, last, seq)
    {
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == base0::begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }
  };


  template<typename OutIter>
  inline SwigPyIterator*
  make_output_forward_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyForwardIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_forward_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyForwardIteratorOpen_T<OutIter>(current, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }

}


  namespace swig {
    template <>  struct traits< Module > {
      typedef pointer_category category;
      static const char* type_name() { return"Module"; }
    };
  }


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  template <class Difference>
  inline size_t
  check_index(Difference i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    throw std::out_of_range("index out of range");
  }

  template <class Difference>
  void
  slice_adjust(Difference i, Difference j, Py_ssize_t step, size_t size, Difference &ii, Difference &jj, bool insert = false) {
    if (step == 0) {
      throw std::invalid_argument("slice step cannot be zero");
    } else if (step > 0) {
      // Required range: 0 <= i < size, 0 <= j < size, i <= j
      if (i < 0) {
        ii = 0;
      } else if (i < (Difference)size) {
        ii = i;
      } else if (insert && (i >= (Difference)size)) {
        ii = (Difference)size;
      }
      if (j < 0) {
        jj = 0;
      } else {
        jj = (j < (Difference)size) ? j : (Difference)size;
      }
      if (jj < ii)
        jj = ii;
    } else {
      // Required range: -1 <= i < size-1, -1 <= j < size-1, i >= j
      if (i < -1) {
        ii = -1;
      } else if (i < (Difference) size) {
        ii = i;
      } else if (i >= (Difference)(size-1)) {
        ii = (Difference)(size-1);
      }
      if (j < -1) {
        jj = -1;
      } else {
        jj = (j < (Difference)size ) ? j : (Difference)(size-1);
      }
      if (ii < jj)
        ii = jj;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence>
  inline void
  erase(Sequence* seq, const typename Sequence::iterator& position) {
    seq->erase(position);
  }

  template <class Sequence>
  struct traits_reserve {
    static void reserve(Sequence & /*seq*/, typename Sequence::size_type /*n*/) {
      // This should be specialized for types that support reserve
    }
  };

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj);

    if (step > 0) {
      typename Sequence::const_iterator sb = self->begin();
      typename Sequence::const_iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      if (step == 1) {
        return new Sequence(sb, se);
      } else {
        Sequence *sequence = new Sequence();
        swig::traits_reserve<Sequence>::reserve(*sequence, (jj - ii + step - 1) / step);
        typename Sequence::const_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<step && it!=se; ++c)
            it++;
        }
        return sequence;
      } 
    } else {
      Sequence *sequence = new Sequence();
      swig::traits_reserve<Sequence>::reserve(*sequence, (ii - jj - step - 1) / -step);
      typename Sequence::const_reverse_iterator sb = self->rbegin();
      typename Sequence::const_reverse_iterator se = self->rbegin();
      std::advance(sb,size-ii-1);
      std::advance(se,size-jj-1);
      typename Sequence::const_reverse_iterator it = sb;
      while (it!=se) {
        sequence->push_back(*it);
        for (Py_ssize_t c=0; c<-step && it!=se; ++c)
          it++;
      }
      return sequence;
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, Py_ssize_t step, const InputSeq& is = InputSeq()) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (step == 1) {
        size_t ssize = jj - ii;
        if (ssize <= is.size()) {
          // expanding/staying the same size
          swig::traits_reserve<Sequence>::reserve(*self, self->size() - ssize + is.size());
          typename Sequence::iterator sb = self->begin();
          typename InputSeq::const_iterator isit = is.begin();
          std::advance(sb,ii);
          std::advance(isit, jj - ii);
          self->insert(std::copy(is.begin(), isit, sb), isit, is.end());
        } else {
          // shrinking
          typename Sequence::iterator sb = self->begin();
          typename Sequence::iterator se = self->begin();
          std::advance(sb,ii);
          std::advance(se,jj);
          self->erase(sb,se);
          sb = self->begin();
          std::advance(sb,ii);
          self->insert(sb, is.begin(), is.end());
        }
      } else {
        size_t replacecount = (jj - ii + step - 1) / step;
        if (is.size() != replacecount) {
          char msg[1024];
          PyOS_snprintf(msg, sizeof(msg), "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
          throw std::invalid_argument(msg);
        }
        typename Sequence::const_iterator isit = is.begin();
        typename Sequence::iterator it = self->begin();
        std::advance(it,ii);
        for (size_t rc=0; rc<replacecount && it != self->end(); ++rc) {
          *it++ = *isit++;
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
        }
      }
    } else {
      size_t replacecount = (ii - jj - step - 1) / -step;
      if (is.size() != replacecount) {
        char msg[1024];
        PyOS_snprintf(msg, sizeof(msg), "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
        throw std::invalid_argument(msg);
      }
      typename Sequence::const_iterator isit = is.begin();
      typename Sequence::reverse_iterator it = self->rbegin();
      std::advance(it,size-ii-1);
      for (size_t rc=0; rc<replacecount && it != self->rend(); ++rc) {
        *it++ = *isit++;
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
      }
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      typename Sequence::iterator sb = self->begin();
      std::advance(sb,ii);
      if (step == 1) {
        typename Sequence::iterator se = self->begin();
        std::advance(se,jj);
        self->erase(sb,se);
      } else {
        typename Sequence::iterator it = sb;
        size_t delcount = (jj - ii + step - 1) / step;
        while (delcount) {
          it = self->erase(it);
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
          delcount--;
        }
      }
    } else {
      typename Sequence::reverse_iterator sb = self->rbegin();
      std::advance(sb,size-ii-1);
      typename Sequence::reverse_iterator it = sb;
      size_t delcount = (ii - jj - step - 1) / -step;
      while (delcount) {
        it = typename Sequence::reverse_iterator(self->erase((++it).base()));
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
        delcount--;
      }
    }
  }
}


namespace swig {
  template <class Seq, class T = typename Seq::value_type >
  struct IteratorProtocol {
    static void assign(PyObject *obj, Seq *seq) {
      SwigVar_PyObject iter = PyObject_GetIter(obj);
      if (iter) {
        SwigVar_PyObject item = PyIter_Next(iter);
        while (item) {
          seq->insert(seq->end(), swig::as<T>(item));
          item = PyIter_Next(iter);
        }
      }
    }

    static bool check(PyObject *obj) {
      bool ret = false;
      SwigVar_PyObject iter = PyObject_GetIter(obj);
      if (iter) {
        SwigVar_PyObject item = PyIter_Next(iter);
        ret = true;
        while (item) {
          ret = swig::check<T>(item);
          item = ret ? PyIter_Next(iter) : 0;
        }
      }
      return ret;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static bool is_iterable(PyObject *obj) {
      SwigVar_PyObject iter = PyObject_GetIter(obj);
      PyErr_Clear();
      return iter != 0;
    }

    static int asptr(PyObject *obj, sequence **seq) {
      int ret = SWIG_ERROR;
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	swig_type_info *descriptor = swig::type_info<sequence>();
	if (descriptor && SWIG_IsOK(::SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0))) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (is_iterable(obj)) {
	try {
	  if (seq) {
	    *seq = new sequence();
            IteratorProtocol<Seq, T>::assign(obj, *seq);
            if (!PyErr_Occurred())
              return SWIG_NEWOBJ;
	  } else {
	    return IteratorProtocol<Seq, T>::check(obj) ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
          if (seq && !PyErr_Occurred())
            PyErr_SetString(PyExc_TypeError, e.what());
	}
        if (seq)
          delete *seq;
	return SWIG_ERROR;
      }
      return ret;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_InternalNewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((Py_ssize_t)size);
	Py_ssize_t i = 0;
	for (const_iterator it = seq.begin(); it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_reserve<std::vector<T> > {
      static void reserve(std::vector<T> &seq, typename std::vector<T>::size_type n) {
        seq.reserve(n);
      }
    };

    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< Module, std::allocator< Module > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "Module" "," "std::allocator< Module >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_Module_Sg__iterator(std::vector< Module > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_Module_Sg____nonzero__(std::vector< Module > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_Module_Sg____bool__(std::vector< Module > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< Module >::size_type std_vector_Sl_Module_Sg____len__(std::vector< Module > const *self){
      return self->size();
    }

SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value));
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(size_t) <= sizeof(unsigned long long) */
    return SWIG_From_unsigned_SS_long_SS_long  (static_cast< unsigned long long >(value));
  }
#endif
}

SWIGINTERN std::vector< Module,std::allocator< Module > > *std_vector_Sl_Module_Sg____getslice__(std::vector< Module > *self,std::vector< Module >::difference_type i,std::vector< Module >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_Module_Sg____setslice____SWIG_0(std::vector< Module > *self,std::vector< Module >::difference_type i,std::vector< Module >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< Module,std::allocator< Module > >());
    }
SWIGINTERN void std_vector_Sl_Module_Sg____setslice____SWIG_1(std::vector< Module > *self,std::vector< Module >::difference_type i,std::vector< Module >::difference_type j,std::vector< Module,std::allocator< Module > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_Module_Sg____delslice__(std::vector< Module > *self,std::vector< Module >::difference_type i,std::vector< Module >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_Module_Sg____delitem____SWIG_0(std::vector< Module > *self,std::vector< Module >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< Module,std::allocator< Module > > *std_vector_Sl_Module_Sg____getitem____SWIG_0(std::vector< Module > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Module,std::allocator< Module > >::difference_type id = i;
      std::vector< Module,std::allocator< Module > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_Module_Sg____setitem____SWIG_0(std::vector< Module > *self,PySliceObject *slice,std::vector< Module,std::allocator< Module > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Module,std::allocator< Module > >::difference_type id = i;
      std::vector< Module,std::allocator< Module > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_Module_Sg____setitem____SWIG_1(std::vector< Module > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Module,std::allocator< Module > >::difference_type id = i;
      std::vector< Module,std::allocator< Module > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_Module_Sg____delitem____SWIG_1(std::vector< Module > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Module,std::allocator< Module > >::difference_type id = i;
      std::vector< Module,std::allocator< Module > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< Module >::value_type const &std_vector_Sl_Module_Sg____getitem____SWIG_1(std::vector< Module > const *self,std::vector< Module >::difference_type i){
      return *(swig::cgetpos(self, i));
    }

namespace swig {
  static PyObject* container_owner_attribute() {
    static PyObject* attr = SWIG_Python_str_FromChar("__swig_container");
    return attr;
  }

  template <typename T>
  struct container_owner {
    // By default, do not add the back-reference (for value types)
    // Specialization below will check the reference for pointer types.
    static bool back_reference(PyObject* /*child*/, PyObject* /*owner*/) {
      return false;
    }
  };

  template <>
  struct container_owner<swig::pointer_category> {  
    /*
     * Call to add a back-reference to the owning object when returning a 
     * reference from a container.  Will only set the reference if child
     * is a SWIG wrapper object that does not own the pointer.
     *
     * returns whether the reference was set or not
     */
    static bool back_reference(PyObject* child, PyObject* owner) {
      SwigPyObject* swigThis = SWIG_Python_GetSwigThis(child);
      if (swigThis && (swigThis->own & SWIG_POINTER_OWN) != SWIG_POINTER_OWN) {
        return PyObject_SetAttr(child, container_owner_attribute(), owner) != -1;
      }
      return false;
    }
  };
}

SWIGINTERN void std_vector_Sl_Module_Sg____setitem____SWIG_2(std::vector< Module > *self,std::vector< Module >::difference_type i,std::vector< Module >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< Module >::value_type std_vector_Sl_Module_Sg__pop(std::vector< Module > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< Module,std::allocator< Module > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_Module_Sg__append(std::vector< Module > *self,std::vector< Module >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< Module >::iterator std_vector_Sl_Module_Sg__erase__SWIG_0(std::vector< Module > *self,std::vector< Module >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< Module >::iterator std_vector_Sl_Module_Sg__erase__SWIG_1(std::vector< Module > *self,std::vector< Module >::iterator first,std::vector< Module >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< Module >::iterator std_vector_Sl_Module_Sg__insert__SWIG_0(std::vector< Module > *self,std::vector< Module >::iterator pos,std::vector< Module >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_Module_Sg__insert__SWIG_1(std::vector< Module > *self,std::vector< Module >::iterator pos,std::vector< Module >::size_type n,std::vector< Module >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits< Type > {
      typedef pointer_category category;
      static const char* type_name() { return"Type"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< Type, std::allocator< Type > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "Type" "," "std::allocator< Type >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_Type_Sg__iterator(std::vector< Type > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_Type_Sg____nonzero__(std::vector< Type > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_Type_Sg____bool__(std::vector< Type > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< Type >::size_type std_vector_Sl_Type_Sg____len__(std::vector< Type > const *self){
      return self->size();
    }
SWIGINTERN std::vector< Type,std::allocator< Type > > *std_vector_Sl_Type_Sg____getslice__(std::vector< Type > *self,std::vector< Type >::difference_type i,std::vector< Type >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_Type_Sg____setslice____SWIG_0(std::vector< Type > *self,std::vector< Type >::difference_type i,std::vector< Type >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< Type,std::allocator< Type > >());
    }
SWIGINTERN void std_vector_Sl_Type_Sg____setslice____SWIG_1(std::vector< Type > *self,std::vector< Type >::difference_type i,std::vector< Type >::difference_type j,std::vector< Type,std::allocator< Type > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_Type_Sg____delslice__(std::vector< Type > *self,std::vector< Type >::difference_type i,std::vector< Type >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_Type_Sg____delitem____SWIG_0(std::vector< Type > *self,std::vector< Type >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< Type,std::allocator< Type > > *std_vector_Sl_Type_Sg____getitem____SWIG_0(std::vector< Type > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Type,std::allocator< Type > >::difference_type id = i;
      std::vector< Type,std::allocator< Type > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_Type_Sg____setitem____SWIG_0(std::vector< Type > *self,PySliceObject *slice,std::vector< Type,std::allocator< Type > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Type,std::allocator< Type > >::difference_type id = i;
      std::vector< Type,std::allocator< Type > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_Type_Sg____setitem____SWIG_1(std::vector< Type > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Type,std::allocator< Type > >::difference_type id = i;
      std::vector< Type,std::allocator< Type > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_Type_Sg____delitem____SWIG_1(std::vector< Type > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Type,std::allocator< Type > >::difference_type id = i;
      std::vector< Type,std::allocator< Type > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< Type >::value_type const &std_vector_Sl_Type_Sg____getitem____SWIG_1(std::vector< Type > const *self,std::vector< Type >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_Type_Sg____setitem____SWIG_2(std::vector< Type > *self,std::vector< Type >::difference_type i,std::vector< Type >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< Type >::value_type std_vector_Sl_Type_Sg__pop(std::vector< Type > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< Type,std::allocator< Type > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_Type_Sg__append(std::vector< Type > *self,std::vector< Type >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< Type >::iterator std_vector_Sl_Type_Sg__erase__SWIG_0(std::vector< Type > *self,std::vector< Type >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< Type >::iterator std_vector_Sl_Type_Sg__erase__SWIG_1(std::vector< Type > *self,std::vector< Type >::iterator first,std::vector< Type >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< Type >::iterator std_vector_Sl_Type_Sg__insert__SWIG_0(std::vector< Type > *self,std::vector< Type >::iterator pos,std::vector< Type >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_Type_Sg__insert__SWIG_1(std::vector< Type > *self,std::vector< Type >::iterator pos,std::vector< Type >::size_type n,std::vector< Type >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits< Method > {
      typedef pointer_category category;
      static const char* type_name() { return"Method"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< Method, std::allocator< Method > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "Method" "," "std::allocator< Method >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_Method_Sg__iterator(std::vector< Method > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_Method_Sg____nonzero__(std::vector< Method > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_Method_Sg____bool__(std::vector< Method > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< Method >::size_type std_vector_Sl_Method_Sg____len__(std::vector< Method > const *self){
      return self->size();
    }
SWIGINTERN std::vector< Method,std::allocator< Method > > *std_vector_Sl_Method_Sg____getslice__(std::vector< Method > *self,std::vector< Method >::difference_type i,std::vector< Method >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_Method_Sg____setslice____SWIG_0(std::vector< Method > *self,std::vector< Method >::difference_type i,std::vector< Method >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< Method,std::allocator< Method > >());
    }
SWIGINTERN void std_vector_Sl_Method_Sg____setslice____SWIG_1(std::vector< Method > *self,std::vector< Method >::difference_type i,std::vector< Method >::difference_type j,std::vector< Method,std::allocator< Method > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_Method_Sg____delslice__(std::vector< Method > *self,std::vector< Method >::difference_type i,std::vector< Method >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_Method_Sg____delitem____SWIG_0(std::vector< Method > *self,std::vector< Method >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< Method,std::allocator< Method > > *std_vector_Sl_Method_Sg____getitem____SWIG_0(std::vector< Method > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Method,std::allocator< Method > >::difference_type id = i;
      std::vector< Method,std::allocator< Method > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_Method_Sg____setitem____SWIG_0(std::vector< Method > *self,PySliceObject *slice,std::vector< Method,std::allocator< Method > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Method,std::allocator< Method > >::difference_type id = i;
      std::vector< Method,std::allocator< Method > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_Method_Sg____setitem____SWIG_1(std::vector< Method > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Method,std::allocator< Method > >::difference_type id = i;
      std::vector< Method,std::allocator< Method > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_Method_Sg____delitem____SWIG_1(std::vector< Method > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Method,std::allocator< Method > >::difference_type id = i;
      std::vector< Method,std::allocator< Method > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< Method >::value_type const &std_vector_Sl_Method_Sg____getitem____SWIG_1(std::vector< Method > const *self,std::vector< Method >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_Method_Sg____setitem____SWIG_2(std::vector< Method > *self,std::vector< Method >::difference_type i,std::vector< Method >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< Method >::value_type std_vector_Sl_Method_Sg__pop(std::vector< Method > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< Method,std::allocator< Method > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_Method_Sg__append(std::vector< Method > *self,std::vector< Method >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< Method >::iterator std_vector_Sl_Method_Sg__erase__SWIG_0(std::vector< Method > *self,std::vector< Method >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< Method >::iterator std_vector_Sl_Method_Sg__erase__SWIG_1(std::vector< Method > *self,std::vector< Method >::iterator first,std::vector< Method >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< Method >::iterator std_vector_Sl_Method_Sg__insert__SWIG_0(std::vector< Method > *self,std::vector< Method >::iterator pos,std::vector< Method >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_Method_Sg__insert__SWIG_1(std::vector< Method > *self,std::vector< Method >::iterator pos,std::vector< Method >::size_type n,std::vector< Method >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits< Instanc > {
      typedef pointer_category category;
      static const char* type_name() { return"Instanc"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< Instanc, std::allocator< Instanc > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "Instanc" "," "std::allocator< Instanc >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_Instanc_Sg__iterator(std::vector< Instanc > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_Instanc_Sg____nonzero__(std::vector< Instanc > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_Instanc_Sg____bool__(std::vector< Instanc > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< Instanc >::size_type std_vector_Sl_Instanc_Sg____len__(std::vector< Instanc > const *self){
      return self->size();
    }
SWIGINTERN std::vector< Instanc,std::allocator< Instanc > > *std_vector_Sl_Instanc_Sg____getslice__(std::vector< Instanc > *self,std::vector< Instanc >::difference_type i,std::vector< Instanc >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_Instanc_Sg____setslice____SWIG_0(std::vector< Instanc > *self,std::vector< Instanc >::difference_type i,std::vector< Instanc >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< Instanc,std::allocator< Instanc > >());
    }
SWIGINTERN void std_vector_Sl_Instanc_Sg____setslice____SWIG_1(std::vector< Instanc > *self,std::vector< Instanc >::difference_type i,std::vector< Instanc >::difference_type j,std::vector< Instanc,std::allocator< Instanc > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_Instanc_Sg____delslice__(std::vector< Instanc > *self,std::vector< Instanc >::difference_type i,std::vector< Instanc >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_Instanc_Sg____delitem____SWIG_0(std::vector< Instanc > *self,std::vector< Instanc >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< Instanc,std::allocator< Instanc > > *std_vector_Sl_Instanc_Sg____getitem____SWIG_0(std::vector< Instanc > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Instanc,std::allocator< Instanc > >::difference_type id = i;
      std::vector< Instanc,std::allocator< Instanc > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_Instanc_Sg____setitem____SWIG_0(std::vector< Instanc > *self,PySliceObject *slice,std::vector< Instanc,std::allocator< Instanc > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Instanc,std::allocator< Instanc > >::difference_type id = i;
      std::vector< Instanc,std::allocator< Instanc > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_Instanc_Sg____setitem____SWIG_1(std::vector< Instanc > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Instanc,std::allocator< Instanc > >::difference_type id = i;
      std::vector< Instanc,std::allocator< Instanc > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_Instanc_Sg____delitem____SWIG_1(std::vector< Instanc > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Instanc,std::allocator< Instanc > >::difference_type id = i;
      std::vector< Instanc,std::allocator< Instanc > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< Instanc >::value_type const &std_vector_Sl_Instanc_Sg____getitem____SWIG_1(std::vector< Instanc > const *self,std::vector< Instanc >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_Instanc_Sg____setitem____SWIG_2(std::vector< Instanc > *self,std::vector< Instanc >::difference_type i,std::vector< Instanc >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< Instanc >::value_type std_vector_Sl_Instanc_Sg__pop(std::vector< Instanc > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< Instanc,std::allocator< Instanc > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_Instanc_Sg__append(std::vector< Instanc > *self,std::vector< Instanc >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< Instanc >::iterator std_vector_Sl_Instanc_Sg__erase__SWIG_0(std::vector< Instanc > *self,std::vector< Instanc >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< Instanc >::iterator std_vector_Sl_Instanc_Sg__erase__SWIG_1(std::vector< Instanc > *self,std::vector< Instanc >::iterator first,std::vector< Instanc >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< Instanc >::iterator std_vector_Sl_Instanc_Sg__insert__SWIG_0(std::vector< Instanc > *self,std::vector< Instanc >::iterator pos,std::vector< Instanc >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_Instanc_Sg__insert__SWIG_1(std::vector< Instanc > *self,std::vector< Instanc >::iterator pos,std::vector< Instanc >::size_type n,std::vector< Instanc >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits< ExtMethod > {
      typedef pointer_category category;
      static const char* type_name() { return"ExtMethod"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< ExtMethod, std::allocator< ExtMethod > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "ExtMethod" "," "std::allocator< ExtMethod >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_ExtMethod_Sg__iterator(std::vector< ExtMethod > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_ExtMethod_Sg____nonzero__(std::vector< ExtMethod > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_ExtMethod_Sg____bool__(std::vector< ExtMethod > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< ExtMethod >::size_type std_vector_Sl_ExtMethod_Sg____len__(std::vector< ExtMethod > const *self){
      return self->size();
    }
SWIGINTERN std::vector< ExtMethod,std::allocator< ExtMethod > > *std_vector_Sl_ExtMethod_Sg____getslice__(std::vector< ExtMethod > *self,std::vector< ExtMethod >::difference_type i,std::vector< ExtMethod >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_ExtMethod_Sg____setslice____SWIG_0(std::vector< ExtMethod > *self,std::vector< ExtMethod >::difference_type i,std::vector< ExtMethod >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< ExtMethod,std::allocator< ExtMethod > >());
    }
SWIGINTERN void std_vector_Sl_ExtMethod_Sg____setslice____SWIG_1(std::vector< ExtMethod > *self,std::vector< ExtMethod >::difference_type i,std::vector< ExtMethod >::difference_type j,std::vector< ExtMethod,std::allocator< ExtMethod > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_ExtMethod_Sg____delslice__(std::vector< ExtMethod > *self,std::vector< ExtMethod >::difference_type i,std::vector< ExtMethod >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_ExtMethod_Sg____delitem____SWIG_0(std::vector< ExtMethod > *self,std::vector< ExtMethod >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< ExtMethod,std::allocator< ExtMethod > > *std_vector_Sl_ExtMethod_Sg____getitem____SWIG_0(std::vector< ExtMethod > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< ExtMethod,std::allocator< ExtMethod > >::difference_type id = i;
      std::vector< ExtMethod,std::allocator< ExtMethod > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_ExtMethod_Sg____setitem____SWIG_0(std::vector< ExtMethod > *self,PySliceObject *slice,std::vector< ExtMethod,std::allocator< ExtMethod > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< ExtMethod,std::allocator< ExtMethod > >::difference_type id = i;
      std::vector< ExtMethod,std::allocator< ExtMethod > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_ExtMethod_Sg____setitem____SWIG_1(std::vector< ExtMethod > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< ExtMethod,std::allocator< ExtMethod > >::difference_type id = i;
      std::vector< ExtMethod,std::allocator< ExtMethod > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_ExtMethod_Sg____delitem____SWIG_1(std::vector< ExtMethod > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< ExtMethod,std::allocator< ExtMethod > >::difference_type id = i;
      std::vector< ExtMethod,std::allocator< ExtMethod > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< ExtMethod >::value_type const &std_vector_Sl_ExtMethod_Sg____getitem____SWIG_1(std::vector< ExtMethod > const *self,std::vector< ExtMethod >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_ExtMethod_Sg____setitem____SWIG_2(std::vector< ExtMethod > *self,std::vector< ExtMethod >::difference_type i,std::vector< ExtMethod >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< ExtMethod >::value_type std_vector_Sl_ExtMethod_Sg__pop(std::vector< ExtMethod > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< ExtMethod,std::allocator< ExtMethod > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_ExtMethod_Sg__append(std::vector< ExtMethod > *self,std::vector< ExtMethod >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< ExtMethod >::iterator std_vector_Sl_ExtMethod_Sg__erase__SWIG_0(std::vector< ExtMethod > *self,std::vector< ExtMethod >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< ExtMethod >::iterator std_vector_Sl_ExtMethod_Sg__erase__SWIG_1(std::vector< ExtMethod > *self,std::vector< ExtMethod >::iterator first,std::vector< ExtMethod >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< ExtMethod >::iterator std_vector_Sl_ExtMethod_Sg__insert__SWIG_0(std::vector< ExtMethod > *self,std::vector< ExtMethod >::iterator pos,std::vector< ExtMethod >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_ExtMethod_Sg__insert__SWIG_1(std::vector< ExtMethod > *self,std::vector< ExtMethod >::iterator pos,std::vector< ExtMethod >::size_type n,std::vector< ExtMethod >::value_type const &x){ self->insert(pos, n, x); }

  #define SWIG_From_double   PyFloat_FromDouble 


namespace swig {
  template <> struct traits< double > {
    typedef value_category category;
    static const char* type_name() { return"double"; }
  };
  template <>  struct traits_asval< double > {
    typedef double value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_double (obj, val);
    }
  };
  template <>  struct traits_from< double > {
    typedef double value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_double  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector< double, std::allocator< double > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "double" "," "std::allocator< double >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_double_Sg__iterator(std::vector< double > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_double_Sg____nonzero__(std::vector< double > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_double_Sg____bool__(std::vector< double > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< double >::size_type std_vector_Sl_double_Sg____len__(std::vector< double > const *self){
      return self->size();
    }
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg____getslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setslice____SWIG_0(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< double,std::allocator< double > >());
    }
SWIGINTERN void std_vector_Sl_double_Sg____setslice____SWIG_1(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j,std::vector< double,std::allocator< double > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delitem____SWIG_0(std::vector< double > *self,std::vector< double >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg____getitem____SWIG_0(std::vector< double > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< double,std::allocator< double > >::difference_type id = i;
      std::vector< double,std::allocator< double > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_0(std::vector< double > *self,PySliceObject *slice,std::vector< double,std::allocator< double > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< double,std::allocator< double > >::difference_type id = i;
      std::vector< double,std::allocator< double > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_1(std::vector< double > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< double,std::allocator< double > >::difference_type id = i;
      std::vector< double,std::allocator< double > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delitem____SWIG_1(std::vector< double > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< double,std::allocator< double > >::difference_type id = i;
      std::vector< double,std::allocator< double > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< double >::value_type const &std_vector_Sl_double_Sg____getitem____SWIG_1(std::vector< double > const *self,std::vector< double >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_2(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< double >::value_type std_vector_Sl_double_Sg__pop(std::vector< double > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< double,std::allocator< double > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_double_Sg__append(std::vector< double > *self,std::vector< double >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< double >::iterator std_vector_Sl_double_Sg__erase__SWIG_0(std::vector< double > *self,std::vector< double >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< double >::iterator std_vector_Sl_double_Sg__erase__SWIG_1(std::vector< double > *self,std::vector< double >::iterator first,std::vector< double >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< double >::iterator std_vector_Sl_double_Sg__insert__SWIG_0(std::vector< double > *self,std::vector< double >::iterator pos,std::vector< double >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_double_Sg__insert__SWIG_1(std::vector< double > *self,std::vector< double >::iterator pos,std::vector< double >::size_type n,std::vector< double >::value_type const &x){ self->insert(pos, n, x); }

      namespace swig {
	template <>  struct traits<std::vector< std::vector< double,std::allocator< double > >, std::allocator< std::vector< double,std::allocator< double > > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::vector< double,std::allocator< double > >" "," "std::allocator< std::vector< double,std::allocator< double > > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_vector_Sl_double_Sg__Sg__iterator(std::vector< std::vector< double > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_vector_Sl_double_Sg__Sg____nonzero__(std::vector< std::vector< double > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_vector_Sl_double_Sg__Sg____bool__(std::vector< std::vector< double > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::vector< double > >::size_type std_vector_Sl_std_vector_Sl_double_Sg__Sg____len__(std::vector< std::vector< double > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *std_vector_Sl_std_vector_Sl_double_Sg__Sg____getslice__(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::difference_type i,std::vector< std::vector< double > >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg____setslice____SWIG_0(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::difference_type i,std::vector< std::vector< double > >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >());
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg____setslice____SWIG_1(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::difference_type i,std::vector< std::vector< double > >::difference_type j,std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg____delslice__(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::difference_type i,std::vector< std::vector< double > >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg____delitem____SWIG_0(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *std_vector_Sl_std_vector_Sl_double_Sg__Sg____getitem____SWIG_0(std::vector< std::vector< double > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >::difference_type id = i;
      std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg____setitem____SWIG_0(std::vector< std::vector< double > > *self,PySliceObject *slice,std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >::difference_type id = i;
      std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg____setitem____SWIG_1(std::vector< std::vector< double > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >::difference_type id = i;
      std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg____delitem____SWIG_1(std::vector< std::vector< double > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >::difference_type id = i;
      std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< std::vector< double > >::value_type const &std_vector_Sl_std_vector_Sl_double_Sg__Sg____getitem____SWIG_1(std::vector< std::vector< double > > const *self,std::vector< std::vector< double > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg____setitem____SWIG_2(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::difference_type i,std::vector< std::vector< double > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< std::vector< double > >::value_type std_vector_Sl_std_vector_Sl_double_Sg__Sg__pop(std::vector< std::vector< double > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg__append(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< std::vector< double > >::iterator std_vector_Sl_std_vector_Sl_double_Sg__Sg__erase__SWIG_0(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::vector< double > >::iterator std_vector_Sl_std_vector_Sl_double_Sg__Sg__erase__SWIG_1(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::iterator first,std::vector< std::vector< double > >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::vector< double > >::iterator std_vector_Sl_std_vector_Sl_double_Sg__Sg__insert__SWIG_0(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::iterator pos,std::vector< std::vector< double > >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg__insert__SWIG_1(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::iterator pos,std::vector< std::vector< double > >::size_type n,std::vector< std::vector< double > >::value_type const &x){ self->insert(pos, n, x); }

SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


namespace swig {
  template <> struct traits< int > {
    typedef value_category category;
    static const char* type_name() { return"int"; }
  };
  template <>  struct traits_asval< int > {
    typedef int value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_int (obj, val);
    }
  };
  template <>  struct traits_from< int > {
    typedef int value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_int  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector< int, std::allocator< int > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "int" "," "std::allocator< int >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_int_Sg__iterator(std::vector< int > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_int_Sg____nonzero__(std::vector< int > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_int_Sg____bool__(std::vector< int > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< int >::size_type std_vector_Sl_int_Sg____len__(std::vector< int > const *self){
      return self->size();
    }
SWIGINTERN std::vector< int,std::allocator< int > > *std_vector_Sl_int_Sg____getslice__(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_int_Sg____setslice____SWIG_0(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< int,std::allocator< int > >());
    }
SWIGINTERN void std_vector_Sl_int_Sg____setslice____SWIG_1(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j,std::vector< int,std::allocator< int > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delslice__(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delitem____SWIG_0(std::vector< int > *self,std::vector< int >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< int,std::allocator< int > > *std_vector_Sl_int_Sg____getitem____SWIG_0(std::vector< int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< int,std::allocator< int > >::difference_type id = i;
      std::vector< int,std::allocator< int > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_int_Sg____setitem____SWIG_0(std::vector< int > *self,PySliceObject *slice,std::vector< int,std::allocator< int > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< int,std::allocator< int > >::difference_type id = i;
      std::vector< int,std::allocator< int > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_int_Sg____setitem____SWIG_1(std::vector< int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< int,std::allocator< int > >::difference_type id = i;
      std::vector< int,std::allocator< int > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delitem____SWIG_1(std::vector< int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< int,std::allocator< int > >::difference_type id = i;
      std::vector< int,std::allocator< int > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< int >::value_type const &std_vector_Sl_int_Sg____getitem____SWIG_1(std::vector< int > const *self,std::vector< int >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_int_Sg____setitem____SWIG_2(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< int >::value_type std_vector_Sl_int_Sg__pop(std::vector< int > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< int,std::allocator< int > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_int_Sg__append(std::vector< int > *self,std::vector< int >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< int >::iterator std_vector_Sl_int_Sg__erase__SWIG_0(std::vector< int > *self,std::vector< int >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< int >::iterator std_vector_Sl_int_Sg__erase__SWIG_1(std::vector< int > *self,std::vector< int >::iterator first,std::vector< int >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< int >::iterator std_vector_Sl_int_Sg__insert__SWIG_0(std::vector< int > *self,std::vector< int >::iterator pos,std::vector< int >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_int_Sg__insert__SWIG_1(std::vector< int > *self,std::vector< int >::iterator pos,std::vector< int >::size_type n,std::vector< int >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits< Curve > {
      typedef pointer_category category;
      static const char* type_name() { return"Curve"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< Curve, std::allocator< Curve > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "Curve" "," "std::allocator< Curve >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_Curve_Sg__iterator(std::vector< Curve > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_Curve_Sg____nonzero__(std::vector< Curve > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_Curve_Sg____bool__(std::vector< Curve > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< Curve >::size_type std_vector_Sl_Curve_Sg____len__(std::vector< Curve > const *self){
      return self->size();
    }
SWIGINTERN std::vector< Curve,std::allocator< Curve > > *std_vector_Sl_Curve_Sg____getslice__(std::vector< Curve > *self,std::vector< Curve >::difference_type i,std::vector< Curve >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_Curve_Sg____setslice____SWIG_0(std::vector< Curve > *self,std::vector< Curve >::difference_type i,std::vector< Curve >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< Curve,std::allocator< Curve > >());
    }
SWIGINTERN void std_vector_Sl_Curve_Sg____setslice____SWIG_1(std::vector< Curve > *self,std::vector< Curve >::difference_type i,std::vector< Curve >::difference_type j,std::vector< Curve,std::allocator< Curve > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_Curve_Sg____delslice__(std::vector< Curve > *self,std::vector< Curve >::difference_type i,std::vector< Curve >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_Curve_Sg____delitem____SWIG_0(std::vector< Curve > *self,std::vector< Curve >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< Curve,std::allocator< Curve > > *std_vector_Sl_Curve_Sg____getitem____SWIG_0(std::vector< Curve > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Curve,std::allocator< Curve > >::difference_type id = i;
      std::vector< Curve,std::allocator< Curve > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_Curve_Sg____setitem____SWIG_0(std::vector< Curve > *self,PySliceObject *slice,std::vector< Curve,std::allocator< Curve > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Curve,std::allocator< Curve > >::difference_type id = i;
      std::vector< Curve,std::allocator< Curve > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_Curve_Sg____setitem____SWIG_1(std::vector< Curve > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Curve,std::allocator< Curve > >::difference_type id = i;
      std::vector< Curve,std::allocator< Curve > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_Curve_Sg____delitem____SWIG_1(std::vector< Curve > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Curve,std::allocator< Curve > >::difference_type id = i;
      std::vector< Curve,std::allocator< Curve > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< Curve >::value_type const &std_vector_Sl_Curve_Sg____getitem____SWIG_1(std::vector< Curve > const *self,std::vector< Curve >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_Curve_Sg____setitem____SWIG_2(std::vector< Curve > *self,std::vector< Curve >::difference_type i,std::vector< Curve >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< Curve >::value_type std_vector_Sl_Curve_Sg__pop(std::vector< Curve > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< Curve,std::allocator< Curve > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_Curve_Sg__append(std::vector< Curve > *self,std::vector< Curve >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< Curve >::iterator std_vector_Sl_Curve_Sg__erase__SWIG_0(std::vector< Curve > *self,std::vector< Curve >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< Curve >::iterator std_vector_Sl_Curve_Sg__erase__SWIG_1(std::vector< Curve > *self,std::vector< Curve >::iterator first,std::vector< Curve >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< Curve >::iterator std_vector_Sl_Curve_Sg__insert__SWIG_0(std::vector< Curve > *self,std::vector< Curve >::iterator pos,std::vector< Curve >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_Curve_Sg__insert__SWIG_1(std::vector< Curve > *self,std::vector< Curve >::iterator pos,std::vector< Curve >::size_type n,std::vector< Curve >::value_type const &x){ self->insert(pos, n, x); }

SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


/* Return string from Python obj. NOTE: obj must remain in scope in order
   to use the returned cptr (but only when alloc is set to SWIG_OLDOBJ) */
SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char **cptr, size_t *psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
  if (PyBytes_Check(obj))
#else
  if (PyUnicode_Check(obj))
#endif
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
    PyObject *bytes = NULL;
    int ret = SWIG_OK;
    if (alloc)
      *alloc = SWIG_OLDOBJ;
#if PY_VERSION_HEX>=0x03000000 && defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    if (PyBytes_AsStringAndSize(obj, &cstr, &len) == -1)
      return SWIG_TypeError;
#else
    cstr = (char *)SWIG_PyUnicode_AsUTF8AndSize(obj, &len, &bytes);
    if (!cstr)
      return SWIG_TypeError;
    /* The returned string is only duplicated if the char * returned is not owned and memory managed by obj */
    if (bytes && cptr) {
      if (alloc) {
        cstr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        *alloc = SWIG_NEWOBJ;
      } else {
        /* alloc must be set in order to clean up allocated memory */
        return SWIG_RuntimeError;
      }
    }
#endif
    if (cptr) *cptr = cstr;
    if (psize) *psize = len + 1;
    Py_XDECREF(bytes);
    return ret;
  } else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
#error "Cannot use both SWIG_PYTHON_2_UNICODE and SWIG_PYTHON_STRICT_BYTE_CHAR at once"
#endif
#if PY_VERSION_HEX<0x03000000
    if (PyUnicode_Check(obj)) {
      char *cstr; Py_ssize_t len;
      if (!alloc && cptr) {
        return SWIG_RuntimeError;
      }
      obj = PyUnicode_AsUTF8String(obj);
      if (!obj)
        return SWIG_TypeError;
      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
        if (cptr) {
          if (alloc) *alloc = SWIG_NEWOBJ;
          *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        }
        if (psize) *psize = len + 1;

        Py_XDECREF(obj);
        return SWIG_OK;
      } else {
        Py_XDECREF(obj);
      }
    }
#endif
#endif

    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERN int
SWIG_AsVal_std_string (PyObject * obj, std::string *val)
{
  std::string* v = (std::string *) 0;
  int res = SWIG_AsPtr_std_string (obj, &v);
  if (!SWIG_IsOK(res)) return res;
  if (v) {
    if (val) *val = *v;
    if (SWIG_IsNewObj(res)) {
      delete v;
      res = SWIG_DelNewMask(res);
    }
    return res;
  }
  return SWIG_ERROR;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
      return PyBytes_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#else
      return PyUnicode_DecodeUTF8(carray, static_cast< Py_ssize_t >(size), "surrogateescape");
#endif
#else
      return PyString_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


namespace swig {
  template <> struct traits< std::string > {
    typedef value_category category;
    static const char* type_name() { return"std::string"; }
  };
  template <>  struct traits_asval< std::string > {
    typedef std::string value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_std_string (obj, val);
    }
  };
  template <>  struct traits_from< std::string > {
    typedef std::string value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_std_string  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector< std::string, std::allocator< std::string > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::string" "," "std::allocator< std::string >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_string_Sg__iterator(std::vector< std::string > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_string_Sg____nonzero__(std::vector< std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_string_Sg____bool__(std::vector< std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::string >::size_type std_vector_Sl_std_string_Sg____len__(std::vector< std::string > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::string,std::allocator< std::string > > *std_vector_Sl_std_string_Sg____getslice__(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setslice____SWIG_0(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< std::string,std::allocator< std::string > >());
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setslice____SWIG_1(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j,std::vector< std::string,std::allocator< std::string > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delslice__(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delitem____SWIG_0(std::vector< std::string > *self,std::vector< std::string >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< std::string,std::allocator< std::string > > *std_vector_Sl_std_string_Sg____getitem____SWIG_0(std::vector< std::string > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::string,std::allocator< std::string > >::difference_type id = i;
      std::vector< std::string,std::allocator< std::string > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setitem____SWIG_0(std::vector< std::string > *self,PySliceObject *slice,std::vector< std::string,std::allocator< std::string > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::string,std::allocator< std::string > >::difference_type id = i;
      std::vector< std::string,std::allocator< std::string > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setitem____SWIG_1(std::vector< std::string > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::string,std::allocator< std::string > >::difference_type id = i;
      std::vector< std::string,std::allocator< std::string > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delitem____SWIG_1(std::vector< std::string > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::string,std::allocator< std::string > >::difference_type id = i;
      std::vector< std::string,std::allocator< std::string > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< std::string >::value_type const &std_vector_Sl_std_string_Sg____getitem____SWIG_1(std::vector< std::string > const *self,std::vector< std::string >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setitem____SWIG_2(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< std::string >::value_type std_vector_Sl_std_string_Sg__pop(std::vector< std::string > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::string,std::allocator< std::string > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_std_string_Sg__append(std::vector< std::string > *self,std::vector< std::string >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< std::string >::iterator std_vector_Sl_std_string_Sg__erase__SWIG_0(std::vector< std::string > *self,std::vector< std::string >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::string >::iterator std_vector_Sl_std_string_Sg__erase__SWIG_1(std::vector< std::string > *self,std::vector< std::string >::iterator first,std::vector< std::string >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::string >::iterator std_vector_Sl_std_string_Sg__insert__SWIG_0(std::vector< std::string > *self,std::vector< std::string >::iterator pos,std::vector< std::string >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_string_Sg__insert__SWIG_1(std::vector< std::string > *self,std::vector< std::string >::iterator pos,std::vector< std::string >::size_type n,std::vector< std::string >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {


















































    template <class T, class U >
    struct traits_asptr<std::pair<T,U> >  {
      typedef std::pair<T,U> value_type;

      static int get_pair(PyObject* first, PyObject* second,
			  std::pair<T,U> **val) 
      {
	if (val) {
	  value_type *vp = (new std::pair<T,U>());
	  T *pfirst = &(vp->first);
	  int res1 = swig::asval((PyObject*)first, pfirst);
	  if (!SWIG_IsOK(res1)) {
	    delete vp;
	    return res1;
	  }
	  U *psecond = &(vp->second);
	  int res2 = swig::asval((PyObject*)second, psecond);
	  if (!SWIG_IsOK(res2)) {
	    delete vp;
	    return res2;
	  }
	  *val = vp;
	  return SWIG_AddNewMask(res1 > res2 ? res1 : res2);
	} else {
	  T *pfirst = 0;
	  int res1 = swig::asval((PyObject*)first, pfirst);
	  if (!SWIG_IsOK(res1)) return res1;
	  U *psecond = 0;
	  int res2 = swig::asval((PyObject*)second, psecond);
	  if (!SWIG_IsOK(res2)) return res2;
	  return res1 > res2 ? res1 : res2;
	}
      }

      static int asptr(PyObject *obj, std::pair<T,U> **val) {
	int res = SWIG_ERROR;
	if (PyTuple_Check(obj)) {
	  if (PyTuple_GET_SIZE(obj) == 2) {
	    res = get_pair(PyTuple_GET_ITEM(obj,0),PyTuple_GET_ITEM(obj,1), val);
	  }
	} else if (PySequence_Check(obj)) {
	  if (PySequence_Size(obj) == 2) {
	    swig::SwigVar_PyObject first = PySequence_GetItem(obj,0);
	    swig::SwigVar_PyObject second = PySequence_GetItem(obj,1);
	    res = get_pair(first, second, val);
	  }
	} else {
	  value_type *p = 0;
	  swig_type_info *descriptor = swig::type_info<value_type>();
	  res = descriptor ? SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0) : SWIG_ERROR;
	  if (SWIG_IsOK(res) && val)  *val = p;
	}
	return res;
      }
    };


    template <class T, class U >
    struct traits_from<std::pair<T,U> >   {
      static PyObject *from(const std::pair<T,U>& val) {
	PyObject* obj = PyTuple_New(2);
	PyTuple_SetItem(obj,0,swig::from(val.first));
	PyTuple_SetItem(obj,1,swig::from(val.second));
	return obj;
      }
    };
  }





































      namespace swig {
	template <>  struct traits<std::pair< int, std::string > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "int" "," "std::string" " >";
	  }
	};
      }
    

  namespace swig {
    template <class ValueType>
    struct from_key_oper 
    {
      typedef const ValueType& argument_type;
      typedef  PyObject *result_type;
      result_type operator()(argument_type v) const
      {
	return swig::from(v.first);
      }
    };

    template <class ValueType>
    struct from_value_oper 
    {
      typedef const ValueType& argument_type;
      typedef  PyObject *result_type;
      result_type operator()(argument_type v) const
      {
	return swig::from(v.second);
      }
    };

    template<class OutIterator, class FromOper, class ValueType = typename OutIterator::value_type>
    struct SwigPyMapIterator_T : SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper>
    {
      SwigPyMapIterator_T(OutIterator curr, OutIterator first, OutIterator last, PyObject *seq)
	: SwigPyIteratorClosed_T<OutIterator,ValueType,FromOper>(curr, first, last, seq)
      {
      }
    };


    template<class OutIterator,
	     class FromOper = from_key_oper<typename OutIterator::value_type> >
    struct SwigPyMapKeyIterator_T : SwigPyMapIterator_T<OutIterator, FromOper>
    {
      SwigPyMapKeyIterator_T(OutIterator curr, OutIterator first, OutIterator last, PyObject *seq)
	: SwigPyMapIterator_T<OutIterator, FromOper>(curr, first, last, seq)
      {
      }
    };

    template<typename OutIter>
    inline SwigPyIterator*
    make_output_key_iterator(const OutIter& current, const OutIter& begin, const OutIter& end, PyObject *seq = 0)
    {
      return new SwigPyMapKeyIterator_T<OutIter>(current, begin, end, seq);
    }

    template<class OutIterator,
	     class FromOper = from_value_oper<typename OutIterator::value_type> >
    struct SwigPyMapValueIterator_T : SwigPyMapIterator_T<OutIterator, FromOper>
    {
      SwigPyMapValueIterator_T(OutIterator curr, OutIterator first, OutIterator last, PyObject *seq)
	: SwigPyMapIterator_T<OutIterator, FromOper>(curr, first, last, seq)
      {
      }
    };
    

    template<typename OutIter>
    inline SwigPyIterator*
    make_output_value_iterator(const OutIter& current, const OutIter& begin, const OutIter& end, PyObject *seq = 0)
    {
      return new SwigPyMapValueIterator_T<OutIter>(current, begin, end, seq);
    }
  }


  namespace swig {
    template <class K, class T, class Compare, class Alloc>
    struct traits_asptr<std::map<K,T,Compare,Alloc > >  {
      typedef std::map<K,T,Compare,Alloc > map_type;
      static int asptr(PyObject *obj, map_type **val) {
	int res = SWIG_ERROR;
	SWIG_PYTHON_THREAD_BEGIN_BLOCK;
	if (PyDict_Check(obj)) {
	  SwigVar_PyObject items = PyObject_CallMethod(obj,(char *)"items",NULL);
#if PY_VERSION_HEX >= 0x03000000
          /* In Python 3.x the ".items()" method returns a dict_items object */
          items = PySequence_Fast(items, ".items() didn't return a sequence!");
#endif
	  res = traits_asptr_stdseq<map_type, std::pair<K, T> >::asptr(items, val);
	} else {
	  map_type *p = 0;
	  swig_type_info *descriptor = swig::type_info<map_type>();
	  res = descriptor ? SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0) : SWIG_ERROR;
	  if (SWIG_IsOK(res) && val)  *val = p;
	}
	SWIG_PYTHON_THREAD_END_BLOCK;
	return res;
      }      
    };
      
    template <class K, class T, class Compare, class Alloc >
    struct traits_from<std::map<K,T,Compare,Alloc > >  {
      typedef std::map<K,T,Compare,Alloc > map_type;
      typedef typename map_type::const_iterator const_iterator;
      typedef typename map_type::size_type size_type;

      static PyObject *asdict(const map_type& map) {
	SWIG_PYTHON_THREAD_BEGIN_BLOCK;
	size_type size = map.size();
	Py_ssize_t pysize = (size <= (size_type) INT_MAX) ? (Py_ssize_t) size : -1;
	if (pysize < 0) {
	  PyErr_SetString(PyExc_OverflowError, "map size not valid in python");
	  SWIG_PYTHON_THREAD_END_BLOCK;
	  return NULL;
	}
	PyObject *obj = PyDict_New();
	for (const_iterator i= map.begin(); i!= map.end(); ++i) {
	  swig::SwigVar_PyObject key = swig::from(i->first);
	  swig::SwigVar_PyObject val = swig::from(i->second);
	  PyDict_SetItem(obj, key, val);
	}
	SWIG_PYTHON_THREAD_END_BLOCK;
	return obj;
      }
                
      static PyObject *from(const map_type& map) {
	swig_type_info *desc = swig::type_info<map_type>();
	if (desc && desc->clientdata) {
	  return SWIG_InternalNewPointerObj(new map_type(map), desc, SWIG_POINTER_OWN);
	} else {
	  return asdict(map);
	}
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::map< int, std::string, std::less< int >, std::allocator< std::pair< int const,std::string > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::map<" "int" "," "std::string" "," "std::less< int >" "," "std::allocator< std::pair< int const,std::string > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_map_Sl_int_Sc_std_string_Sg__iterator(std::map< int,std::string > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_map_Sl_int_Sc_std_string_Sg____nonzero__(std::map< int,std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_map_Sl_int_Sc_std_string_Sg____bool__(std::map< int,std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN std::map< int,std::string >::size_type std_map_Sl_int_Sc_std_string_Sg____len__(std::map< int,std::string > const *self){
      return self->size();
    }
SWIGINTERN std::map< int,std::string >::mapped_type const &std_map_Sl_int_Sc_std_string_Sg____getitem__(std::map< int,std::string > *self,std::map< int,std::string >::key_type const &key){
      std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > >::const_iterator i = self->find(key);
      if (i != self->end())
	return i->second;
      else
	throw std::out_of_range("key not found");
    }
SWIGINTERN void std_map_Sl_int_Sc_std_string_Sg____delitem__(std::map< int,std::string > *self,std::map< int,std::string >::key_type const &key){
      std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > >::iterator i = self->find(key);
      if (i != self->end())
	self->erase(i);
      else
	throw std::out_of_range("key not found");
    }
SWIGINTERN bool std_map_Sl_int_Sc_std_string_Sg__has_key(std::map< int,std::string > const *self,std::map< int,std::string >::key_type const &key){
      std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > >::const_iterator i = self->find(key);
      return i != self->end();
    }
SWIGINTERN PyObject *std_map_Sl_int_Sc_std_string_Sg__keys(std::map< int,std::string > *self){
      std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > >::size_type size = self->size();
      Py_ssize_t pysize = (size <= (std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > >::size_type) INT_MAX) ? (Py_ssize_t) size : -1;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError, "map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }
      PyObject* keyList = PyList_New(pysize);
      std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > >::const_iterator i = self->begin();
      for (Py_ssize_t j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(keyList, j, swig::from(i->first));
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return keyList;
    }
SWIGINTERN PyObject *std_map_Sl_int_Sc_std_string_Sg__values(std::map< int,std::string > *self){
      std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > >::size_type size = self->size();
      Py_ssize_t pysize = (size <= (std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > >::size_type) INT_MAX) ? (Py_ssize_t) size : -1;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError, "map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }
      PyObject* valList = PyList_New(pysize);
      std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > >::const_iterator i = self->begin();
      for (Py_ssize_t j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(valList, j, swig::from(i->second));
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return valList;
    }
SWIGINTERN PyObject *std_map_Sl_int_Sc_std_string_Sg__items(std::map< int,std::string > *self){
      std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > >::size_type size = self->size();
      Py_ssize_t pysize = (size <= (std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > >::size_type) INT_MAX) ? (Py_ssize_t) size : -1;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError, "map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }    
      PyObject* itemList = PyList_New(pysize);
      std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > >::const_iterator i = self->begin();
      for (Py_ssize_t j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(itemList, j, swig::from(*i));
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return itemList;
    }
SWIGINTERN bool std_map_Sl_int_Sc_std_string_Sg____contains__(std::map< int,std::string > *self,std::map< int,std::string >::key_type const &key){
      return self->find(key) != self->end();
    }
SWIGINTERN swig::SwigPyIterator *std_map_Sl_int_Sc_std_string_Sg__key_iterator(std::map< int,std::string > *self,PyObject **PYTHON_SELF){
      return swig::make_output_key_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN swig::SwigPyIterator *std_map_Sl_int_Sc_std_string_Sg__value_iterator(std::map< int,std::string > *self,PyObject **PYTHON_SELF){
      return swig::make_output_value_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN void std_map_Sl_int_Sc_std_string_Sg____setitem____SWIG_0(std::map< int,std::string > *self,std::map< int,std::string >::key_type const &key){
      self->erase(key);
    }
SWIGINTERN void std_map_Sl_int_Sc_std_string_Sg____setitem____SWIG_1(std::map< int,std::string > *self,std::map< int,std::string >::key_type const &key,std::map< int,std::string >::mapped_type const &x){
#ifdef __cpp_lib_map_try_emplace
      (*self).insert_or_assign(key, x);
#else
      (*self)[key] = x;
#endif
    }
SWIGINTERN PyObject *std_map_Sl_int_Sc_std_string_Sg__asdict(std::map< int,std::string > *self){
      return swig::traits_from< std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > >::asdict(*self);
    }
SWIGINTERN void std_map_Sl_int_Sc_std_string_Sg__erase__SWIG_1(std::map< int,std::string > *self,std::map< int,std::string >::iterator position){ self->erase(position); }
SWIGINTERN void std_map_Sl_int_Sc_std_string_Sg__erase__SWIG_2(std::map< int,std::string > *self,std::map< int,std::string >::iterator first,std::map< int,std::string >::iterator last){ self->erase(first, last); }

  namespace swig {
    template <>  struct traits< Annotation > {
      typedef pointer_category category;
      static const char* type_name() { return"Annotation"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< Annotation, std::allocator< Annotation > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "Annotation" "," "std::allocator< Annotation >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_Annotation_Sg__iterator(std::vector< Annotation > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_Annotation_Sg____nonzero__(std::vector< Annotation > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_Annotation_Sg____bool__(std::vector< Annotation > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< Annotation >::size_type std_vector_Sl_Annotation_Sg____len__(std::vector< Annotation > const *self){
      return self->size();
    }
SWIGINTERN std::vector< Annotation,std::allocator< Annotation > > *std_vector_Sl_Annotation_Sg____getslice__(std::vector< Annotation > *self,std::vector< Annotation >::difference_type i,std::vector< Annotation >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_Annotation_Sg____setslice____SWIG_0(std::vector< Annotation > *self,std::vector< Annotation >::difference_type i,std::vector< Annotation >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< Annotation,std::allocator< Annotation > >());
    }
SWIGINTERN void std_vector_Sl_Annotation_Sg____setslice____SWIG_1(std::vector< Annotation > *self,std::vector< Annotation >::difference_type i,std::vector< Annotation >::difference_type j,std::vector< Annotation,std::allocator< Annotation > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_Annotation_Sg____delslice__(std::vector< Annotation > *self,std::vector< Annotation >::difference_type i,std::vector< Annotation >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_Annotation_Sg____delitem____SWIG_0(std::vector< Annotation > *self,std::vector< Annotation >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< Annotation,std::allocator< Annotation > > *std_vector_Sl_Annotation_Sg____getitem____SWIG_0(std::vector< Annotation > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Annotation,std::allocator< Annotation > >::difference_type id = i;
      std::vector< Annotation,std::allocator< Annotation > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_Annotation_Sg____setitem____SWIG_0(std::vector< Annotation > *self,PySliceObject *slice,std::vector< Annotation,std::allocator< Annotation > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Annotation,std::allocator< Annotation > >::difference_type id = i;
      std::vector< Annotation,std::allocator< Annotation > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_Annotation_Sg____setitem____SWIG_1(std::vector< Annotation > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Annotation,std::allocator< Annotation > >::difference_type id = i;
      std::vector< Annotation,std::allocator< Annotation > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_Annotation_Sg____delitem____SWIG_1(std::vector< Annotation > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Annotation,std::allocator< Annotation > >::difference_type id = i;
      std::vector< Annotation,std::allocator< Annotation > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< Annotation >::value_type const &std_vector_Sl_Annotation_Sg____getitem____SWIG_1(std::vector< Annotation > const *self,std::vector< Annotation >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_Annotation_Sg____setitem____SWIG_2(std::vector< Annotation > *self,std::vector< Annotation >::difference_type i,std::vector< Annotation >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< Annotation >::value_type std_vector_Sl_Annotation_Sg__pop(std::vector< Annotation > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< Annotation,std::allocator< Annotation > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_Annotation_Sg__append(std::vector< Annotation > *self,std::vector< Annotation >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< Annotation >::iterator std_vector_Sl_Annotation_Sg__erase__SWIG_0(std::vector< Annotation > *self,std::vector< Annotation >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< Annotation >::iterator std_vector_Sl_Annotation_Sg__erase__SWIG_1(std::vector< Annotation > *self,std::vector< Annotation >::iterator first,std::vector< Annotation >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< Annotation >::iterator std_vector_Sl_Annotation_Sg__insert__SWIG_0(std::vector< Annotation > *self,std::vector< Annotation >::iterator pos,std::vector< Annotation >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_Annotation_Sg__insert__SWIG_1(std::vector< Annotation > *self,std::vector< Annotation >::iterator pos,std::vector< Annotation >::size_type n,std::vector< Annotation >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits< UnitsM > {
      typedef pointer_category category;
      static const char* type_name() { return"UnitsM"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< UnitsM, std::allocator< UnitsM > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "UnitsM" "," "std::allocator< UnitsM >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_UnitsM_Sg__iterator(std::vector< UnitsM > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_UnitsM_Sg____nonzero__(std::vector< UnitsM > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_UnitsM_Sg____bool__(std::vector< UnitsM > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< UnitsM >::size_type std_vector_Sl_UnitsM_Sg____len__(std::vector< UnitsM > const *self){
      return self->size();
    }
SWIGINTERN std::vector< UnitsM,std::allocator< UnitsM > > *std_vector_Sl_UnitsM_Sg____getslice__(std::vector< UnitsM > *self,std::vector< UnitsM >::difference_type i,std::vector< UnitsM >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_UnitsM_Sg____setslice____SWIG_0(std::vector< UnitsM > *self,std::vector< UnitsM >::difference_type i,std::vector< UnitsM >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< UnitsM,std::allocator< UnitsM > >());
    }
SWIGINTERN void std_vector_Sl_UnitsM_Sg____setslice____SWIG_1(std::vector< UnitsM > *self,std::vector< UnitsM >::difference_type i,std::vector< UnitsM >::difference_type j,std::vector< UnitsM,std::allocator< UnitsM > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_UnitsM_Sg____delslice__(std::vector< UnitsM > *self,std::vector< UnitsM >::difference_type i,std::vector< UnitsM >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_UnitsM_Sg____delitem____SWIG_0(std::vector< UnitsM > *self,std::vector< UnitsM >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< UnitsM,std::allocator< UnitsM > > *std_vector_Sl_UnitsM_Sg____getitem____SWIG_0(std::vector< UnitsM > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< UnitsM,std::allocator< UnitsM > >::difference_type id = i;
      std::vector< UnitsM,std::allocator< UnitsM > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_UnitsM_Sg____setitem____SWIG_0(std::vector< UnitsM > *self,PySliceObject *slice,std::vector< UnitsM,std::allocator< UnitsM > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< UnitsM,std::allocator< UnitsM > >::difference_type id = i;
      std::vector< UnitsM,std::allocator< UnitsM > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_UnitsM_Sg____setitem____SWIG_1(std::vector< UnitsM > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< UnitsM,std::allocator< UnitsM > >::difference_type id = i;
      std::vector< UnitsM,std::allocator< UnitsM > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_UnitsM_Sg____delitem____SWIG_1(std::vector< UnitsM > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< UnitsM,std::allocator< UnitsM > >::difference_type id = i;
      std::vector< UnitsM,std::allocator< UnitsM > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< UnitsM >::value_type const &std_vector_Sl_UnitsM_Sg____getitem____SWIG_1(std::vector< UnitsM > const *self,std::vector< UnitsM >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_UnitsM_Sg____setitem____SWIG_2(std::vector< UnitsM > *self,std::vector< UnitsM >::difference_type i,std::vector< UnitsM >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< UnitsM >::value_type std_vector_Sl_UnitsM_Sg__pop(std::vector< UnitsM > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< UnitsM,std::allocator< UnitsM > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_UnitsM_Sg__append(std::vector< UnitsM > *self,std::vector< UnitsM >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< UnitsM >::iterator std_vector_Sl_UnitsM_Sg__erase__SWIG_0(std::vector< UnitsM > *self,std::vector< UnitsM >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< UnitsM >::iterator std_vector_Sl_UnitsM_Sg__erase__SWIG_1(std::vector< UnitsM > *self,std::vector< UnitsM >::iterator first,std::vector< UnitsM >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< UnitsM >::iterator std_vector_Sl_UnitsM_Sg__insert__SWIG_0(std::vector< UnitsM > *self,std::vector< UnitsM >::iterator pos,std::vector< UnitsM >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_UnitsM_Sg__insert__SWIG_1(std::vector< UnitsM > *self,std::vector< UnitsM >::iterator pos,std::vector< UnitsM >::size_type n,std::vector< UnitsM >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <class T>
    struct traits_asptr<std::set<T> >  {
      static int asptr(PyObject *obj, std::set<T> **s) {
	return traits_asptr_stdseq<std::set<T> >::asptr(obj, s);
      }
    };

    template <class T>
    struct traits_from<std::set<T> > {
      static PyObject *from(const std::set<T>& vec) {
	return traits_from_stdseq<std::set<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::set< Type, std::less< Type >, std::allocator< Type > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::set<" "Type" "," "std::less< Type >" "," "std::allocator< Type >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_set_Sl_Type_Sg__iterator(std::set< Type > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_set_Sl_Type_Sg____nonzero__(std::set< Type > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_set_Sl_Type_Sg____bool__(std::set< Type > const *self){
      return !(self->empty());
    }
SWIGINTERN std::set< Type >::size_type std_set_Sl_Type_Sg____len__(std::set< Type > const *self){
      return self->size();
    }
SWIGINTERN void std_set_Sl_Type_Sg__append(std::set< Type > *self,std::set< Type >::value_type x){
       self->insert(x);
     }
SWIGINTERN bool std_set_Sl_Type_Sg____contains__(std::set< Type > *self,std::set< Type >::value_type x){
       return self->find(x) != self->end();
     }
SWIGINTERN std::set< Type >::value_type std_set_Sl_Type_Sg____getitem__(std::set< Type > const *self,std::set< Type >::difference_type i){
       return *(swig::cgetpos(self, i));
     }
SWIGINTERN void std_set_Sl_Type_Sg__add(std::set< Type > *self,std::set< Type >::value_type x){
       self->insert(x);
     }
SWIGINTERN void std_set_Sl_Type_Sg__discard(std::set< Type > *self,std::set< Type >::value_type x){
       self->erase(x);
     }
SWIGINTERN void std_set_Sl_Type_Sg__erase__SWIG_1(std::set< Type > *self,std::set< Type >::iterator pos){ self->erase(pos); }
SWIGINTERN void std_set_Sl_Type_Sg__erase__SWIG_2(std::set< Type > *self,std::set< Type >::iterator first,std::set< Type >::iterator last){ self->erase(first, last); }




SWIGINTERN void Reporter_reportError(Reporter *self,char const *msg){
		ERROR_REPORTER_NOLINE(ASC_USER_ERROR,"%s", msg);
	}
SWIGINTERN void Reporter_reportNote(Reporter *self,char const *msg){
		ERROR_REPORTER_NOLINE(ASC_USER_NOTE,"%s",msg);
	}
SWIGINTERN void Reporter_reportWarning(Reporter *self,char const *msg){
		ERROR_REPORTER_NOLINE(ASC_USER_WARNING,"%s",msg);
	}
SWIGINTERN void Reporter_reportSuccess(Reporter *self,char const *msg){
		ERROR_REPORTER_NOLINE(ASC_USER_SUCCESS,"%s",msg);
	}

SWIGINTERNINLINE PyObject*
  SWIG_From_unsigned_SS_int  (unsigned int value)
{
  return PyInt_FromSize_t((size_t) value);
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_From_short  (short value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}

SWIGINTERN char const *SymChar___repr__(SymChar *self){
		return self->toString();
	}

SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}

SWIGINTERN char const *Type___repr__(Type *self){
		return self->getName().toString();
	}
SWIGINTERN char const *Instanc___repr__(Instanc *self){
		return self->getName().toString();
	}
SWIGINTERN Instanc Instanc___getattr__(Instanc *self,char const *name){
		return self->getChild(SymChar(name));
	}
SWIGINTERN Instanc Instanc___getitem__(Instanc *self,long const &index){
		return self->getChild(index);
	}
SWIGINTERN double Instanc___float__(Instanc *self){
		if(self->isReal()){
			return self->getRealValue();
		}else{
			throw std::runtime_error("Can't cast this instance to float");
		}
	}
SWIGINTERN void Registry_set(Registry *self,char const *key,PyObject *obj){
		/* CONSOLE_DEBUG("Registry::set(PyObject *obj=%p)",obj); */
		self->setPyObject(key,obj);
	}

void shutdown(){
	ascshutdown("Shutdown ASCEND...");
}


#include "config.h"
#include "integrator.h"
#include "integratorreporter.h"
#include "solver.h"
#include "incidencematrix.h"
#include "solverparameter.h"
#include "value.h"
#include "solverparameters.h"
#include "solverreporter.h"
#include "solverhooks.h"
#include "curve.h"
#include "matrix.h"

SWIGINTERN Instanc Simulation___getitem__(Simulation *self,long const &index){
		return self->getModel().getChild(index);
	}
SWIGINTERN Instanc Simulation___getattr__(Simulation *self,char const *name){
		return self->getModel().getChild(SymChar(name));
	}

  namespace swig {
    template <>  struct traits< IncidencePoint > {
      typedef pointer_category category;
      static const char* type_name() { return"IncidencePoint"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< IncidencePoint, std::allocator< IncidencePoint > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "IncidencePoint" "," "std::allocator< IncidencePoint >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_IncidencePoint_Sg__iterator(std::vector< IncidencePoint > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_IncidencePoint_Sg____nonzero__(std::vector< IncidencePoint > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_IncidencePoint_Sg____bool__(std::vector< IncidencePoint > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< IncidencePoint >::size_type std_vector_Sl_IncidencePoint_Sg____len__(std::vector< IncidencePoint > const *self){
      return self->size();
    }
SWIGINTERN std::vector< IncidencePoint,std::allocator< IncidencePoint > > *std_vector_Sl_IncidencePoint_Sg____getslice__(std::vector< IncidencePoint > *self,std::vector< IncidencePoint >::difference_type i,std::vector< IncidencePoint >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_IncidencePoint_Sg____setslice____SWIG_0(std::vector< IncidencePoint > *self,std::vector< IncidencePoint >::difference_type i,std::vector< IncidencePoint >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< IncidencePoint,std::allocator< IncidencePoint > >());
    }
SWIGINTERN void std_vector_Sl_IncidencePoint_Sg____setslice____SWIG_1(std::vector< IncidencePoint > *self,std::vector< IncidencePoint >::difference_type i,std::vector< IncidencePoint >::difference_type j,std::vector< IncidencePoint,std::allocator< IncidencePoint > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_IncidencePoint_Sg____delslice__(std::vector< IncidencePoint > *self,std::vector< IncidencePoint >::difference_type i,std::vector< IncidencePoint >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_IncidencePoint_Sg____delitem____SWIG_0(std::vector< IncidencePoint > *self,std::vector< IncidencePoint >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< IncidencePoint,std::allocator< IncidencePoint > > *std_vector_Sl_IncidencePoint_Sg____getitem____SWIG_0(std::vector< IncidencePoint > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< IncidencePoint,std::allocator< IncidencePoint > >::difference_type id = i;
      std::vector< IncidencePoint,std::allocator< IncidencePoint > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_IncidencePoint_Sg____setitem____SWIG_0(std::vector< IncidencePoint > *self,PySliceObject *slice,std::vector< IncidencePoint,std::allocator< IncidencePoint > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< IncidencePoint,std::allocator< IncidencePoint > >::difference_type id = i;
      std::vector< IncidencePoint,std::allocator< IncidencePoint > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_IncidencePoint_Sg____setitem____SWIG_1(std::vector< IncidencePoint > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< IncidencePoint,std::allocator< IncidencePoint > >::difference_type id = i;
      std::vector< IncidencePoint,std::allocator< IncidencePoint > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_IncidencePoint_Sg____delitem____SWIG_1(std::vector< IncidencePoint > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< IncidencePoint,std::allocator< IncidencePoint > >::difference_type id = i;
      std::vector< IncidencePoint,std::allocator< IncidencePoint > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< IncidencePoint >::value_type const &std_vector_Sl_IncidencePoint_Sg____getitem____SWIG_1(std::vector< IncidencePoint > const *self,std::vector< IncidencePoint >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_IncidencePoint_Sg____setitem____SWIG_2(std::vector< IncidencePoint > *self,std::vector< IncidencePoint >::difference_type i,std::vector< IncidencePoint >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< IncidencePoint >::value_type std_vector_Sl_IncidencePoint_Sg__pop(std::vector< IncidencePoint > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< IncidencePoint,std::allocator< IncidencePoint > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_IncidencePoint_Sg__append(std::vector< IncidencePoint > *self,std::vector< IncidencePoint >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< IncidencePoint >::iterator std_vector_Sl_IncidencePoint_Sg__erase__SWIG_0(std::vector< IncidencePoint > *self,std::vector< IncidencePoint >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< IncidencePoint >::iterator std_vector_Sl_IncidencePoint_Sg__erase__SWIG_1(std::vector< IncidencePoint > *self,std::vector< IncidencePoint >::iterator first,std::vector< IncidencePoint >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< IncidencePoint >::iterator std_vector_Sl_IncidencePoint_Sg__insert__SWIG_0(std::vector< IncidencePoint > *self,std::vector< IncidencePoint >::iterator pos,std::vector< IncidencePoint >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_IncidencePoint_Sg__insert__SWIG_1(std::vector< IncidencePoint > *self,std::vector< IncidencePoint >::iterator pos,std::vector< IncidencePoint >::size_type n,std::vector< IncidencePoint >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits< Variable > {
      typedef pointer_category category;
      static const char* type_name() { return"Variable"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< Variable, std::allocator< Variable > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "Variable" "," "std::allocator< Variable >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_Variable_Sg__iterator(std::vector< Variable > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_Variable_Sg____nonzero__(std::vector< Variable > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_Variable_Sg____bool__(std::vector< Variable > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< Variable >::size_type std_vector_Sl_Variable_Sg____len__(std::vector< Variable > const *self){
      return self->size();
    }
SWIGINTERN std::vector< Variable,std::allocator< Variable > > *std_vector_Sl_Variable_Sg____getslice__(std::vector< Variable > *self,std::vector< Variable >::difference_type i,std::vector< Variable >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_Variable_Sg____setslice____SWIG_0(std::vector< Variable > *self,std::vector< Variable >::difference_type i,std::vector< Variable >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< Variable,std::allocator< Variable > >());
    }
SWIGINTERN void std_vector_Sl_Variable_Sg____setslice____SWIG_1(std::vector< Variable > *self,std::vector< Variable >::difference_type i,std::vector< Variable >::difference_type j,std::vector< Variable,std::allocator< Variable > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_Variable_Sg____delslice__(std::vector< Variable > *self,std::vector< Variable >::difference_type i,std::vector< Variable >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_Variable_Sg____delitem____SWIG_0(std::vector< Variable > *self,std::vector< Variable >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< Variable,std::allocator< Variable > > *std_vector_Sl_Variable_Sg____getitem____SWIG_0(std::vector< Variable > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Variable,std::allocator< Variable > >::difference_type id = i;
      std::vector< Variable,std::allocator< Variable > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_Variable_Sg____setitem____SWIG_0(std::vector< Variable > *self,PySliceObject *slice,std::vector< Variable,std::allocator< Variable > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Variable,std::allocator< Variable > >::difference_type id = i;
      std::vector< Variable,std::allocator< Variable > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_Variable_Sg____setitem____SWIG_1(std::vector< Variable > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Variable,std::allocator< Variable > >::difference_type id = i;
      std::vector< Variable,std::allocator< Variable > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_Variable_Sg____delitem____SWIG_1(std::vector< Variable > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Variable,std::allocator< Variable > >::difference_type id = i;
      std::vector< Variable,std::allocator< Variable > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< Variable >::value_type const &std_vector_Sl_Variable_Sg____getitem____SWIG_1(std::vector< Variable > const *self,std::vector< Variable >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_Variable_Sg____setitem____SWIG_2(std::vector< Variable > *self,std::vector< Variable >::difference_type i,std::vector< Variable >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< Variable >::value_type std_vector_Sl_Variable_Sg__pop(std::vector< Variable > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< Variable,std::allocator< Variable > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_Variable_Sg__append(std::vector< Variable > *self,std::vector< Variable >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< Variable >::iterator std_vector_Sl_Variable_Sg__erase__SWIG_0(std::vector< Variable > *self,std::vector< Variable >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< Variable >::iterator std_vector_Sl_Variable_Sg__erase__SWIG_1(std::vector< Variable > *self,std::vector< Variable >::iterator first,std::vector< Variable >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< Variable >::iterator std_vector_Sl_Variable_Sg__insert__SWIG_0(std::vector< Variable > *self,std::vector< Variable >::iterator pos,std::vector< Variable >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_Variable_Sg__insert__SWIG_1(std::vector< Variable > *self,std::vector< Variable >::iterator pos,std::vector< Variable >::size_type n,std::vector< Variable >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits< Relation > {
      typedef pointer_category category;
      static const char* type_name() { return"Relation"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< Relation, std::allocator< Relation > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "Relation" "," "std::allocator< Relation >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_Relation_Sg__iterator(std::vector< Relation > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_Relation_Sg____nonzero__(std::vector< Relation > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_Relation_Sg____bool__(std::vector< Relation > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< Relation >::size_type std_vector_Sl_Relation_Sg____len__(std::vector< Relation > const *self){
      return self->size();
    }
SWIGINTERN std::vector< Relation,std::allocator< Relation > > *std_vector_Sl_Relation_Sg____getslice__(std::vector< Relation > *self,std::vector< Relation >::difference_type i,std::vector< Relation >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_Relation_Sg____setslice____SWIG_0(std::vector< Relation > *self,std::vector< Relation >::difference_type i,std::vector< Relation >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< Relation,std::allocator< Relation > >());
    }
SWIGINTERN void std_vector_Sl_Relation_Sg____setslice____SWIG_1(std::vector< Relation > *self,std::vector< Relation >::difference_type i,std::vector< Relation >::difference_type j,std::vector< Relation,std::allocator< Relation > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_Relation_Sg____delslice__(std::vector< Relation > *self,std::vector< Relation >::difference_type i,std::vector< Relation >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_Relation_Sg____delitem____SWIG_0(std::vector< Relation > *self,std::vector< Relation >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< Relation,std::allocator< Relation > > *std_vector_Sl_Relation_Sg____getitem____SWIG_0(std::vector< Relation > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Relation,std::allocator< Relation > >::difference_type id = i;
      std::vector< Relation,std::allocator< Relation > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_Relation_Sg____setitem____SWIG_0(std::vector< Relation > *self,PySliceObject *slice,std::vector< Relation,std::allocator< Relation > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Relation,std::allocator< Relation > >::difference_type id = i;
      std::vector< Relation,std::allocator< Relation > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_Relation_Sg____setitem____SWIG_1(std::vector< Relation > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Relation,std::allocator< Relation > >::difference_type id = i;
      std::vector< Relation,std::allocator< Relation > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_Relation_Sg____delitem____SWIG_1(std::vector< Relation > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Relation,std::allocator< Relation > >::difference_type id = i;
      std::vector< Relation,std::allocator< Relation > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< Relation >::value_type const &std_vector_Sl_Relation_Sg____getitem____SWIG_1(std::vector< Relation > const *self,std::vector< Relation >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_Relation_Sg____setitem____SWIG_2(std::vector< Relation > *self,std::vector< Relation >::difference_type i,std::vector< Relation >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< Relation >::value_type std_vector_Sl_Relation_Sg__pop(std::vector< Relation > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< Relation,std::allocator< Relation > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_Relation_Sg__append(std::vector< Relation > *self,std::vector< Relation >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< Relation >::iterator std_vector_Sl_Relation_Sg__erase__SWIG_0(std::vector< Relation > *self,std::vector< Relation >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< Relation >::iterator std_vector_Sl_Relation_Sg__erase__SWIG_1(std::vector< Relation > *self,std::vector< Relation >::iterator first,std::vector< Relation >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< Relation >::iterator std_vector_Sl_Relation_Sg__insert__SWIG_0(std::vector< Relation > *self,std::vector< Relation >::iterator pos,std::vector< Relation >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_Relation_Sg__insert__SWIG_1(std::vector< Relation > *self,std::vector< Relation >::iterator pos,std::vector< Relation >::size_type n,std::vector< Relation >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits< Solver > {
      typedef pointer_category category;
      static const char* type_name() { return"Solver"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< Solver, std::allocator< Solver > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "Solver" "," "std::allocator< Solver >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_Solver_Sg__iterator(std::vector< Solver > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_Solver_Sg____nonzero__(std::vector< Solver > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_Solver_Sg____bool__(std::vector< Solver > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< Solver >::size_type std_vector_Sl_Solver_Sg____len__(std::vector< Solver > const *self){
      return self->size();
    }
SWIGINTERN std::vector< Solver,std::allocator< Solver > > *std_vector_Sl_Solver_Sg____getslice__(std::vector< Solver > *self,std::vector< Solver >::difference_type i,std::vector< Solver >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_Solver_Sg____setslice____SWIG_0(std::vector< Solver > *self,std::vector< Solver >::difference_type i,std::vector< Solver >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< Solver,std::allocator< Solver > >());
    }
SWIGINTERN void std_vector_Sl_Solver_Sg____setslice____SWIG_1(std::vector< Solver > *self,std::vector< Solver >::difference_type i,std::vector< Solver >::difference_type j,std::vector< Solver,std::allocator< Solver > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_Solver_Sg____delslice__(std::vector< Solver > *self,std::vector< Solver >::difference_type i,std::vector< Solver >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_Solver_Sg____delitem____SWIG_0(std::vector< Solver > *self,std::vector< Solver >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< Solver,std::allocator< Solver > > *std_vector_Sl_Solver_Sg____getitem____SWIG_0(std::vector< Solver > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Solver,std::allocator< Solver > >::difference_type id = i;
      std::vector< Solver,std::allocator< Solver > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_Solver_Sg____setitem____SWIG_0(std::vector< Solver > *self,PySliceObject *slice,std::vector< Solver,std::allocator< Solver > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Solver,std::allocator< Solver > >::difference_type id = i;
      std::vector< Solver,std::allocator< Solver > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_Solver_Sg____setitem____SWIG_1(std::vector< Solver > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Solver,std::allocator< Solver > >::difference_type id = i;
      std::vector< Solver,std::allocator< Solver > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_Solver_Sg____delitem____SWIG_1(std::vector< Solver > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< Solver,std::allocator< Solver > >::difference_type id = i;
      std::vector< Solver,std::allocator< Solver > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< Solver >::value_type const &std_vector_Sl_Solver_Sg____getitem____SWIG_1(std::vector< Solver > const *self,std::vector< Solver >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_Solver_Sg____setitem____SWIG_2(std::vector< Solver > *self,std::vector< Solver >::difference_type i,std::vector< Solver >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< Solver >::value_type std_vector_Sl_Solver_Sg__pop(std::vector< Solver > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< Solver,std::allocator< Solver > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_Solver_Sg__append(std::vector< Solver > *self,std::vector< Solver >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< Solver >::iterator std_vector_Sl_Solver_Sg__erase__SWIG_0(std::vector< Solver > *self,std::vector< Solver >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< Solver >::iterator std_vector_Sl_Solver_Sg__erase__SWIG_1(std::vector< Solver > *self,std::vector< Solver >::iterator first,std::vector< Solver >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< Solver >::iterator std_vector_Sl_Solver_Sg__insert__SWIG_0(std::vector< Solver > *self,std::vector< Solver >::iterator pos,std::vector< Solver >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_Solver_Sg__insert__SWIG_1(std::vector< Solver > *self,std::vector< Solver >::iterator pos,std::vector< Solver >::size_type n,std::vector< Solver >::value_type const &x){ self->insert(pos, n, x); }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "ascpy_wrap.h"

SwigDirector_SolverReporter::SwigDirector_SolverReporter(PyObject *self): SolverReporter(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((SolverReporter *)this, this); 
}




SwigDirector_SolverReporter::~SwigDirector_SolverReporter() {
}

int SwigDirector_SolverReporter::report(SolverStatus *status) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(status), SWIGTYPE_p_SolverStatus,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call SolverReporter.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char *const swig_method_name = "report";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("report");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'SolverReporter.report'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


void SwigDirector_SolverReporter::finalise(SolverStatus *status) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(status), SWIGTYPE_p_SolverStatus,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call SolverReporter.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 1;
  const char *const swig_method_name = "finalise";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("finalise");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'SolverReporter.finalise'");
    }
  }
}


SwigDirector_IntegratorReporterCxx::SwigDirector_IntegratorReporterCxx(PyObject *self,Integrator *arg0): IntegratorReporterCxx(arg0), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((IntegratorReporterCxx *)this, this); 
}




SwigDirector_IntegratorReporterCxx::~SwigDirector_IntegratorReporterCxx() {
}

int SwigDirector_IntegratorReporterCxx::initOutput() {
  int c_result = SwigValueInit< int >() ;
  
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call IntegratorReporterCxx.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char *const swig_method_name = "initOutput";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject args = PyTuple_New(0);
  swig::SwigVar_PyObject result = PyObject_Call(method, (PyObject *) args, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("initOutput");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'IntegratorReporterCxx.initOutput'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_IntegratorReporterCxx::closeOutput() {
  int c_result = SwigValueInit< int >() ;
  
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call IntegratorReporterCxx.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 1;
  const char *const swig_method_name = "closeOutput";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject args = PyTuple_New(0);
  swig::SwigVar_PyObject result = PyObject_Call(method, (PyObject *) args, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("closeOutput");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'IntegratorReporterCxx.closeOutput'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_IntegratorReporterCxx::updateStatus() {
  int c_result = SwigValueInit< int >() ;
  
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call IntegratorReporterCxx.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 2;
  const char *const swig_method_name = "updateStatus";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject args = PyTuple_New(0);
  swig::SwigVar_PyObject result = PyObject_Call(method, (PyObject *) args, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("updateStatus");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'IntegratorReporterCxx.updateStatus'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_IntegratorReporterCxx::recordObservedValues() {
  int c_result = SwigValueInit< int >() ;
  
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call IntegratorReporterCxx.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 3;
  const char *const swig_method_name = "recordObservedValues";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject args = PyTuple_New(0);
  swig::SwigVar_PyObject result = PyObject_Call(method, (PyObject *) args, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("recordObservedValues");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'IntegratorReporterCxx.recordObservedValues'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


SwigDirector_SolverHooks::SwigDirector_SolverHooks(PyObject *self,SolverReporter *reporter): SolverHooks(reporter), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((SolverHooks *)this, this); 
}




SwigDirector_SolverHooks::SwigDirector_SolverHooks(PyObject *self,SolverHooks &old): SolverHooks(old), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((SolverHooks *)this, this); 
}




SwigDirector_SolverHooks::~SwigDirector_SolverHooks() {
}

int SwigDirector_SolverHooks::setSolver(char const *solvername,Simulation *S) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_FromCharPtr((const char *)solvername);
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(S), SWIGTYPE_p_Simulation,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call SolverHooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char *const swig_method_name = "setSolver";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("setSolver");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'SolverHooks.setSolver'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_SolverHooks::setOption(char const *optionname,Value val1,Simulation *S) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_FromCharPtr((const char *)optionname);
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_NewPointerObj((new Value(SWIG_STD_MOVE(val1))), SWIGTYPE_p_Value, SWIG_POINTER_OWN |  0 );
  swig::SwigVar_PyObject obj2;
  obj2 = SWIG_NewPointerObj(SWIG_as_voidptr(S), SWIGTYPE_p_Simulation,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call SolverHooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 1;
  const char *const swig_method_name = "setOption";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("setOption");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'SolverHooks.setOption'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_SolverHooks::doSolve(Instance *i,Simulation *S) {
  int c_result = SwigValueInit< int >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(i), SWIGTYPE_p_Instance,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(S), SWIGTYPE_p_Simulation,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call SolverHooks.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 2;
  const char *const swig_method_name = "doSolve";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("doSolve");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'SolverHooks.doSolve'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator_incr", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    PyObject *retobj = _wrap_SwigPyIterator_incr__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_SwigPyIterator_incr__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SwigPyIterator_incr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::incr(size_t)\n"
    "    swig::SwigPyIterator::incr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator_decr", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    PyObject *retobj = _wrap_SwigPyIterator_decr__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_SwigPyIterator_decr__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SwigPyIterator_decr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::decr(size_t)\n"
    "    swig::SwigPyIterator::decr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  ptrdiff_t result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_distance", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_equal", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->next();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->__next__();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->previous();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_advance", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___iadd__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___isub__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___add__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ptrdiff_t result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator___sub__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    return _wrap_SwigPyIterator___sub____SWIG_1(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_SwigPyIterator___sub____SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__SwigPyIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ModuleVector_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Module > *arg1 = (std::vector< Module > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Module_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleVector_iterator" "', argument " "1"" of type '" "std::vector< Module > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Module > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_vector_Sl_Module_Sg__iterator(arg1,arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleVector___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Module > *arg1 = (std::vector< Module > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Module_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleVector___nonzero__" "', argument " "1"" of type '" "std::vector< Module > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Module > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_Module_Sg____nonzero__((std::vector< Module > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleVector___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Module > *arg1 = (std::vector< Module > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Module_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleVector___bool__" "', argument " "1"" of type '" "std::vector< Module > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Module > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_Module_Sg____bool__((std::vector< Module > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleVector___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Module > *arg1 = (std::vector< Module > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Module >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Module_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleVector___len__" "', argument " "1"" of type '" "std::vector< Module > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Module > * >(argp1);
  {
    try {
      result = std_vector_Sl_Module_Sg____len__((std::vector< Module > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleVector___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Module > *arg1 = (std::vector< Module > *) 0 ;
  std::vector< Module >::difference_type arg2 ;
  std::vector< Module >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< Module,std::allocator< Module > > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ModuleVector___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Module_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleVector___getslice__" "', argument " "1"" of type '" "std::vector< Module > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Module > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ModuleVector___getslice__" "', argument " "2"" of type '" "std::vector< Module >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Module >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ModuleVector___getslice__" "', argument " "3"" of type '" "std::vector< Module >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Module >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< Module,std::allocator< Module > > *)std_vector_Sl_Module_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Module_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleVector___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Module > *arg1 = (std::vector< Module > *) 0 ;
  std::vector< Module >::difference_type arg2 ;
  std::vector< Module >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Module_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleVector___setslice__" "', argument " "1"" of type '" "std::vector< Module > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Module > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ModuleVector___setslice__" "', argument " "2"" of type '" "std::vector< Module >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Module >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ModuleVector___setslice__" "', argument " "3"" of type '" "std::vector< Module >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Module >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_Module_Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleVector___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Module > *arg1 = (std::vector< Module > *) 0 ;
  std::vector< Module >::difference_type arg2 ;
  std::vector< Module >::difference_type arg3 ;
  std::vector< Module,std::allocator< Module > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Module_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleVector___setslice__" "', argument " "1"" of type '" "std::vector< Module > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Module > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ModuleVector___setslice__" "', argument " "2"" of type '" "std::vector< Module >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Module >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ModuleVector___setslice__" "', argument " "3"" of type '" "std::vector< Module >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Module >::difference_type >(val3);
  {
    std::vector< Module,std::allocator< Module > > *ptr = (std::vector< Module,std::allocator< Module > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ModuleVector___setslice__" "', argument " "4"" of type '" "std::vector< Module,std::allocator< Module > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ModuleVector___setslice__" "', argument " "4"" of type '" "std::vector< Module,std::allocator< Module > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_Module_Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< Module,std::allocator< Module > > const &)*arg4);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ModuleVector___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    PyObject *retobj = _wrap_ModuleVector___setslice____SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_ModuleVector___setslice____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ModuleVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Module >::__setslice__(std::vector< Module >::difference_type,std::vector< Module >::difference_type)\n"
    "    std::vector< Module >::__setslice__(std::vector< Module >::difference_type,std::vector< Module >::difference_type,std::vector< Module,std::allocator< Module > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ModuleVector___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Module > *arg1 = (std::vector< Module > *) 0 ;
  std::vector< Module >::difference_type arg2 ;
  std::vector< Module >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ModuleVector___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Module_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleVector___delslice__" "', argument " "1"" of type '" "std::vector< Module > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Module > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ModuleVector___delslice__" "', argument " "2"" of type '" "std::vector< Module >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Module >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ModuleVector___delslice__" "', argument " "3"" of type '" "std::vector< Module >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Module >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_Module_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleVector___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Module > *arg1 = (std::vector< Module > *) 0 ;
  std::vector< Module >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Module_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleVector___delitem__" "', argument " "1"" of type '" "std::vector< Module > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Module > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ModuleVector___delitem__" "', argument " "2"" of type '" "std::vector< Module >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Module >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_Module_Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleVector___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Module > *arg1 = (std::vector< Module > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< Module,std::allocator< Module > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Module_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleVector___getitem__" "', argument " "1"" of type '" "std::vector< Module > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Module > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ModuleVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        result = (std::vector< Module,std::allocator< Module > > *)std_vector_Sl_Module_Sg____getitem____SWIG_0(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Module_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleVector___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Module > *arg1 = (std::vector< Module > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< Module,std::allocator< Module > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Module_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleVector___setitem__" "', argument " "1"" of type '" "std::vector< Module > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Module > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ModuleVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector< Module,std::allocator< Module > > *ptr = (std::vector< Module,std::allocator< Module > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ModuleVector___setitem__" "', argument " "3"" of type '" "std::vector< Module,std::allocator< Module > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ModuleVector___setitem__" "', argument " "3"" of type '" "std::vector< Module,std::allocator< Module > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_Module_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< Module,std::allocator< Module > > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleVector___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Module > *arg1 = (std::vector< Module > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Module_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleVector___setitem__" "', argument " "1"" of type '" "std::vector< Module > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Module > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ModuleVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        std_vector_Sl_Module_Sg____setitem____SWIG_1(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleVector___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Module > *arg1 = (std::vector< Module > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Module_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleVector___delitem__" "', argument " "1"" of type '" "std::vector< Module > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Module > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ModuleVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        std_vector_Sl_Module_Sg____delitem____SWIG_1(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ModuleVector___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_1;
    return _wrap_ModuleVector___delitem____SWIG_1(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_ModuleVector___delitem____SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ModuleVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Module >::__delitem__(std::vector< Module >::difference_type)\n"
    "    std::vector< Module >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ModuleVector___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Module > *arg1 = (std::vector< Module > *) 0 ;
  std::vector< Module >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< Module >::value_type *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Module_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleVector___getitem__" "', argument " "1"" of type '" "std::vector< Module > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Module > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ModuleVector___getitem__" "', argument " "2"" of type '" "std::vector< Module >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Module >::difference_type >(val2);
  {
    try {
      try {
        result = (std::vector< Module >::value_type *) &std_vector_Sl_Module_Sg____getitem____SWIG_1((std::vector< Module > const *)arg1,SWIG_STD_MOVE(arg2));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Module, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Module >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ModuleVector___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_1;
    return _wrap_ModuleVector___getitem____SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_ModuleVector___getitem____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ModuleVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Module >::__getitem__(PySliceObject *)\n"
    "    std::vector< Module >::__getitem__(std::vector< Module >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ModuleVector___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Module > *arg1 = (std::vector< Module > *) 0 ;
  std::vector< Module >::difference_type arg2 ;
  std::vector< Module >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Module_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleVector___setitem__" "', argument " "1"" of type '" "std::vector< Module > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Module > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ModuleVector___setitem__" "', argument " "2"" of type '" "std::vector< Module >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Module >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Module,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ModuleVector___setitem__" "', argument " "3"" of type '" "std::vector< Module >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ModuleVector___setitem__" "', argument " "3"" of type '" "std::vector< Module >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Module >::value_type * >(argp3);
  {
    try {
      try {
        std_vector_Sl_Module_Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(Module const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ModuleVector___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_ModuleVector___setitem____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_2;
    {
      int res = swig::asptr(argv[2], (std::vector< Module,std::allocator< Module > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_ModuleVector___setitem____SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_ModuleVector___setitem____SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ModuleVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Module >::__setitem__(PySliceObject *,std::vector< Module,std::allocator< Module > > const &)\n"
    "    std::vector< Module >::__setitem__(PySliceObject *)\n"
    "    std::vector< Module >::__setitem__(std::vector< Module >::difference_type,std::vector< Module >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ModuleVector_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Module > *arg1 = (std::vector< Module > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Module >::value_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Module_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleVector_pop" "', argument " "1"" of type '" "std::vector< Module > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Module > * >(argp1);
  {
    try {
      try {
        result = std_vector_Sl_Module_Sg__pop(arg1);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< Module >::value_type(result)), SWIGTYPE_p_Module, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleVector_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Module > *arg1 = (std::vector< Module > *) 0 ;
  std::vector< Module >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ModuleVector_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Module_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleVector_append" "', argument " "1"" of type '" "std::vector< Module > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Module > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Module,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ModuleVector_append" "', argument " "2"" of type '" "std::vector< Module >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ModuleVector_append" "', argument " "2"" of type '" "std::vector< Module >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Module >::value_type * >(argp2);
  {
    try {
      std_vector_Sl_Module_Sg__append(arg1,(Module const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ModuleVector__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< Module > *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (std::vector< Module > *)new std::vector< Module >();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Module_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ModuleVector__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Module > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< Module > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< Module,std::allocator< Module > > *ptr = (std::vector< Module,std::allocator< Module > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ModuleVector" "', argument " "1"" of type '" "std::vector< Module > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ModuleVector" "', argument " "1"" of type '" "std::vector< Module > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< Module > *)new std::vector< Module >((std::vector< Module > const &)*arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Module_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleVector_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Module > *arg1 = (std::vector< Module > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Module_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleVector_empty" "', argument " "1"" of type '" "std::vector< Module > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Module > * >(argp1);
  {
    try {
      result = (bool)((std::vector< Module > const *)arg1)->empty();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleVector_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Module > *arg1 = (std::vector< Module > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Module >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Module_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleVector_size" "', argument " "1"" of type '" "std::vector< Module > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Module > * >(argp1);
  {
    try {
      result = ((std::vector< Module > const *)arg1)->size();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleVector_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Module > *arg1 = (std::vector< Module > *) 0 ;
  std::vector< Module > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ModuleVector_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Module_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleVector_swap" "', argument " "1"" of type '" "std::vector< Module > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Module > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_Module_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ModuleVector_swap" "', argument " "2"" of type '" "std::vector< Module > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ModuleVector_swap" "', argument " "2"" of type '" "std::vector< Module > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Module > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleVector_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Module > *arg1 = (std::vector< Module > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Module >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Module_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleVector_begin" "', argument " "1"" of type '" "std::vector< Module > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Module > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Module >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleVector_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Module > *arg1 = (std::vector< Module > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Module >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Module_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleVector_end" "', argument " "1"" of type '" "std::vector< Module > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Module > * >(argp1);
  {
    try {
      result = (arg1)->end();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Module >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleVector_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Module > *arg1 = (std::vector< Module > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Module >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Module_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleVector_rbegin" "', argument " "1"" of type '" "std::vector< Module > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Module > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Module >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleVector_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Module > *arg1 = (std::vector< Module > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Module >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Module_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleVector_rend" "', argument " "1"" of type '" "std::vector< Module > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Module > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Module >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleVector_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Module > *arg1 = (std::vector< Module > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Module_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleVector_clear" "', argument " "1"" of type '" "std::vector< Module > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Module > * >(argp1);
  {
    try {
      (arg1)->clear();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleVector_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Module > *arg1 = (std::vector< Module > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< Module > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Module_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleVector_get_allocator" "', argument " "1"" of type '" "std::vector< Module > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Module > * >(argp1);
  {
    try {
      result = ((std::vector< Module > const *)arg1)->get_allocator();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< Module >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_Module_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ModuleVector__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Module >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< Module > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ModuleVector" "', argument " "1"" of type '" "std::vector< Module >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Module >::size_type >(val1);
  {
    try {
      result = (std::vector< Module > *)new std::vector< Module >(arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Module_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleVector_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Module > *arg1 = (std::vector< Module > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Module_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleVector_pop_back" "', argument " "1"" of type '" "std::vector< Module > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Module > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleVector_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Module > *arg1 = (std::vector< Module > *) 0 ;
  std::vector< Module >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Module_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleVector_resize" "', argument " "1"" of type '" "std::vector< Module > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Module > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ModuleVector_resize" "', argument " "2"" of type '" "std::vector< Module >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Module >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleVector_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Module > *arg1 = (std::vector< Module > *) 0 ;
  std::vector< Module >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< Module >::iterator result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Module_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleVector_erase" "', argument " "1"" of type '" "std::vector< Module > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Module > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ModuleVector_erase" "', argument " "2"" of type '" "std::vector< Module >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Module >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Module >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ModuleVector_erase" "', argument " "2"" of type '" "std::vector< Module >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_Module_Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Module >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleVector_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Module > *arg1 = (std::vector< Module > *) 0 ;
  std::vector< Module >::iterator arg2 ;
  std::vector< Module >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< Module >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Module_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleVector_erase" "', argument " "1"" of type '" "std::vector< Module > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Module > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ModuleVector_erase" "', argument " "2"" of type '" "std::vector< Module >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Module >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Module >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ModuleVector_erase" "', argument " "2"" of type '" "std::vector< Module >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ModuleVector_erase" "', argument " "3"" of type '" "std::vector< Module >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Module >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Module >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ModuleVector_erase" "', argument " "3"" of type '" "std::vector< Module >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_Module_Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Module >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ModuleVector_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_ModuleVector_erase__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_ModuleVector_erase__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ModuleVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Module >::erase(std::vector< Module >::iterator)\n"
    "    std::vector< Module >::erase(std::vector< Module >::iterator,std::vector< Module >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_ModuleVector__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Module >::size_type arg1 ;
  std::vector< Module >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< Module > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ModuleVector" "', argument " "1"" of type '" "std::vector< Module >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Module >::size_type >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Module,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ModuleVector" "', argument " "2"" of type '" "std::vector< Module >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ModuleVector" "', argument " "2"" of type '" "std::vector< Module >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Module >::value_type * >(argp2);
  {
    try {
      result = (std::vector< Module > *)new std::vector< Module >(arg1,(std::vector< Module >::value_type const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Module_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ModuleVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_ModuleVector", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    PyObject *retobj = _wrap_new_ModuleVector__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 1) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[0], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_new_ModuleVector__SWIG_2(self, argc, argv);
  }
check_2:
  
  if (argc == 1) {
    PyObject *retobj = _wrap_new_ModuleVector__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_new_ModuleVector__SWIG_3(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_ModuleVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Module >::vector()\n"
    "    std::vector< Module >::vector(std::vector< Module > const &)\n"
    "    std::vector< Module >::vector(std::vector< Module >::size_type)\n"
    "    std::vector< Module >::vector(std::vector< Module >::size_type,std::vector< Module >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ModuleVector_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Module > *arg1 = (std::vector< Module > *) 0 ;
  std::vector< Module >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ModuleVector_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Module_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleVector_push_back" "', argument " "1"" of type '" "std::vector< Module > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Module > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Module,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ModuleVector_push_back" "', argument " "2"" of type '" "std::vector< Module >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ModuleVector_push_back" "', argument " "2"" of type '" "std::vector< Module >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Module >::value_type * >(argp2);
  {
    try {
      (arg1)->push_back((std::vector< Module >::value_type const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleVector_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Module > *arg1 = (std::vector< Module > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Module >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Module_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleVector_front" "', argument " "1"" of type '" "std::vector< Module > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Module > * >(argp1);
  {
    try {
      result = (std::vector< Module >::value_type *) &((std::vector< Module > const *)arg1)->front();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Module, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Module >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleVector_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Module > *arg1 = (std::vector< Module > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Module >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Module_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleVector_back" "', argument " "1"" of type '" "std::vector< Module > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Module > * >(argp1);
  {
    try {
      result = (std::vector< Module >::value_type *) &((std::vector< Module > const *)arg1)->back();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Module, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Module >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleVector_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Module > *arg1 = (std::vector< Module > *) 0 ;
  std::vector< Module >::size_type arg2 ;
  std::vector< Module >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ModuleVector_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Module_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleVector_assign" "', argument " "1"" of type '" "std::vector< Module > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Module > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ModuleVector_assign" "', argument " "2"" of type '" "std::vector< Module >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Module >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Module,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ModuleVector_assign" "', argument " "3"" of type '" "std::vector< Module >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ModuleVector_assign" "', argument " "3"" of type '" "std::vector< Module >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Module >::value_type * >(argp3);
  {
    try {
      (arg1)->assign(arg2,(std::vector< Module >::value_type const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleVector_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Module > *arg1 = (std::vector< Module > *) 0 ;
  std::vector< Module >::size_type arg2 ;
  std::vector< Module >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Module_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleVector_resize" "', argument " "1"" of type '" "std::vector< Module > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Module > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ModuleVector_resize" "', argument " "2"" of type '" "std::vector< Module >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Module >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Module,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ModuleVector_resize" "', argument " "3"" of type '" "std::vector< Module >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ModuleVector_resize" "', argument " "3"" of type '" "std::vector< Module >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Module >::value_type * >(argp3);
  {
    try {
      (arg1)->resize(arg2,(std::vector< Module >::value_type const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ModuleVector_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_ModuleVector_resize__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_ModuleVector_resize__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ModuleVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Module >::resize(std::vector< Module >::size_type)\n"
    "    std::vector< Module >::resize(std::vector< Module >::size_type,std::vector< Module >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ModuleVector_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Module > *arg1 = (std::vector< Module > *) 0 ;
  std::vector< Module >::iterator arg2 ;
  std::vector< Module >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::vector< Module >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Module_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleVector_insert" "', argument " "1"" of type '" "std::vector< Module > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Module > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ModuleVector_insert" "', argument " "2"" of type '" "std::vector< Module >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Module >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Module >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ModuleVector_insert" "', argument " "2"" of type '" "std::vector< Module >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Module,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ModuleVector_insert" "', argument " "3"" of type '" "std::vector< Module >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ModuleVector_insert" "', argument " "3"" of type '" "std::vector< Module >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Module >::value_type * >(argp3);
  {
    try {
      result = std_vector_Sl_Module_Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(Module const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Module >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleVector_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Module > *arg1 = (std::vector< Module > *) 0 ;
  std::vector< Module >::iterator arg2 ;
  std::vector< Module >::size_type arg3 ;
  std::vector< Module >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Module_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleVector_insert" "', argument " "1"" of type '" "std::vector< Module > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Module > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ModuleVector_insert" "', argument " "2"" of type '" "std::vector< Module >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Module >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Module >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ModuleVector_insert" "', argument " "2"" of type '" "std::vector< Module >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ModuleVector_insert" "', argument " "3"" of type '" "std::vector< Module >::size_type""'");
  } 
  arg3 = static_cast< std::vector< Module >::size_type >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_Module,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ModuleVector_insert" "', argument " "4"" of type '" "std::vector< Module >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ModuleVector_insert" "', argument " "4"" of type '" "std::vector< Module >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< Module >::value_type * >(argp4);
  {
    try {
      std_vector_Sl_Module_Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(Module const &)*arg4);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ModuleVector_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    PyObject *retobj = _wrap_ModuleVector_insert__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_ModuleVector_insert__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ModuleVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Module >::insert(std::vector< Module >::iterator,std::vector< Module >::value_type const &)\n"
    "    std::vector< Module >::insert(std::vector< Module >::iterator,std::vector< Module >::size_type,std::vector< Module >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ModuleVector_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Module > *arg1 = (std::vector< Module > *) 0 ;
  std::vector< Module >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ModuleVector_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Module_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleVector_reserve" "', argument " "1"" of type '" "std::vector< Module > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Module > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ModuleVector_reserve" "', argument " "2"" of type '" "std::vector< Module >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Module >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ModuleVector_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Module > *arg1 = (std::vector< Module > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Module >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Module_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModuleVector_capacity" "', argument " "1"" of type '" "std::vector< Module > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Module > * >(argp1);
  {
    try {
      result = ((std::vector< Module > const *)arg1)->capacity();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ModuleVector(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Module > *arg1 = (std::vector< Module > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Module_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ModuleVector" "', argument " "1"" of type '" "std::vector< Module > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Module > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ModuleVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_Module_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ModuleVector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_TypeVector_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Type > *arg1 = (std::vector< Type > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVector_iterator" "', argument " "1"" of type '" "std::vector< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Type > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_vector_Sl_Type_Sg__iterator(arg1,arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeVector___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Type > *arg1 = (std::vector< Type > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVector___nonzero__" "', argument " "1"" of type '" "std::vector< Type > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Type > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_Type_Sg____nonzero__((std::vector< Type > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeVector___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Type > *arg1 = (std::vector< Type > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVector___bool__" "', argument " "1"" of type '" "std::vector< Type > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Type > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_Type_Sg____bool__((std::vector< Type > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeVector___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Type > *arg1 = (std::vector< Type > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Type >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVector___len__" "', argument " "1"" of type '" "std::vector< Type > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Type > * >(argp1);
  {
    try {
      result = std_vector_Sl_Type_Sg____len__((std::vector< Type > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeVector___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Type > *arg1 = (std::vector< Type > *) 0 ;
  std::vector< Type >::difference_type arg2 ;
  std::vector< Type >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< Type,std::allocator< Type > > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TypeVector___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVector___getslice__" "', argument " "1"" of type '" "std::vector< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Type > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TypeVector___getslice__" "', argument " "2"" of type '" "std::vector< Type >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Type >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TypeVector___getslice__" "', argument " "3"" of type '" "std::vector< Type >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Type >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< Type,std::allocator< Type > > *)std_vector_Sl_Type_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Type_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeVector___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Type > *arg1 = (std::vector< Type > *) 0 ;
  std::vector< Type >::difference_type arg2 ;
  std::vector< Type >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVector___setslice__" "', argument " "1"" of type '" "std::vector< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Type > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TypeVector___setslice__" "', argument " "2"" of type '" "std::vector< Type >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Type >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TypeVector___setslice__" "', argument " "3"" of type '" "std::vector< Type >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Type >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_Type_Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeVector___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Type > *arg1 = (std::vector< Type > *) 0 ;
  std::vector< Type >::difference_type arg2 ;
  std::vector< Type >::difference_type arg3 ;
  std::vector< Type,std::allocator< Type > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVector___setslice__" "', argument " "1"" of type '" "std::vector< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Type > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TypeVector___setslice__" "', argument " "2"" of type '" "std::vector< Type >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Type >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TypeVector___setslice__" "', argument " "3"" of type '" "std::vector< Type >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Type >::difference_type >(val3);
  {
    std::vector< Type,std::allocator< Type > > *ptr = (std::vector< Type,std::allocator< Type > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TypeVector___setslice__" "', argument " "4"" of type '" "std::vector< Type,std::allocator< Type > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TypeVector___setslice__" "', argument " "4"" of type '" "std::vector< Type,std::allocator< Type > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_Type_Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< Type,std::allocator< Type > > const &)*arg4);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "TypeVector___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    PyObject *retobj = _wrap_TypeVector___setslice____SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_TypeVector___setslice____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'TypeVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Type >::__setslice__(std::vector< Type >::difference_type,std::vector< Type >::difference_type)\n"
    "    std::vector< Type >::__setslice__(std::vector< Type >::difference_type,std::vector< Type >::difference_type,std::vector< Type,std::allocator< Type > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TypeVector___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Type > *arg1 = (std::vector< Type > *) 0 ;
  std::vector< Type >::difference_type arg2 ;
  std::vector< Type >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TypeVector___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVector___delslice__" "', argument " "1"" of type '" "std::vector< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Type > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TypeVector___delslice__" "', argument " "2"" of type '" "std::vector< Type >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Type >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TypeVector___delslice__" "', argument " "3"" of type '" "std::vector< Type >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Type >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_Type_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeVector___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Type > *arg1 = (std::vector< Type > *) 0 ;
  std::vector< Type >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVector___delitem__" "', argument " "1"" of type '" "std::vector< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Type > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TypeVector___delitem__" "', argument " "2"" of type '" "std::vector< Type >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Type >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_Type_Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeVector___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Type > *arg1 = (std::vector< Type > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< Type,std::allocator< Type > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVector___getitem__" "', argument " "1"" of type '" "std::vector< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Type > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TypeVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        result = (std::vector< Type,std::allocator< Type > > *)std_vector_Sl_Type_Sg____getitem____SWIG_0(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Type_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeVector___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Type > *arg1 = (std::vector< Type > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< Type,std::allocator< Type > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVector___setitem__" "', argument " "1"" of type '" "std::vector< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Type > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TypeVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector< Type,std::allocator< Type > > *ptr = (std::vector< Type,std::allocator< Type > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TypeVector___setitem__" "', argument " "3"" of type '" "std::vector< Type,std::allocator< Type > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TypeVector___setitem__" "', argument " "3"" of type '" "std::vector< Type,std::allocator< Type > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_Type_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< Type,std::allocator< Type > > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeVector___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Type > *arg1 = (std::vector< Type > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVector___setitem__" "', argument " "1"" of type '" "std::vector< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Type > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TypeVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        std_vector_Sl_Type_Sg____setitem____SWIG_1(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeVector___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Type > *arg1 = (std::vector< Type > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVector___delitem__" "', argument " "1"" of type '" "std::vector< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Type > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TypeVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        std_vector_Sl_Type_Sg____delitem____SWIG_1(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "TypeVector___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_1;
    return _wrap_TypeVector___delitem____SWIG_1(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_TypeVector___delitem____SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'TypeVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Type >::__delitem__(std::vector< Type >::difference_type)\n"
    "    std::vector< Type >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TypeVector___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Type > *arg1 = (std::vector< Type > *) 0 ;
  std::vector< Type >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< Type >::value_type *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVector___getitem__" "', argument " "1"" of type '" "std::vector< Type > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Type > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TypeVector___getitem__" "', argument " "2"" of type '" "std::vector< Type >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Type >::difference_type >(val2);
  {
    try {
      try {
        result = (std::vector< Type >::value_type *) &std_vector_Sl_Type_Sg____getitem____SWIG_1((std::vector< Type > const *)arg1,SWIG_STD_MOVE(arg2));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Type, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Type >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "TypeVector___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_1;
    return _wrap_TypeVector___getitem____SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_TypeVector___getitem____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'TypeVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Type >::__getitem__(PySliceObject *)\n"
    "    std::vector< Type >::__getitem__(std::vector< Type >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TypeVector___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Type > *arg1 = (std::vector< Type > *) 0 ;
  std::vector< Type >::difference_type arg2 ;
  std::vector< Type >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVector___setitem__" "', argument " "1"" of type '" "std::vector< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Type > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TypeVector___setitem__" "', argument " "2"" of type '" "std::vector< Type >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Type >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TypeVector___setitem__" "', argument " "3"" of type '" "std::vector< Type >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TypeVector___setitem__" "', argument " "3"" of type '" "std::vector< Type >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Type >::value_type * >(argp3);
  {
    try {
      try {
        std_vector_Sl_Type_Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(Type const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "TypeVector___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_TypeVector___setitem____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_2;
    {
      int res = swig::asptr(argv[2], (std::vector< Type,std::allocator< Type > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_TypeVector___setitem____SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_TypeVector___setitem____SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'TypeVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Type >::__setitem__(PySliceObject *,std::vector< Type,std::allocator< Type > > const &)\n"
    "    std::vector< Type >::__setitem__(PySliceObject *)\n"
    "    std::vector< Type >::__setitem__(std::vector< Type >::difference_type,std::vector< Type >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TypeVector_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Type > *arg1 = (std::vector< Type > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Type >::value_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVector_pop" "', argument " "1"" of type '" "std::vector< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Type > * >(argp1);
  {
    try {
      try {
        result = std_vector_Sl_Type_Sg__pop(arg1);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< Type >::value_type(result)), SWIGTYPE_p_Type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeVector_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Type > *arg1 = (std::vector< Type > *) 0 ;
  std::vector< Type >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TypeVector_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVector_append" "', argument " "1"" of type '" "std::vector< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Type > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TypeVector_append" "', argument " "2"" of type '" "std::vector< Type >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TypeVector_append" "', argument " "2"" of type '" "std::vector< Type >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Type >::value_type * >(argp2);
  {
    try {
      std_vector_Sl_Type_Sg__append(arg1,(Type const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TypeVector__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< Type > *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (std::vector< Type > *)new std::vector< Type >();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Type_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TypeVector__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Type > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< Type > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< Type,std::allocator< Type > > *ptr = (std::vector< Type,std::allocator< Type > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TypeVector" "', argument " "1"" of type '" "std::vector< Type > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TypeVector" "', argument " "1"" of type '" "std::vector< Type > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< Type > *)new std::vector< Type >((std::vector< Type > const &)*arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Type_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeVector_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Type > *arg1 = (std::vector< Type > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVector_empty" "', argument " "1"" of type '" "std::vector< Type > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Type > * >(argp1);
  {
    try {
      result = (bool)((std::vector< Type > const *)arg1)->empty();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeVector_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Type > *arg1 = (std::vector< Type > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Type >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVector_size" "', argument " "1"" of type '" "std::vector< Type > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Type > * >(argp1);
  {
    try {
      result = ((std::vector< Type > const *)arg1)->size();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeVector_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Type > *arg1 = (std::vector< Type > *) 0 ;
  std::vector< Type > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TypeVector_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVector_swap" "', argument " "1"" of type '" "std::vector< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Type > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_Type_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TypeVector_swap" "', argument " "2"" of type '" "std::vector< Type > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TypeVector_swap" "', argument " "2"" of type '" "std::vector< Type > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Type > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeVector_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Type > *arg1 = (std::vector< Type > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Type >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVector_begin" "', argument " "1"" of type '" "std::vector< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Type > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Type >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeVector_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Type > *arg1 = (std::vector< Type > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Type >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVector_end" "', argument " "1"" of type '" "std::vector< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Type > * >(argp1);
  {
    try {
      result = (arg1)->end();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Type >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeVector_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Type > *arg1 = (std::vector< Type > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Type >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVector_rbegin" "', argument " "1"" of type '" "std::vector< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Type > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Type >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeVector_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Type > *arg1 = (std::vector< Type > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Type >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVector_rend" "', argument " "1"" of type '" "std::vector< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Type > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Type >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeVector_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Type > *arg1 = (std::vector< Type > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVector_clear" "', argument " "1"" of type '" "std::vector< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Type > * >(argp1);
  {
    try {
      (arg1)->clear();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeVector_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Type > *arg1 = (std::vector< Type > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< Type > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVector_get_allocator" "', argument " "1"" of type '" "std::vector< Type > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Type > * >(argp1);
  {
    try {
      result = ((std::vector< Type > const *)arg1)->get_allocator();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< Type >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_Type_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TypeVector__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Type >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< Type > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TypeVector" "', argument " "1"" of type '" "std::vector< Type >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Type >::size_type >(val1);
  {
    try {
      result = (std::vector< Type > *)new std::vector< Type >(arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Type_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeVector_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Type > *arg1 = (std::vector< Type > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVector_pop_back" "', argument " "1"" of type '" "std::vector< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Type > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeVector_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Type > *arg1 = (std::vector< Type > *) 0 ;
  std::vector< Type >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVector_resize" "', argument " "1"" of type '" "std::vector< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Type > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TypeVector_resize" "', argument " "2"" of type '" "std::vector< Type >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Type >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeVector_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Type > *arg1 = (std::vector< Type > *) 0 ;
  std::vector< Type >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< Type >::iterator result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVector_erase" "', argument " "1"" of type '" "std::vector< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Type > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TypeVector_erase" "', argument " "2"" of type '" "std::vector< Type >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Type >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Type >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TypeVector_erase" "', argument " "2"" of type '" "std::vector< Type >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_Type_Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Type >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeVector_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Type > *arg1 = (std::vector< Type > *) 0 ;
  std::vector< Type >::iterator arg2 ;
  std::vector< Type >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< Type >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVector_erase" "', argument " "1"" of type '" "std::vector< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Type > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TypeVector_erase" "', argument " "2"" of type '" "std::vector< Type >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Type >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Type >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TypeVector_erase" "', argument " "2"" of type '" "std::vector< Type >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TypeVector_erase" "', argument " "3"" of type '" "std::vector< Type >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Type >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Type >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TypeVector_erase" "', argument " "3"" of type '" "std::vector< Type >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_Type_Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Type >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "TypeVector_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_TypeVector_erase__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_TypeVector_erase__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'TypeVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Type >::erase(std::vector< Type >::iterator)\n"
    "    std::vector< Type >::erase(std::vector< Type >::iterator,std::vector< Type >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_TypeVector__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Type >::size_type arg1 ;
  std::vector< Type >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< Type > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TypeVector" "', argument " "1"" of type '" "std::vector< Type >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Type >::size_type >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TypeVector" "', argument " "2"" of type '" "std::vector< Type >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TypeVector" "', argument " "2"" of type '" "std::vector< Type >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Type >::value_type * >(argp2);
  {
    try {
      result = (std::vector< Type > *)new std::vector< Type >(arg1,(std::vector< Type >::value_type const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Type_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TypeVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_TypeVector", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    PyObject *retobj = _wrap_new_TypeVector__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 1) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[0], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_new_TypeVector__SWIG_2(self, argc, argv);
  }
check_2:
  
  if (argc == 1) {
    PyObject *retobj = _wrap_new_TypeVector__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_new_TypeVector__SWIG_3(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_TypeVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Type >::vector()\n"
    "    std::vector< Type >::vector(std::vector< Type > const &)\n"
    "    std::vector< Type >::vector(std::vector< Type >::size_type)\n"
    "    std::vector< Type >::vector(std::vector< Type >::size_type,std::vector< Type >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TypeVector_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Type > *arg1 = (std::vector< Type > *) 0 ;
  std::vector< Type >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TypeVector_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVector_push_back" "', argument " "1"" of type '" "std::vector< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Type > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TypeVector_push_back" "', argument " "2"" of type '" "std::vector< Type >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TypeVector_push_back" "', argument " "2"" of type '" "std::vector< Type >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Type >::value_type * >(argp2);
  {
    try {
      (arg1)->push_back((std::vector< Type >::value_type const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeVector_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Type > *arg1 = (std::vector< Type > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Type >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVector_front" "', argument " "1"" of type '" "std::vector< Type > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Type > * >(argp1);
  {
    try {
      result = (std::vector< Type >::value_type *) &((std::vector< Type > const *)arg1)->front();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Type, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Type >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeVector_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Type > *arg1 = (std::vector< Type > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Type >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVector_back" "', argument " "1"" of type '" "std::vector< Type > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Type > * >(argp1);
  {
    try {
      result = (std::vector< Type >::value_type *) &((std::vector< Type > const *)arg1)->back();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Type, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Type >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeVector_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Type > *arg1 = (std::vector< Type > *) 0 ;
  std::vector< Type >::size_type arg2 ;
  std::vector< Type >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TypeVector_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVector_assign" "', argument " "1"" of type '" "std::vector< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Type > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TypeVector_assign" "', argument " "2"" of type '" "std::vector< Type >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Type >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TypeVector_assign" "', argument " "3"" of type '" "std::vector< Type >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TypeVector_assign" "', argument " "3"" of type '" "std::vector< Type >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Type >::value_type * >(argp3);
  {
    try {
      (arg1)->assign(arg2,(std::vector< Type >::value_type const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeVector_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Type > *arg1 = (std::vector< Type > *) 0 ;
  std::vector< Type >::size_type arg2 ;
  std::vector< Type >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVector_resize" "', argument " "1"" of type '" "std::vector< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Type > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TypeVector_resize" "', argument " "2"" of type '" "std::vector< Type >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Type >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TypeVector_resize" "', argument " "3"" of type '" "std::vector< Type >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TypeVector_resize" "', argument " "3"" of type '" "std::vector< Type >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Type >::value_type * >(argp3);
  {
    try {
      (arg1)->resize(arg2,(std::vector< Type >::value_type const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "TypeVector_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_TypeVector_resize__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_TypeVector_resize__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'TypeVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Type >::resize(std::vector< Type >::size_type)\n"
    "    std::vector< Type >::resize(std::vector< Type >::size_type,std::vector< Type >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TypeVector_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Type > *arg1 = (std::vector< Type > *) 0 ;
  std::vector< Type >::iterator arg2 ;
  std::vector< Type >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::vector< Type >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVector_insert" "', argument " "1"" of type '" "std::vector< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Type > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TypeVector_insert" "', argument " "2"" of type '" "std::vector< Type >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Type >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Type >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TypeVector_insert" "', argument " "2"" of type '" "std::vector< Type >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TypeVector_insert" "', argument " "3"" of type '" "std::vector< Type >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TypeVector_insert" "', argument " "3"" of type '" "std::vector< Type >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Type >::value_type * >(argp3);
  {
    try {
      result = std_vector_Sl_Type_Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(Type const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Type >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeVector_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Type > *arg1 = (std::vector< Type > *) 0 ;
  std::vector< Type >::iterator arg2 ;
  std::vector< Type >::size_type arg3 ;
  std::vector< Type >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVector_insert" "', argument " "1"" of type '" "std::vector< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Type > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TypeVector_insert" "', argument " "2"" of type '" "std::vector< Type >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Type >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Type >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TypeVector_insert" "', argument " "2"" of type '" "std::vector< Type >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TypeVector_insert" "', argument " "3"" of type '" "std::vector< Type >::size_type""'");
  } 
  arg3 = static_cast< std::vector< Type >::size_type >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_Type,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TypeVector_insert" "', argument " "4"" of type '" "std::vector< Type >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TypeVector_insert" "', argument " "4"" of type '" "std::vector< Type >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< Type >::value_type * >(argp4);
  {
    try {
      std_vector_Sl_Type_Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(Type const &)*arg4);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "TypeVector_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    PyObject *retobj = _wrap_TypeVector_insert__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_TypeVector_insert__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'TypeVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Type >::insert(std::vector< Type >::iterator,std::vector< Type >::value_type const &)\n"
    "    std::vector< Type >::insert(std::vector< Type >::iterator,std::vector< Type >::size_type,std::vector< Type >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TypeVector_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Type > *arg1 = (std::vector< Type > *) 0 ;
  std::vector< Type >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TypeVector_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVector_reserve" "', argument " "1"" of type '" "std::vector< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Type > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TypeVector_reserve" "', argument " "2"" of type '" "std::vector< Type >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Type >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeVector_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Type > *arg1 = (std::vector< Type > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Type >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVector_capacity" "', argument " "1"" of type '" "std::vector< Type > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Type > * >(argp1);
  {
    try {
      result = ((std::vector< Type > const *)arg1)->capacity();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TypeVector(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Type > *arg1 = (std::vector< Type > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Type_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TypeVector" "', argument " "1"" of type '" "std::vector< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Type > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TypeVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_Type_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *TypeVector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_MethodVector_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Method > *arg1 = (std::vector< Method > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Method_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MethodVector_iterator" "', argument " "1"" of type '" "std::vector< Method > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Method > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_vector_Sl_Method_Sg__iterator(arg1,arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MethodVector___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Method > *arg1 = (std::vector< Method > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Method_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MethodVector___nonzero__" "', argument " "1"" of type '" "std::vector< Method > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Method > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_Method_Sg____nonzero__((std::vector< Method > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MethodVector___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Method > *arg1 = (std::vector< Method > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Method_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MethodVector___bool__" "', argument " "1"" of type '" "std::vector< Method > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Method > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_Method_Sg____bool__((std::vector< Method > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MethodVector___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Method > *arg1 = (std::vector< Method > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Method >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Method_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MethodVector___len__" "', argument " "1"" of type '" "std::vector< Method > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Method > * >(argp1);
  {
    try {
      result = std_vector_Sl_Method_Sg____len__((std::vector< Method > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MethodVector___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Method > *arg1 = (std::vector< Method > *) 0 ;
  std::vector< Method >::difference_type arg2 ;
  std::vector< Method >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< Method,std::allocator< Method > > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MethodVector___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Method_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MethodVector___getslice__" "', argument " "1"" of type '" "std::vector< Method > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Method > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MethodVector___getslice__" "', argument " "2"" of type '" "std::vector< Method >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Method >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MethodVector___getslice__" "', argument " "3"" of type '" "std::vector< Method >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Method >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< Method,std::allocator< Method > > *)std_vector_Sl_Method_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Method_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MethodVector___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Method > *arg1 = (std::vector< Method > *) 0 ;
  std::vector< Method >::difference_type arg2 ;
  std::vector< Method >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Method_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MethodVector___setslice__" "', argument " "1"" of type '" "std::vector< Method > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Method > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MethodVector___setslice__" "', argument " "2"" of type '" "std::vector< Method >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Method >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MethodVector___setslice__" "', argument " "3"" of type '" "std::vector< Method >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Method >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_Method_Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MethodVector___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Method > *arg1 = (std::vector< Method > *) 0 ;
  std::vector< Method >::difference_type arg2 ;
  std::vector< Method >::difference_type arg3 ;
  std::vector< Method,std::allocator< Method > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Method_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MethodVector___setslice__" "', argument " "1"" of type '" "std::vector< Method > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Method > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MethodVector___setslice__" "', argument " "2"" of type '" "std::vector< Method >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Method >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MethodVector___setslice__" "', argument " "3"" of type '" "std::vector< Method >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Method >::difference_type >(val3);
  {
    std::vector< Method,std::allocator< Method > > *ptr = (std::vector< Method,std::allocator< Method > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MethodVector___setslice__" "', argument " "4"" of type '" "std::vector< Method,std::allocator< Method > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MethodVector___setslice__" "', argument " "4"" of type '" "std::vector< Method,std::allocator< Method > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_Method_Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< Method,std::allocator< Method > > const &)*arg4);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MethodVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MethodVector___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    PyObject *retobj = _wrap_MethodVector___setslice____SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_MethodVector___setslice____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MethodVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Method >::__setslice__(std::vector< Method >::difference_type,std::vector< Method >::difference_type)\n"
    "    std::vector< Method >::__setslice__(std::vector< Method >::difference_type,std::vector< Method >::difference_type,std::vector< Method,std::allocator< Method > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MethodVector___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Method > *arg1 = (std::vector< Method > *) 0 ;
  std::vector< Method >::difference_type arg2 ;
  std::vector< Method >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MethodVector___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Method_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MethodVector___delslice__" "', argument " "1"" of type '" "std::vector< Method > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Method > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MethodVector___delslice__" "', argument " "2"" of type '" "std::vector< Method >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Method >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MethodVector___delslice__" "', argument " "3"" of type '" "std::vector< Method >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Method >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_Method_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MethodVector___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Method > *arg1 = (std::vector< Method > *) 0 ;
  std::vector< Method >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Method_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MethodVector___delitem__" "', argument " "1"" of type '" "std::vector< Method > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Method > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MethodVector___delitem__" "', argument " "2"" of type '" "std::vector< Method >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Method >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_Method_Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MethodVector___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Method > *arg1 = (std::vector< Method > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< Method,std::allocator< Method > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Method_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MethodVector___getitem__" "', argument " "1"" of type '" "std::vector< Method > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Method > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MethodVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        result = (std::vector< Method,std::allocator< Method > > *)std_vector_Sl_Method_Sg____getitem____SWIG_0(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Method_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MethodVector___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Method > *arg1 = (std::vector< Method > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< Method,std::allocator< Method > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Method_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MethodVector___setitem__" "', argument " "1"" of type '" "std::vector< Method > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Method > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MethodVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector< Method,std::allocator< Method > > *ptr = (std::vector< Method,std::allocator< Method > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MethodVector___setitem__" "', argument " "3"" of type '" "std::vector< Method,std::allocator< Method > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MethodVector___setitem__" "', argument " "3"" of type '" "std::vector< Method,std::allocator< Method > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_Method_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< Method,std::allocator< Method > > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MethodVector___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Method > *arg1 = (std::vector< Method > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Method_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MethodVector___setitem__" "', argument " "1"" of type '" "std::vector< Method > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Method > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MethodVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        std_vector_Sl_Method_Sg____setitem____SWIG_1(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MethodVector___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Method > *arg1 = (std::vector< Method > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Method_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MethodVector___delitem__" "', argument " "1"" of type '" "std::vector< Method > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Method > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MethodVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        std_vector_Sl_Method_Sg____delitem____SWIG_1(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MethodVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MethodVector___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_1;
    return _wrap_MethodVector___delitem____SWIG_1(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_MethodVector___delitem____SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MethodVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Method >::__delitem__(std::vector< Method >::difference_type)\n"
    "    std::vector< Method >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MethodVector___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Method > *arg1 = (std::vector< Method > *) 0 ;
  std::vector< Method >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< Method >::value_type *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Method_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MethodVector___getitem__" "', argument " "1"" of type '" "std::vector< Method > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Method > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MethodVector___getitem__" "', argument " "2"" of type '" "std::vector< Method >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Method >::difference_type >(val2);
  {
    try {
      try {
        result = (std::vector< Method >::value_type *) &std_vector_Sl_Method_Sg____getitem____SWIG_1((std::vector< Method > const *)arg1,SWIG_STD_MOVE(arg2));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Method, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Method >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MethodVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MethodVector___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_1;
    return _wrap_MethodVector___getitem____SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_MethodVector___getitem____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MethodVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Method >::__getitem__(PySliceObject *)\n"
    "    std::vector< Method >::__getitem__(std::vector< Method >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MethodVector___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Method > *arg1 = (std::vector< Method > *) 0 ;
  std::vector< Method >::difference_type arg2 ;
  std::vector< Method >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Method_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MethodVector___setitem__" "', argument " "1"" of type '" "std::vector< Method > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Method > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MethodVector___setitem__" "', argument " "2"" of type '" "std::vector< Method >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Method >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Method,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MethodVector___setitem__" "', argument " "3"" of type '" "std::vector< Method >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MethodVector___setitem__" "', argument " "3"" of type '" "std::vector< Method >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Method >::value_type * >(argp3);
  {
    try {
      try {
        std_vector_Sl_Method_Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(Method const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MethodVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MethodVector___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_MethodVector___setitem____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_2;
    {
      int res = swig::asptr(argv[2], (std::vector< Method,std::allocator< Method > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_MethodVector___setitem____SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_MethodVector___setitem____SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MethodVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Method >::__setitem__(PySliceObject *,std::vector< Method,std::allocator< Method > > const &)\n"
    "    std::vector< Method >::__setitem__(PySliceObject *)\n"
    "    std::vector< Method >::__setitem__(std::vector< Method >::difference_type,std::vector< Method >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MethodVector_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Method > *arg1 = (std::vector< Method > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Method >::value_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Method_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MethodVector_pop" "', argument " "1"" of type '" "std::vector< Method > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Method > * >(argp1);
  {
    try {
      try {
        result = std_vector_Sl_Method_Sg__pop(arg1);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< Method >::value_type(result)), SWIGTYPE_p_Method, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MethodVector_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Method > *arg1 = (std::vector< Method > *) 0 ;
  std::vector< Method >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MethodVector_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Method_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MethodVector_append" "', argument " "1"" of type '" "std::vector< Method > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Method > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Method,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MethodVector_append" "', argument " "2"" of type '" "std::vector< Method >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MethodVector_append" "', argument " "2"" of type '" "std::vector< Method >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Method >::value_type * >(argp2);
  {
    try {
      std_vector_Sl_Method_Sg__append(arg1,(Method const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MethodVector__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< Method > *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (std::vector< Method > *)new std::vector< Method >();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Method_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MethodVector__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Method > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< Method > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< Method,std::allocator< Method > > *ptr = (std::vector< Method,std::allocator< Method > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MethodVector" "', argument " "1"" of type '" "std::vector< Method > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MethodVector" "', argument " "1"" of type '" "std::vector< Method > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< Method > *)new std::vector< Method >((std::vector< Method > const &)*arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Method_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MethodVector_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Method > *arg1 = (std::vector< Method > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Method_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MethodVector_empty" "', argument " "1"" of type '" "std::vector< Method > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Method > * >(argp1);
  {
    try {
      result = (bool)((std::vector< Method > const *)arg1)->empty();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MethodVector_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Method > *arg1 = (std::vector< Method > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Method >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Method_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MethodVector_size" "', argument " "1"" of type '" "std::vector< Method > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Method > * >(argp1);
  {
    try {
      result = ((std::vector< Method > const *)arg1)->size();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MethodVector_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Method > *arg1 = (std::vector< Method > *) 0 ;
  std::vector< Method > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MethodVector_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Method_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MethodVector_swap" "', argument " "1"" of type '" "std::vector< Method > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Method > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_Method_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MethodVector_swap" "', argument " "2"" of type '" "std::vector< Method > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MethodVector_swap" "', argument " "2"" of type '" "std::vector< Method > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Method > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MethodVector_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Method > *arg1 = (std::vector< Method > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Method >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Method_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MethodVector_begin" "', argument " "1"" of type '" "std::vector< Method > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Method > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Method >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MethodVector_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Method > *arg1 = (std::vector< Method > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Method >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Method_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MethodVector_end" "', argument " "1"" of type '" "std::vector< Method > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Method > * >(argp1);
  {
    try {
      result = (arg1)->end();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Method >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MethodVector_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Method > *arg1 = (std::vector< Method > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Method >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Method_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MethodVector_rbegin" "', argument " "1"" of type '" "std::vector< Method > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Method > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Method >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MethodVector_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Method > *arg1 = (std::vector< Method > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Method >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Method_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MethodVector_rend" "', argument " "1"" of type '" "std::vector< Method > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Method > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Method >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MethodVector_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Method > *arg1 = (std::vector< Method > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Method_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MethodVector_clear" "', argument " "1"" of type '" "std::vector< Method > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Method > * >(argp1);
  {
    try {
      (arg1)->clear();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MethodVector_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Method > *arg1 = (std::vector< Method > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< Method > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Method_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MethodVector_get_allocator" "', argument " "1"" of type '" "std::vector< Method > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Method > * >(argp1);
  {
    try {
      result = ((std::vector< Method > const *)arg1)->get_allocator();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< Method >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_Method_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MethodVector__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Method >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< Method > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MethodVector" "', argument " "1"" of type '" "std::vector< Method >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Method >::size_type >(val1);
  {
    try {
      result = (std::vector< Method > *)new std::vector< Method >(arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Method_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MethodVector_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Method > *arg1 = (std::vector< Method > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Method_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MethodVector_pop_back" "', argument " "1"" of type '" "std::vector< Method > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Method > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MethodVector_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Method > *arg1 = (std::vector< Method > *) 0 ;
  std::vector< Method >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Method_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MethodVector_resize" "', argument " "1"" of type '" "std::vector< Method > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Method > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MethodVector_resize" "', argument " "2"" of type '" "std::vector< Method >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Method >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MethodVector_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Method > *arg1 = (std::vector< Method > *) 0 ;
  std::vector< Method >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< Method >::iterator result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Method_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MethodVector_erase" "', argument " "1"" of type '" "std::vector< Method > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Method > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MethodVector_erase" "', argument " "2"" of type '" "std::vector< Method >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Method >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Method >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MethodVector_erase" "', argument " "2"" of type '" "std::vector< Method >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_Method_Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Method >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MethodVector_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Method > *arg1 = (std::vector< Method > *) 0 ;
  std::vector< Method >::iterator arg2 ;
  std::vector< Method >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< Method >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Method_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MethodVector_erase" "', argument " "1"" of type '" "std::vector< Method > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Method > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MethodVector_erase" "', argument " "2"" of type '" "std::vector< Method >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Method >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Method >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MethodVector_erase" "', argument " "2"" of type '" "std::vector< Method >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MethodVector_erase" "', argument " "3"" of type '" "std::vector< Method >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Method >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Method >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MethodVector_erase" "', argument " "3"" of type '" "std::vector< Method >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_Method_Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Method >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MethodVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MethodVector_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_MethodVector_erase__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_MethodVector_erase__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MethodVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Method >::erase(std::vector< Method >::iterator)\n"
    "    std::vector< Method >::erase(std::vector< Method >::iterator,std::vector< Method >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_MethodVector__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Method >::size_type arg1 ;
  std::vector< Method >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< Method > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MethodVector" "', argument " "1"" of type '" "std::vector< Method >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Method >::size_type >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Method,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_MethodVector" "', argument " "2"" of type '" "std::vector< Method >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MethodVector" "', argument " "2"" of type '" "std::vector< Method >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Method >::value_type * >(argp2);
  {
    try {
      result = (std::vector< Method > *)new std::vector< Method >(arg1,(std::vector< Method >::value_type const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Method_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MethodVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_MethodVector", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    PyObject *retobj = _wrap_new_MethodVector__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 1) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[0], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_new_MethodVector__SWIG_2(self, argc, argv);
  }
check_2:
  
  if (argc == 1) {
    PyObject *retobj = _wrap_new_MethodVector__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_new_MethodVector__SWIG_3(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_MethodVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Method >::vector()\n"
    "    std::vector< Method >::vector(std::vector< Method > const &)\n"
    "    std::vector< Method >::vector(std::vector< Method >::size_type)\n"
    "    std::vector< Method >::vector(std::vector< Method >::size_type,std::vector< Method >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MethodVector_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Method > *arg1 = (std::vector< Method > *) 0 ;
  std::vector< Method >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MethodVector_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Method_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MethodVector_push_back" "', argument " "1"" of type '" "std::vector< Method > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Method > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Method,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MethodVector_push_back" "', argument " "2"" of type '" "std::vector< Method >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MethodVector_push_back" "', argument " "2"" of type '" "std::vector< Method >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Method >::value_type * >(argp2);
  {
    try {
      (arg1)->push_back((std::vector< Method >::value_type const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MethodVector_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Method > *arg1 = (std::vector< Method > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Method >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Method_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MethodVector_front" "', argument " "1"" of type '" "std::vector< Method > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Method > * >(argp1);
  {
    try {
      result = (std::vector< Method >::value_type *) &((std::vector< Method > const *)arg1)->front();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Method, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Method >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MethodVector_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Method > *arg1 = (std::vector< Method > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Method >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Method_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MethodVector_back" "', argument " "1"" of type '" "std::vector< Method > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Method > * >(argp1);
  {
    try {
      result = (std::vector< Method >::value_type *) &((std::vector< Method > const *)arg1)->back();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Method, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Method >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MethodVector_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Method > *arg1 = (std::vector< Method > *) 0 ;
  std::vector< Method >::size_type arg2 ;
  std::vector< Method >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MethodVector_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Method_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MethodVector_assign" "', argument " "1"" of type '" "std::vector< Method > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Method > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MethodVector_assign" "', argument " "2"" of type '" "std::vector< Method >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Method >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Method,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MethodVector_assign" "', argument " "3"" of type '" "std::vector< Method >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MethodVector_assign" "', argument " "3"" of type '" "std::vector< Method >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Method >::value_type * >(argp3);
  {
    try {
      (arg1)->assign(arg2,(std::vector< Method >::value_type const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MethodVector_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Method > *arg1 = (std::vector< Method > *) 0 ;
  std::vector< Method >::size_type arg2 ;
  std::vector< Method >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Method_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MethodVector_resize" "', argument " "1"" of type '" "std::vector< Method > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Method > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MethodVector_resize" "', argument " "2"" of type '" "std::vector< Method >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Method >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Method,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MethodVector_resize" "', argument " "3"" of type '" "std::vector< Method >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MethodVector_resize" "', argument " "3"" of type '" "std::vector< Method >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Method >::value_type * >(argp3);
  {
    try {
      (arg1)->resize(arg2,(std::vector< Method >::value_type const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MethodVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MethodVector_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_MethodVector_resize__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_MethodVector_resize__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MethodVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Method >::resize(std::vector< Method >::size_type)\n"
    "    std::vector< Method >::resize(std::vector< Method >::size_type,std::vector< Method >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MethodVector_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Method > *arg1 = (std::vector< Method > *) 0 ;
  std::vector< Method >::iterator arg2 ;
  std::vector< Method >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::vector< Method >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Method_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MethodVector_insert" "', argument " "1"" of type '" "std::vector< Method > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Method > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MethodVector_insert" "', argument " "2"" of type '" "std::vector< Method >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Method >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Method >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MethodVector_insert" "', argument " "2"" of type '" "std::vector< Method >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Method,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MethodVector_insert" "', argument " "3"" of type '" "std::vector< Method >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MethodVector_insert" "', argument " "3"" of type '" "std::vector< Method >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Method >::value_type * >(argp3);
  {
    try {
      result = std_vector_Sl_Method_Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(Method const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Method >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MethodVector_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Method > *arg1 = (std::vector< Method > *) 0 ;
  std::vector< Method >::iterator arg2 ;
  std::vector< Method >::size_type arg3 ;
  std::vector< Method >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Method_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MethodVector_insert" "', argument " "1"" of type '" "std::vector< Method > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Method > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MethodVector_insert" "', argument " "2"" of type '" "std::vector< Method >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Method >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Method >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MethodVector_insert" "', argument " "2"" of type '" "std::vector< Method >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MethodVector_insert" "', argument " "3"" of type '" "std::vector< Method >::size_type""'");
  } 
  arg3 = static_cast< std::vector< Method >::size_type >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_Method,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MethodVector_insert" "', argument " "4"" of type '" "std::vector< Method >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MethodVector_insert" "', argument " "4"" of type '" "std::vector< Method >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< Method >::value_type * >(argp4);
  {
    try {
      std_vector_Sl_Method_Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(Method const &)*arg4);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MethodVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MethodVector_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    PyObject *retobj = _wrap_MethodVector_insert__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_MethodVector_insert__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MethodVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Method >::insert(std::vector< Method >::iterator,std::vector< Method >::value_type const &)\n"
    "    std::vector< Method >::insert(std::vector< Method >::iterator,std::vector< Method >::size_type,std::vector< Method >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MethodVector_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Method > *arg1 = (std::vector< Method > *) 0 ;
  std::vector< Method >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MethodVector_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Method_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MethodVector_reserve" "', argument " "1"" of type '" "std::vector< Method > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Method > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MethodVector_reserve" "', argument " "2"" of type '" "std::vector< Method >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Method >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MethodVector_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Method > *arg1 = (std::vector< Method > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Method >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Method_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MethodVector_capacity" "', argument " "1"" of type '" "std::vector< Method > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Method > * >(argp1);
  {
    try {
      result = ((std::vector< Method > const *)arg1)->capacity();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MethodVector(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Method > *arg1 = (std::vector< Method > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Method_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MethodVector" "', argument " "1"" of type '" "std::vector< Method > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Method > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MethodVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_Method_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *MethodVector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_InstancVector_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Instanc > *arg1 = (std::vector< Instanc > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Instanc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstancVector_iterator" "', argument " "1"" of type '" "std::vector< Instanc > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Instanc > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_vector_Sl_Instanc_Sg__iterator(arg1,arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstancVector___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Instanc > *arg1 = (std::vector< Instanc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Instanc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstancVector___nonzero__" "', argument " "1"" of type '" "std::vector< Instanc > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Instanc > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_Instanc_Sg____nonzero__((std::vector< Instanc > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstancVector___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Instanc > *arg1 = (std::vector< Instanc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Instanc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstancVector___bool__" "', argument " "1"" of type '" "std::vector< Instanc > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Instanc > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_Instanc_Sg____bool__((std::vector< Instanc > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstancVector___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Instanc > *arg1 = (std::vector< Instanc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Instanc >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Instanc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstancVector___len__" "', argument " "1"" of type '" "std::vector< Instanc > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Instanc > * >(argp1);
  {
    try {
      result = std_vector_Sl_Instanc_Sg____len__((std::vector< Instanc > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstancVector___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Instanc > *arg1 = (std::vector< Instanc > *) 0 ;
  std::vector< Instanc >::difference_type arg2 ;
  std::vector< Instanc >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< Instanc,std::allocator< Instanc > > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "InstancVector___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Instanc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstancVector___getslice__" "', argument " "1"" of type '" "std::vector< Instanc > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Instanc > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InstancVector___getslice__" "', argument " "2"" of type '" "std::vector< Instanc >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Instanc >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "InstancVector___getslice__" "', argument " "3"" of type '" "std::vector< Instanc >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Instanc >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< Instanc,std::allocator< Instanc > > *)std_vector_Sl_Instanc_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Instanc_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstancVector___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Instanc > *arg1 = (std::vector< Instanc > *) 0 ;
  std::vector< Instanc >::difference_type arg2 ;
  std::vector< Instanc >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Instanc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstancVector___setslice__" "', argument " "1"" of type '" "std::vector< Instanc > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Instanc > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InstancVector___setslice__" "', argument " "2"" of type '" "std::vector< Instanc >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Instanc >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "InstancVector___setslice__" "', argument " "3"" of type '" "std::vector< Instanc >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Instanc >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_Instanc_Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstancVector___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Instanc > *arg1 = (std::vector< Instanc > *) 0 ;
  std::vector< Instanc >::difference_type arg2 ;
  std::vector< Instanc >::difference_type arg3 ;
  std::vector< Instanc,std::allocator< Instanc > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Instanc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstancVector___setslice__" "', argument " "1"" of type '" "std::vector< Instanc > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Instanc > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InstancVector___setslice__" "', argument " "2"" of type '" "std::vector< Instanc >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Instanc >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "InstancVector___setslice__" "', argument " "3"" of type '" "std::vector< Instanc >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Instanc >::difference_type >(val3);
  {
    std::vector< Instanc,std::allocator< Instanc > > *ptr = (std::vector< Instanc,std::allocator< Instanc > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "InstancVector___setslice__" "', argument " "4"" of type '" "std::vector< Instanc,std::allocator< Instanc > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InstancVector___setslice__" "', argument " "4"" of type '" "std::vector< Instanc,std::allocator< Instanc > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_Instanc_Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< Instanc,std::allocator< Instanc > > const &)*arg4);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstancVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "InstancVector___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    PyObject *retobj = _wrap_InstancVector___setslice____SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_InstancVector___setslice____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'InstancVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Instanc >::__setslice__(std::vector< Instanc >::difference_type,std::vector< Instanc >::difference_type)\n"
    "    std::vector< Instanc >::__setslice__(std::vector< Instanc >::difference_type,std::vector< Instanc >::difference_type,std::vector< Instanc,std::allocator< Instanc > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_InstancVector___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Instanc > *arg1 = (std::vector< Instanc > *) 0 ;
  std::vector< Instanc >::difference_type arg2 ;
  std::vector< Instanc >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "InstancVector___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Instanc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstancVector___delslice__" "', argument " "1"" of type '" "std::vector< Instanc > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Instanc > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InstancVector___delslice__" "', argument " "2"" of type '" "std::vector< Instanc >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Instanc >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "InstancVector___delslice__" "', argument " "3"" of type '" "std::vector< Instanc >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Instanc >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_Instanc_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstancVector___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Instanc > *arg1 = (std::vector< Instanc > *) 0 ;
  std::vector< Instanc >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Instanc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstancVector___delitem__" "', argument " "1"" of type '" "std::vector< Instanc > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Instanc > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InstancVector___delitem__" "', argument " "2"" of type '" "std::vector< Instanc >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Instanc >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_Instanc_Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstancVector___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Instanc > *arg1 = (std::vector< Instanc > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< Instanc,std::allocator< Instanc > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Instanc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstancVector___getitem__" "', argument " "1"" of type '" "std::vector< Instanc > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Instanc > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "InstancVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        result = (std::vector< Instanc,std::allocator< Instanc > > *)std_vector_Sl_Instanc_Sg____getitem____SWIG_0(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Instanc_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstancVector___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Instanc > *arg1 = (std::vector< Instanc > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< Instanc,std::allocator< Instanc > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Instanc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstancVector___setitem__" "', argument " "1"" of type '" "std::vector< Instanc > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Instanc > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "InstancVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector< Instanc,std::allocator< Instanc > > *ptr = (std::vector< Instanc,std::allocator< Instanc > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "InstancVector___setitem__" "', argument " "3"" of type '" "std::vector< Instanc,std::allocator< Instanc > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InstancVector___setitem__" "', argument " "3"" of type '" "std::vector< Instanc,std::allocator< Instanc > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_Instanc_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< Instanc,std::allocator< Instanc > > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstancVector___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Instanc > *arg1 = (std::vector< Instanc > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Instanc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstancVector___setitem__" "', argument " "1"" of type '" "std::vector< Instanc > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Instanc > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "InstancVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        std_vector_Sl_Instanc_Sg____setitem____SWIG_1(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstancVector___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Instanc > *arg1 = (std::vector< Instanc > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Instanc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstancVector___delitem__" "', argument " "1"" of type '" "std::vector< Instanc > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Instanc > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "InstancVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        std_vector_Sl_Instanc_Sg____delitem____SWIG_1(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstancVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "InstancVector___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_1;
    return _wrap_InstancVector___delitem____SWIG_1(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_InstancVector___delitem____SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'InstancVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Instanc >::__delitem__(std::vector< Instanc >::difference_type)\n"
    "    std::vector< Instanc >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_InstancVector___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Instanc > *arg1 = (std::vector< Instanc > *) 0 ;
  std::vector< Instanc >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< Instanc >::value_type *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Instanc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstancVector___getitem__" "', argument " "1"" of type '" "std::vector< Instanc > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Instanc > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InstancVector___getitem__" "', argument " "2"" of type '" "std::vector< Instanc >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Instanc >::difference_type >(val2);
  {
    try {
      try {
        result = (std::vector< Instanc >::value_type *) &std_vector_Sl_Instanc_Sg____getitem____SWIG_1((std::vector< Instanc > const *)arg1,SWIG_STD_MOVE(arg2));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Instanc, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Instanc >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstancVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "InstancVector___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_1;
    return _wrap_InstancVector___getitem____SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_InstancVector___getitem____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'InstancVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Instanc >::__getitem__(PySliceObject *)\n"
    "    std::vector< Instanc >::__getitem__(std::vector< Instanc >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_InstancVector___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Instanc > *arg1 = (std::vector< Instanc > *) 0 ;
  std::vector< Instanc >::difference_type arg2 ;
  std::vector< Instanc >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Instanc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstancVector___setitem__" "', argument " "1"" of type '" "std::vector< Instanc > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Instanc > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InstancVector___setitem__" "', argument " "2"" of type '" "std::vector< Instanc >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Instanc >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Instanc,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "InstancVector___setitem__" "', argument " "3"" of type '" "std::vector< Instanc >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InstancVector___setitem__" "', argument " "3"" of type '" "std::vector< Instanc >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Instanc >::value_type * >(argp3);
  {
    try {
      try {
        std_vector_Sl_Instanc_Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(Instanc const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstancVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "InstancVector___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_InstancVector___setitem____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_2;
    {
      int res = swig::asptr(argv[2], (std::vector< Instanc,std::allocator< Instanc > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_InstancVector___setitem____SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_InstancVector___setitem____SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'InstancVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Instanc >::__setitem__(PySliceObject *,std::vector< Instanc,std::allocator< Instanc > > const &)\n"
    "    std::vector< Instanc >::__setitem__(PySliceObject *)\n"
    "    std::vector< Instanc >::__setitem__(std::vector< Instanc >::difference_type,std::vector< Instanc >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_InstancVector_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Instanc > *arg1 = (std::vector< Instanc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< Instanc > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Instanc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstancVector_pop" "', argument " "1"" of type '" "std::vector< Instanc > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Instanc > * >(argp1);
  {
    try {
      try {
        result = std_vector_Sl_Instanc_Sg__pop(arg1);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< Instanc >::value_type(result)), SWIGTYPE_p_Instanc, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstancVector_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Instanc > *arg1 = (std::vector< Instanc > *) 0 ;
  std::vector< Instanc >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "InstancVector_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Instanc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstancVector_append" "', argument " "1"" of type '" "std::vector< Instanc > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Instanc > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Instanc,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InstancVector_append" "', argument " "2"" of type '" "std::vector< Instanc >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InstancVector_append" "', argument " "2"" of type '" "std::vector< Instanc >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Instanc >::value_type * >(argp2);
  {
    try {
      std_vector_Sl_Instanc_Sg__append(arg1,(Instanc const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InstancVector__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< Instanc > *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (std::vector< Instanc > *)new std::vector< Instanc >();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Instanc_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InstancVector__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Instanc > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< Instanc > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< Instanc,std::allocator< Instanc > > *ptr = (std::vector< Instanc,std::allocator< Instanc > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_InstancVector" "', argument " "1"" of type '" "std::vector< Instanc > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InstancVector" "', argument " "1"" of type '" "std::vector< Instanc > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< Instanc > *)new std::vector< Instanc >((std::vector< Instanc > const &)*arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Instanc_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstancVector_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Instanc > *arg1 = (std::vector< Instanc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Instanc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstancVector_empty" "', argument " "1"" of type '" "std::vector< Instanc > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Instanc > * >(argp1);
  {
    try {
      result = (bool)((std::vector< Instanc > const *)arg1)->empty();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstancVector_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Instanc > *arg1 = (std::vector< Instanc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Instanc >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Instanc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstancVector_size" "', argument " "1"" of type '" "std::vector< Instanc > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Instanc > * >(argp1);
  {
    try {
      result = ((std::vector< Instanc > const *)arg1)->size();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstancVector_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Instanc > *arg1 = (std::vector< Instanc > *) 0 ;
  std::vector< Instanc > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "InstancVector_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Instanc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstancVector_swap" "', argument " "1"" of type '" "std::vector< Instanc > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Instanc > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_Instanc_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InstancVector_swap" "', argument " "2"" of type '" "std::vector< Instanc > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InstancVector_swap" "', argument " "2"" of type '" "std::vector< Instanc > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Instanc > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstancVector_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Instanc > *arg1 = (std::vector< Instanc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Instanc >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Instanc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstancVector_begin" "', argument " "1"" of type '" "std::vector< Instanc > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Instanc > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Instanc >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstancVector_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Instanc > *arg1 = (std::vector< Instanc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Instanc >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Instanc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstancVector_end" "', argument " "1"" of type '" "std::vector< Instanc > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Instanc > * >(argp1);
  {
    try {
      result = (arg1)->end();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Instanc >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstancVector_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Instanc > *arg1 = (std::vector< Instanc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Instanc >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Instanc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstancVector_rbegin" "', argument " "1"" of type '" "std::vector< Instanc > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Instanc > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Instanc >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstancVector_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Instanc > *arg1 = (std::vector< Instanc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Instanc >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Instanc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstancVector_rend" "', argument " "1"" of type '" "std::vector< Instanc > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Instanc > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Instanc >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstancVector_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Instanc > *arg1 = (std::vector< Instanc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Instanc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstancVector_clear" "', argument " "1"" of type '" "std::vector< Instanc > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Instanc > * >(argp1);
  {
    try {
      (arg1)->clear();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstancVector_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Instanc > *arg1 = (std::vector< Instanc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< Instanc > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Instanc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstancVector_get_allocator" "', argument " "1"" of type '" "std::vector< Instanc > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Instanc > * >(argp1);
  {
    try {
      result = ((std::vector< Instanc > const *)arg1)->get_allocator();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< Instanc >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_Instanc_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InstancVector__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Instanc >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< Instanc > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_InstancVector" "', argument " "1"" of type '" "std::vector< Instanc >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Instanc >::size_type >(val1);
  {
    try {
      result = (std::vector< Instanc > *)new std::vector< Instanc >(arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Instanc_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstancVector_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Instanc > *arg1 = (std::vector< Instanc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Instanc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstancVector_pop_back" "', argument " "1"" of type '" "std::vector< Instanc > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Instanc > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstancVector_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Instanc > *arg1 = (std::vector< Instanc > *) 0 ;
  std::vector< Instanc >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Instanc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstancVector_resize" "', argument " "1"" of type '" "std::vector< Instanc > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Instanc > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InstancVector_resize" "', argument " "2"" of type '" "std::vector< Instanc >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Instanc >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstancVector_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Instanc > *arg1 = (std::vector< Instanc > *) 0 ;
  std::vector< Instanc >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< Instanc >::iterator result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Instanc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstancVector_erase" "', argument " "1"" of type '" "std::vector< Instanc > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Instanc > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "InstancVector_erase" "', argument " "2"" of type '" "std::vector< Instanc >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Instanc >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Instanc >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "InstancVector_erase" "', argument " "2"" of type '" "std::vector< Instanc >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_Instanc_Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Instanc >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstancVector_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Instanc > *arg1 = (std::vector< Instanc > *) 0 ;
  std::vector< Instanc >::iterator arg2 ;
  std::vector< Instanc >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< Instanc >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Instanc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstancVector_erase" "', argument " "1"" of type '" "std::vector< Instanc > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Instanc > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "InstancVector_erase" "', argument " "2"" of type '" "std::vector< Instanc >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Instanc >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Instanc >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "InstancVector_erase" "', argument " "2"" of type '" "std::vector< Instanc >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "InstancVector_erase" "', argument " "3"" of type '" "std::vector< Instanc >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Instanc >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Instanc >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "InstancVector_erase" "', argument " "3"" of type '" "std::vector< Instanc >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_Instanc_Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Instanc >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstancVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "InstancVector_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_InstancVector_erase__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_InstancVector_erase__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'InstancVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Instanc >::erase(std::vector< Instanc >::iterator)\n"
    "    std::vector< Instanc >::erase(std::vector< Instanc >::iterator,std::vector< Instanc >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_InstancVector__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Instanc >::size_type arg1 ;
  std::vector< Instanc >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< Instanc > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_InstancVector" "', argument " "1"" of type '" "std::vector< Instanc >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Instanc >::size_type >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Instanc,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_InstancVector" "', argument " "2"" of type '" "std::vector< Instanc >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InstancVector" "', argument " "2"" of type '" "std::vector< Instanc >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Instanc >::value_type * >(argp2);
  {
    try {
      result = (std::vector< Instanc > *)new std::vector< Instanc >(arg1,(std::vector< Instanc >::value_type const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Instanc_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InstancVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_InstancVector", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    PyObject *retobj = _wrap_new_InstancVector__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 1) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[0], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_new_InstancVector__SWIG_2(self, argc, argv);
  }
check_2:
  
  if (argc == 1) {
    PyObject *retobj = _wrap_new_InstancVector__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_new_InstancVector__SWIG_3(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_InstancVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Instanc >::vector()\n"
    "    std::vector< Instanc >::vector(std::vector< Instanc > const &)\n"
    "    std::vector< Instanc >::vector(std::vector< Instanc >::size_type)\n"
    "    std::vector< Instanc >::vector(std::vector< Instanc >::size_type,std::vector< Instanc >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_InstancVector_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Instanc > *arg1 = (std::vector< Instanc > *) 0 ;
  std::vector< Instanc >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "InstancVector_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Instanc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstancVector_push_back" "', argument " "1"" of type '" "std::vector< Instanc > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Instanc > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Instanc,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InstancVector_push_back" "', argument " "2"" of type '" "std::vector< Instanc >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InstancVector_push_back" "', argument " "2"" of type '" "std::vector< Instanc >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Instanc >::value_type * >(argp2);
  {
    try {
      (arg1)->push_back((std::vector< Instanc >::value_type const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstancVector_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Instanc > *arg1 = (std::vector< Instanc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Instanc >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Instanc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstancVector_front" "', argument " "1"" of type '" "std::vector< Instanc > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Instanc > * >(argp1);
  {
    try {
      result = (std::vector< Instanc >::value_type *) &((std::vector< Instanc > const *)arg1)->front();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Instanc, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Instanc >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstancVector_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Instanc > *arg1 = (std::vector< Instanc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Instanc >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Instanc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstancVector_back" "', argument " "1"" of type '" "std::vector< Instanc > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Instanc > * >(argp1);
  {
    try {
      result = (std::vector< Instanc >::value_type *) &((std::vector< Instanc > const *)arg1)->back();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Instanc, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Instanc >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstancVector_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Instanc > *arg1 = (std::vector< Instanc > *) 0 ;
  std::vector< Instanc >::size_type arg2 ;
  std::vector< Instanc >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "InstancVector_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Instanc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstancVector_assign" "', argument " "1"" of type '" "std::vector< Instanc > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Instanc > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InstancVector_assign" "', argument " "2"" of type '" "std::vector< Instanc >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Instanc >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Instanc,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "InstancVector_assign" "', argument " "3"" of type '" "std::vector< Instanc >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InstancVector_assign" "', argument " "3"" of type '" "std::vector< Instanc >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Instanc >::value_type * >(argp3);
  {
    try {
      (arg1)->assign(arg2,(std::vector< Instanc >::value_type const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstancVector_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Instanc > *arg1 = (std::vector< Instanc > *) 0 ;
  std::vector< Instanc >::size_type arg2 ;
  std::vector< Instanc >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Instanc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstancVector_resize" "', argument " "1"" of type '" "std::vector< Instanc > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Instanc > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InstancVector_resize" "', argument " "2"" of type '" "std::vector< Instanc >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Instanc >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Instanc,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "InstancVector_resize" "', argument " "3"" of type '" "std::vector< Instanc >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InstancVector_resize" "', argument " "3"" of type '" "std::vector< Instanc >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Instanc >::value_type * >(argp3);
  {
    try {
      (arg1)->resize(arg2,(std::vector< Instanc >::value_type const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstancVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "InstancVector_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_InstancVector_resize__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_InstancVector_resize__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'InstancVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Instanc >::resize(std::vector< Instanc >::size_type)\n"
    "    std::vector< Instanc >::resize(std::vector< Instanc >::size_type,std::vector< Instanc >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_InstancVector_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Instanc > *arg1 = (std::vector< Instanc > *) 0 ;
  std::vector< Instanc >::iterator arg2 ;
  std::vector< Instanc >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::vector< Instanc >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Instanc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstancVector_insert" "', argument " "1"" of type '" "std::vector< Instanc > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Instanc > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "InstancVector_insert" "', argument " "2"" of type '" "std::vector< Instanc >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Instanc >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Instanc >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "InstancVector_insert" "', argument " "2"" of type '" "std::vector< Instanc >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Instanc,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "InstancVector_insert" "', argument " "3"" of type '" "std::vector< Instanc >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InstancVector_insert" "', argument " "3"" of type '" "std::vector< Instanc >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Instanc >::value_type * >(argp3);
  {
    try {
      result = std_vector_Sl_Instanc_Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(Instanc const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Instanc >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstancVector_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Instanc > *arg1 = (std::vector< Instanc > *) 0 ;
  std::vector< Instanc >::iterator arg2 ;
  std::vector< Instanc >::size_type arg3 ;
  std::vector< Instanc >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Instanc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstancVector_insert" "', argument " "1"" of type '" "std::vector< Instanc > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Instanc > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "InstancVector_insert" "', argument " "2"" of type '" "std::vector< Instanc >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Instanc >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Instanc >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "InstancVector_insert" "', argument " "2"" of type '" "std::vector< Instanc >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "InstancVector_insert" "', argument " "3"" of type '" "std::vector< Instanc >::size_type""'");
  } 
  arg3 = static_cast< std::vector< Instanc >::size_type >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_Instanc,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "InstancVector_insert" "', argument " "4"" of type '" "std::vector< Instanc >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InstancVector_insert" "', argument " "4"" of type '" "std::vector< Instanc >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< Instanc >::value_type * >(argp4);
  {
    try {
      std_vector_Sl_Instanc_Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(Instanc const &)*arg4);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstancVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "InstancVector_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    PyObject *retobj = _wrap_InstancVector_insert__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_InstancVector_insert__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'InstancVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Instanc >::insert(std::vector< Instanc >::iterator,std::vector< Instanc >::value_type const &)\n"
    "    std::vector< Instanc >::insert(std::vector< Instanc >::iterator,std::vector< Instanc >::size_type,std::vector< Instanc >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_InstancVector_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Instanc > *arg1 = (std::vector< Instanc > *) 0 ;
  std::vector< Instanc >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "InstancVector_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Instanc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstancVector_reserve" "', argument " "1"" of type '" "std::vector< Instanc > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Instanc > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InstancVector_reserve" "', argument " "2"" of type '" "std::vector< Instanc >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Instanc >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InstancVector_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Instanc > *arg1 = (std::vector< Instanc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Instanc >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Instanc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InstancVector_capacity" "', argument " "1"" of type '" "std::vector< Instanc > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Instanc > * >(argp1);
  {
    try {
      result = ((std::vector< Instanc > const *)arg1)->capacity();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_InstancVector(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Instanc > *arg1 = (std::vector< Instanc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Instanc_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_InstancVector" "', argument " "1"" of type '" "std::vector< Instanc > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Instanc > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *InstancVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_Instanc_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *InstancVector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_ExtMethodVector_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ExtMethod > *arg1 = (std::vector< ExtMethod > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ExtMethod_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtMethodVector_iterator" "', argument " "1"" of type '" "std::vector< ExtMethod > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ExtMethod > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_vector_Sl_ExtMethod_Sg__iterator(arg1,arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtMethodVector___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ExtMethod > *arg1 = (std::vector< ExtMethod > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ExtMethod_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtMethodVector___nonzero__" "', argument " "1"" of type '" "std::vector< ExtMethod > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ExtMethod > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_ExtMethod_Sg____nonzero__((std::vector< ExtMethod > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtMethodVector___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ExtMethod > *arg1 = (std::vector< ExtMethod > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ExtMethod_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtMethodVector___bool__" "', argument " "1"" of type '" "std::vector< ExtMethod > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ExtMethod > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_ExtMethod_Sg____bool__((std::vector< ExtMethod > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtMethodVector___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ExtMethod > *arg1 = (std::vector< ExtMethod > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ExtMethod >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ExtMethod_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtMethodVector___len__" "', argument " "1"" of type '" "std::vector< ExtMethod > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ExtMethod > * >(argp1);
  {
    try {
      result = std_vector_Sl_ExtMethod_Sg____len__((std::vector< ExtMethod > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtMethodVector___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ExtMethod > *arg1 = (std::vector< ExtMethod > *) 0 ;
  std::vector< ExtMethod >::difference_type arg2 ;
  std::vector< ExtMethod >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< ExtMethod,std::allocator< ExtMethod > > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ExtMethodVector___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ExtMethod_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtMethodVector___getslice__" "', argument " "1"" of type '" "std::vector< ExtMethod > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ExtMethod > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ExtMethodVector___getslice__" "', argument " "2"" of type '" "std::vector< ExtMethod >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ExtMethod >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ExtMethodVector___getslice__" "', argument " "3"" of type '" "std::vector< ExtMethod >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< ExtMethod >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< ExtMethod,std::allocator< ExtMethod > > *)std_vector_Sl_ExtMethod_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ExtMethod_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtMethodVector___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ExtMethod > *arg1 = (std::vector< ExtMethod > *) 0 ;
  std::vector< ExtMethod >::difference_type arg2 ;
  std::vector< ExtMethod >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ExtMethod_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtMethodVector___setslice__" "', argument " "1"" of type '" "std::vector< ExtMethod > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ExtMethod > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ExtMethodVector___setslice__" "', argument " "2"" of type '" "std::vector< ExtMethod >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ExtMethod >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ExtMethodVector___setslice__" "', argument " "3"" of type '" "std::vector< ExtMethod >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< ExtMethod >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_ExtMethod_Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtMethodVector___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ExtMethod > *arg1 = (std::vector< ExtMethod > *) 0 ;
  std::vector< ExtMethod >::difference_type arg2 ;
  std::vector< ExtMethod >::difference_type arg3 ;
  std::vector< ExtMethod,std::allocator< ExtMethod > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ExtMethod_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtMethodVector___setslice__" "', argument " "1"" of type '" "std::vector< ExtMethod > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ExtMethod > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ExtMethodVector___setslice__" "', argument " "2"" of type '" "std::vector< ExtMethod >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ExtMethod >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ExtMethodVector___setslice__" "', argument " "3"" of type '" "std::vector< ExtMethod >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< ExtMethod >::difference_type >(val3);
  {
    std::vector< ExtMethod,std::allocator< ExtMethod > > *ptr = (std::vector< ExtMethod,std::allocator< ExtMethod > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ExtMethodVector___setslice__" "', argument " "4"" of type '" "std::vector< ExtMethod,std::allocator< ExtMethod > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ExtMethodVector___setslice__" "', argument " "4"" of type '" "std::vector< ExtMethod,std::allocator< ExtMethod > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_ExtMethod_Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< ExtMethod,std::allocator< ExtMethod > > const &)*arg4);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtMethodVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ExtMethodVector___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    PyObject *retobj = _wrap_ExtMethodVector___setslice____SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_ExtMethodVector___setslice____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ExtMethodVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ExtMethod >::__setslice__(std::vector< ExtMethod >::difference_type,std::vector< ExtMethod >::difference_type)\n"
    "    std::vector< ExtMethod >::__setslice__(std::vector< ExtMethod >::difference_type,std::vector< ExtMethod >::difference_type,std::vector< ExtMethod,std::allocator< ExtMethod > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ExtMethodVector___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ExtMethod > *arg1 = (std::vector< ExtMethod > *) 0 ;
  std::vector< ExtMethod >::difference_type arg2 ;
  std::vector< ExtMethod >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ExtMethodVector___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ExtMethod_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtMethodVector___delslice__" "', argument " "1"" of type '" "std::vector< ExtMethod > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ExtMethod > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ExtMethodVector___delslice__" "', argument " "2"" of type '" "std::vector< ExtMethod >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ExtMethod >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ExtMethodVector___delslice__" "', argument " "3"" of type '" "std::vector< ExtMethod >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< ExtMethod >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_ExtMethod_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtMethodVector___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ExtMethod > *arg1 = (std::vector< ExtMethod > *) 0 ;
  std::vector< ExtMethod >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ExtMethod_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtMethodVector___delitem__" "', argument " "1"" of type '" "std::vector< ExtMethod > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ExtMethod > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ExtMethodVector___delitem__" "', argument " "2"" of type '" "std::vector< ExtMethod >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ExtMethod >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_ExtMethod_Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtMethodVector___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ExtMethod > *arg1 = (std::vector< ExtMethod > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< ExtMethod,std::allocator< ExtMethod > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ExtMethod_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtMethodVector___getitem__" "', argument " "1"" of type '" "std::vector< ExtMethod > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ExtMethod > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ExtMethodVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        result = (std::vector< ExtMethod,std::allocator< ExtMethod > > *)std_vector_Sl_ExtMethod_Sg____getitem____SWIG_0(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ExtMethod_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtMethodVector___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ExtMethod > *arg1 = (std::vector< ExtMethod > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< ExtMethod,std::allocator< ExtMethod > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ExtMethod_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtMethodVector___setitem__" "', argument " "1"" of type '" "std::vector< ExtMethod > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ExtMethod > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ExtMethodVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector< ExtMethod,std::allocator< ExtMethod > > *ptr = (std::vector< ExtMethod,std::allocator< ExtMethod > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ExtMethodVector___setitem__" "', argument " "3"" of type '" "std::vector< ExtMethod,std::allocator< ExtMethod > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ExtMethodVector___setitem__" "', argument " "3"" of type '" "std::vector< ExtMethod,std::allocator< ExtMethod > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_ExtMethod_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< ExtMethod,std::allocator< ExtMethod > > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtMethodVector___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ExtMethod > *arg1 = (std::vector< ExtMethod > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ExtMethod_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtMethodVector___setitem__" "', argument " "1"" of type '" "std::vector< ExtMethod > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ExtMethod > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ExtMethodVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        std_vector_Sl_ExtMethod_Sg____setitem____SWIG_1(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtMethodVector___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ExtMethod > *arg1 = (std::vector< ExtMethod > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ExtMethod_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtMethodVector___delitem__" "', argument " "1"" of type '" "std::vector< ExtMethod > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ExtMethod > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ExtMethodVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        std_vector_Sl_ExtMethod_Sg____delitem____SWIG_1(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtMethodVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ExtMethodVector___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_1;
    return _wrap_ExtMethodVector___delitem____SWIG_1(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_ExtMethodVector___delitem____SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ExtMethodVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ExtMethod >::__delitem__(std::vector< ExtMethod >::difference_type)\n"
    "    std::vector< ExtMethod >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ExtMethodVector___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ExtMethod > *arg1 = (std::vector< ExtMethod > *) 0 ;
  std::vector< ExtMethod >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< ExtMethod >::value_type *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ExtMethod_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtMethodVector___getitem__" "', argument " "1"" of type '" "std::vector< ExtMethod > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ExtMethod > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ExtMethodVector___getitem__" "', argument " "2"" of type '" "std::vector< ExtMethod >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ExtMethod >::difference_type >(val2);
  {
    try {
      try {
        result = (std::vector< ExtMethod >::value_type *) &std_vector_Sl_ExtMethod_Sg____getitem____SWIG_1((std::vector< ExtMethod > const *)arg1,SWIG_STD_MOVE(arg2));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ExtMethod, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< ExtMethod >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtMethodVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ExtMethodVector___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_1;
    return _wrap_ExtMethodVector___getitem____SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_ExtMethodVector___getitem____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ExtMethodVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ExtMethod >::__getitem__(PySliceObject *)\n"
    "    std::vector< ExtMethod >::__getitem__(std::vector< ExtMethod >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ExtMethodVector___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ExtMethod > *arg1 = (std::vector< ExtMethod > *) 0 ;
  std::vector< ExtMethod >::difference_type arg2 ;
  std::vector< ExtMethod >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ExtMethod_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtMethodVector___setitem__" "', argument " "1"" of type '" "std::vector< ExtMethod > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ExtMethod > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ExtMethodVector___setitem__" "', argument " "2"" of type '" "std::vector< ExtMethod >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ExtMethod >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_ExtMethod,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ExtMethodVector___setitem__" "', argument " "3"" of type '" "std::vector< ExtMethod >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ExtMethodVector___setitem__" "', argument " "3"" of type '" "std::vector< ExtMethod >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< ExtMethod >::value_type * >(argp3);
  {
    try {
      try {
        std_vector_Sl_ExtMethod_Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(ExtMethod const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtMethodVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ExtMethodVector___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_ExtMethodVector___setitem____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_2;
    {
      int res = swig::asptr(argv[2], (std::vector< ExtMethod,std::allocator< ExtMethod > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_ExtMethodVector___setitem____SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_ExtMethodVector___setitem____SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ExtMethodVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ExtMethod >::__setitem__(PySliceObject *,std::vector< ExtMethod,std::allocator< ExtMethod > > const &)\n"
    "    std::vector< ExtMethod >::__setitem__(PySliceObject *)\n"
    "    std::vector< ExtMethod >::__setitem__(std::vector< ExtMethod >::difference_type,std::vector< ExtMethod >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ExtMethodVector_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ExtMethod > *arg1 = (std::vector< ExtMethod > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ExtMethod >::value_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ExtMethod_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtMethodVector_pop" "', argument " "1"" of type '" "std::vector< ExtMethod > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ExtMethod > * >(argp1);
  {
    try {
      try {
        result = std_vector_Sl_ExtMethod_Sg__pop(arg1);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< ExtMethod >::value_type(result)), SWIGTYPE_p_ExtMethod, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtMethodVector_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ExtMethod > *arg1 = (std::vector< ExtMethod > *) 0 ;
  std::vector< ExtMethod >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ExtMethodVector_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ExtMethod_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtMethodVector_append" "', argument " "1"" of type '" "std::vector< ExtMethod > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ExtMethod > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ExtMethod,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ExtMethodVector_append" "', argument " "2"" of type '" "std::vector< ExtMethod >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ExtMethodVector_append" "', argument " "2"" of type '" "std::vector< ExtMethod >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ExtMethod >::value_type * >(argp2);
  {
    try {
      std_vector_Sl_ExtMethod_Sg__append(arg1,(ExtMethod const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ExtMethodVector__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< ExtMethod > *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (std::vector< ExtMethod > *)new std::vector< ExtMethod >();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ExtMethod_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ExtMethodVector__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ExtMethod > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< ExtMethod > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< ExtMethod,std::allocator< ExtMethod > > *ptr = (std::vector< ExtMethod,std::allocator< ExtMethod > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ExtMethodVector" "', argument " "1"" of type '" "std::vector< ExtMethod > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ExtMethodVector" "', argument " "1"" of type '" "std::vector< ExtMethod > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< ExtMethod > *)new std::vector< ExtMethod >((std::vector< ExtMethod > const &)*arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ExtMethod_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtMethodVector_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ExtMethod > *arg1 = (std::vector< ExtMethod > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ExtMethod_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtMethodVector_empty" "', argument " "1"" of type '" "std::vector< ExtMethod > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ExtMethod > * >(argp1);
  {
    try {
      result = (bool)((std::vector< ExtMethod > const *)arg1)->empty();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtMethodVector_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ExtMethod > *arg1 = (std::vector< ExtMethod > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ExtMethod >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ExtMethod_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtMethodVector_size" "', argument " "1"" of type '" "std::vector< ExtMethod > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ExtMethod > * >(argp1);
  {
    try {
      result = ((std::vector< ExtMethod > const *)arg1)->size();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtMethodVector_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ExtMethod > *arg1 = (std::vector< ExtMethod > *) 0 ;
  std::vector< ExtMethod > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ExtMethodVector_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ExtMethod_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtMethodVector_swap" "', argument " "1"" of type '" "std::vector< ExtMethod > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ExtMethod > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_ExtMethod_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ExtMethodVector_swap" "', argument " "2"" of type '" "std::vector< ExtMethod > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ExtMethodVector_swap" "', argument " "2"" of type '" "std::vector< ExtMethod > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ExtMethod > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtMethodVector_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ExtMethod > *arg1 = (std::vector< ExtMethod > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ExtMethod >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ExtMethod_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtMethodVector_begin" "', argument " "1"" of type '" "std::vector< ExtMethod > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ExtMethod > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ExtMethod >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtMethodVector_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ExtMethod > *arg1 = (std::vector< ExtMethod > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ExtMethod >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ExtMethod_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtMethodVector_end" "', argument " "1"" of type '" "std::vector< ExtMethod > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ExtMethod > * >(argp1);
  {
    try {
      result = (arg1)->end();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ExtMethod >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtMethodVector_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ExtMethod > *arg1 = (std::vector< ExtMethod > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ExtMethod >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ExtMethod_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtMethodVector_rbegin" "', argument " "1"" of type '" "std::vector< ExtMethod > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ExtMethod > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ExtMethod >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtMethodVector_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ExtMethod > *arg1 = (std::vector< ExtMethod > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ExtMethod >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ExtMethod_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtMethodVector_rend" "', argument " "1"" of type '" "std::vector< ExtMethod > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ExtMethod > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ExtMethod >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtMethodVector_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ExtMethod > *arg1 = (std::vector< ExtMethod > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ExtMethod_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtMethodVector_clear" "', argument " "1"" of type '" "std::vector< ExtMethod > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ExtMethod > * >(argp1);
  {
    try {
      (arg1)->clear();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtMethodVector_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ExtMethod > *arg1 = (std::vector< ExtMethod > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< ExtMethod > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ExtMethod_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtMethodVector_get_allocator" "', argument " "1"" of type '" "std::vector< ExtMethod > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ExtMethod > * >(argp1);
  {
    try {
      result = ((std::vector< ExtMethod > const *)arg1)->get_allocator();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< ExtMethod >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_ExtMethod_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ExtMethodVector__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ExtMethod >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< ExtMethod > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ExtMethodVector" "', argument " "1"" of type '" "std::vector< ExtMethod >::size_type""'");
  } 
  arg1 = static_cast< std::vector< ExtMethod >::size_type >(val1);
  {
    try {
      result = (std::vector< ExtMethod > *)new std::vector< ExtMethod >(arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ExtMethod_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtMethodVector_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ExtMethod > *arg1 = (std::vector< ExtMethod > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ExtMethod_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtMethodVector_pop_back" "', argument " "1"" of type '" "std::vector< ExtMethod > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ExtMethod > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtMethodVector_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ExtMethod > *arg1 = (std::vector< ExtMethod > *) 0 ;
  std::vector< ExtMethod >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ExtMethod_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtMethodVector_resize" "', argument " "1"" of type '" "std::vector< ExtMethod > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ExtMethod > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ExtMethodVector_resize" "', argument " "2"" of type '" "std::vector< ExtMethod >::size_type""'");
  } 
  arg2 = static_cast< std::vector< ExtMethod >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtMethodVector_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ExtMethod > *arg1 = (std::vector< ExtMethod > *) 0 ;
  std::vector< ExtMethod >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< ExtMethod >::iterator result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ExtMethod_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtMethodVector_erase" "', argument " "1"" of type '" "std::vector< ExtMethod > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ExtMethod > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ExtMethodVector_erase" "', argument " "2"" of type '" "std::vector< ExtMethod >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< ExtMethod >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< ExtMethod >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ExtMethodVector_erase" "', argument " "2"" of type '" "std::vector< ExtMethod >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_ExtMethod_Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ExtMethod >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtMethodVector_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ExtMethod > *arg1 = (std::vector< ExtMethod > *) 0 ;
  std::vector< ExtMethod >::iterator arg2 ;
  std::vector< ExtMethod >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< ExtMethod >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ExtMethod_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtMethodVector_erase" "', argument " "1"" of type '" "std::vector< ExtMethod > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ExtMethod > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ExtMethodVector_erase" "', argument " "2"" of type '" "std::vector< ExtMethod >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< ExtMethod >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< ExtMethod >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ExtMethodVector_erase" "', argument " "2"" of type '" "std::vector< ExtMethod >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ExtMethodVector_erase" "', argument " "3"" of type '" "std::vector< ExtMethod >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< ExtMethod >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< ExtMethod >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ExtMethodVector_erase" "', argument " "3"" of type '" "std::vector< ExtMethod >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_ExtMethod_Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ExtMethod >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtMethodVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ExtMethodVector_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_ExtMethodVector_erase__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_ExtMethodVector_erase__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ExtMethodVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ExtMethod >::erase(std::vector< ExtMethod >::iterator)\n"
    "    std::vector< ExtMethod >::erase(std::vector< ExtMethod >::iterator,std::vector< ExtMethod >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_ExtMethodVector__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ExtMethod >::size_type arg1 ;
  std::vector< ExtMethod >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< ExtMethod > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ExtMethodVector" "', argument " "1"" of type '" "std::vector< ExtMethod >::size_type""'");
  } 
  arg1 = static_cast< std::vector< ExtMethod >::size_type >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ExtMethod,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ExtMethodVector" "', argument " "2"" of type '" "std::vector< ExtMethod >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ExtMethodVector" "', argument " "2"" of type '" "std::vector< ExtMethod >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ExtMethod >::value_type * >(argp2);
  {
    try {
      result = (std::vector< ExtMethod > *)new std::vector< ExtMethod >(arg1,(std::vector< ExtMethod >::value_type const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ExtMethod_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ExtMethodVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_ExtMethodVector", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    PyObject *retobj = _wrap_new_ExtMethodVector__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 1) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[0], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_new_ExtMethodVector__SWIG_2(self, argc, argv);
  }
check_2:
  
  if (argc == 1) {
    PyObject *retobj = _wrap_new_ExtMethodVector__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_new_ExtMethodVector__SWIG_3(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_ExtMethodVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ExtMethod >::vector()\n"
    "    std::vector< ExtMethod >::vector(std::vector< ExtMethod > const &)\n"
    "    std::vector< ExtMethod >::vector(std::vector< ExtMethod >::size_type)\n"
    "    std::vector< ExtMethod >::vector(std::vector< ExtMethod >::size_type,std::vector< ExtMethod >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ExtMethodVector_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ExtMethod > *arg1 = (std::vector< ExtMethod > *) 0 ;
  std::vector< ExtMethod >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ExtMethodVector_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ExtMethod_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtMethodVector_push_back" "', argument " "1"" of type '" "std::vector< ExtMethod > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ExtMethod > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ExtMethod,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ExtMethodVector_push_back" "', argument " "2"" of type '" "std::vector< ExtMethod >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ExtMethodVector_push_back" "', argument " "2"" of type '" "std::vector< ExtMethod >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ExtMethod >::value_type * >(argp2);
  {
    try {
      (arg1)->push_back((std::vector< ExtMethod >::value_type const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtMethodVector_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ExtMethod > *arg1 = (std::vector< ExtMethod > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ExtMethod >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ExtMethod_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtMethodVector_front" "', argument " "1"" of type '" "std::vector< ExtMethod > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ExtMethod > * >(argp1);
  {
    try {
      result = (std::vector< ExtMethod >::value_type *) &((std::vector< ExtMethod > const *)arg1)->front();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ExtMethod, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< ExtMethod >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtMethodVector_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ExtMethod > *arg1 = (std::vector< ExtMethod > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ExtMethod >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ExtMethod_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtMethodVector_back" "', argument " "1"" of type '" "std::vector< ExtMethod > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ExtMethod > * >(argp1);
  {
    try {
      result = (std::vector< ExtMethod >::value_type *) &((std::vector< ExtMethod > const *)arg1)->back();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ExtMethod, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< ExtMethod >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtMethodVector_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ExtMethod > *arg1 = (std::vector< ExtMethod > *) 0 ;
  std::vector< ExtMethod >::size_type arg2 ;
  std::vector< ExtMethod >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ExtMethodVector_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ExtMethod_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtMethodVector_assign" "', argument " "1"" of type '" "std::vector< ExtMethod > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ExtMethod > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ExtMethodVector_assign" "', argument " "2"" of type '" "std::vector< ExtMethod >::size_type""'");
  } 
  arg2 = static_cast< std::vector< ExtMethod >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_ExtMethod,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ExtMethodVector_assign" "', argument " "3"" of type '" "std::vector< ExtMethod >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ExtMethodVector_assign" "', argument " "3"" of type '" "std::vector< ExtMethod >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< ExtMethod >::value_type * >(argp3);
  {
    try {
      (arg1)->assign(arg2,(std::vector< ExtMethod >::value_type const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtMethodVector_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ExtMethod > *arg1 = (std::vector< ExtMethod > *) 0 ;
  std::vector< ExtMethod >::size_type arg2 ;
  std::vector< ExtMethod >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ExtMethod_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtMethodVector_resize" "', argument " "1"" of type '" "std::vector< ExtMethod > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ExtMethod > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ExtMethodVector_resize" "', argument " "2"" of type '" "std::vector< ExtMethod >::size_type""'");
  } 
  arg2 = static_cast< std::vector< ExtMethod >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_ExtMethod,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ExtMethodVector_resize" "', argument " "3"" of type '" "std::vector< ExtMethod >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ExtMethodVector_resize" "', argument " "3"" of type '" "std::vector< ExtMethod >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< ExtMethod >::value_type * >(argp3);
  {
    try {
      (arg1)->resize(arg2,(std::vector< ExtMethod >::value_type const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtMethodVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ExtMethodVector_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_ExtMethodVector_resize__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_ExtMethodVector_resize__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ExtMethodVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ExtMethod >::resize(std::vector< ExtMethod >::size_type)\n"
    "    std::vector< ExtMethod >::resize(std::vector< ExtMethod >::size_type,std::vector< ExtMethod >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ExtMethodVector_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ExtMethod > *arg1 = (std::vector< ExtMethod > *) 0 ;
  std::vector< ExtMethod >::iterator arg2 ;
  std::vector< ExtMethod >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::vector< ExtMethod >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ExtMethod_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtMethodVector_insert" "', argument " "1"" of type '" "std::vector< ExtMethod > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ExtMethod > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ExtMethodVector_insert" "', argument " "2"" of type '" "std::vector< ExtMethod >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< ExtMethod >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< ExtMethod >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ExtMethodVector_insert" "', argument " "2"" of type '" "std::vector< ExtMethod >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_ExtMethod,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ExtMethodVector_insert" "', argument " "3"" of type '" "std::vector< ExtMethod >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ExtMethodVector_insert" "', argument " "3"" of type '" "std::vector< ExtMethod >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< ExtMethod >::value_type * >(argp3);
  {
    try {
      result = std_vector_Sl_ExtMethod_Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(ExtMethod const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ExtMethod >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtMethodVector_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ExtMethod > *arg1 = (std::vector< ExtMethod > *) 0 ;
  std::vector< ExtMethod >::iterator arg2 ;
  std::vector< ExtMethod >::size_type arg3 ;
  std::vector< ExtMethod >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ExtMethod_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtMethodVector_insert" "', argument " "1"" of type '" "std::vector< ExtMethod > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ExtMethod > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ExtMethodVector_insert" "', argument " "2"" of type '" "std::vector< ExtMethod >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< ExtMethod >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< ExtMethod >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ExtMethodVector_insert" "', argument " "2"" of type '" "std::vector< ExtMethod >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ExtMethodVector_insert" "', argument " "3"" of type '" "std::vector< ExtMethod >::size_type""'");
  } 
  arg3 = static_cast< std::vector< ExtMethod >::size_type >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_ExtMethod,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ExtMethodVector_insert" "', argument " "4"" of type '" "std::vector< ExtMethod >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ExtMethodVector_insert" "', argument " "4"" of type '" "std::vector< ExtMethod >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< ExtMethod >::value_type * >(argp4);
  {
    try {
      std_vector_Sl_ExtMethod_Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(ExtMethod const &)*arg4);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtMethodVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ExtMethodVector_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    PyObject *retobj = _wrap_ExtMethodVector_insert__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_ExtMethodVector_insert__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ExtMethodVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ExtMethod >::insert(std::vector< ExtMethod >::iterator,std::vector< ExtMethod >::value_type const &)\n"
    "    std::vector< ExtMethod >::insert(std::vector< ExtMethod >::iterator,std::vector< ExtMethod >::size_type,std::vector< ExtMethod >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ExtMethodVector_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ExtMethod > *arg1 = (std::vector< ExtMethod > *) 0 ;
  std::vector< ExtMethod >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ExtMethodVector_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ExtMethod_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtMethodVector_reserve" "', argument " "1"" of type '" "std::vector< ExtMethod > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ExtMethod > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ExtMethodVector_reserve" "', argument " "2"" of type '" "std::vector< ExtMethod >::size_type""'");
  } 
  arg2 = static_cast< std::vector< ExtMethod >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtMethodVector_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ExtMethod > *arg1 = (std::vector< ExtMethod > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ExtMethod >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ExtMethod_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtMethodVector_capacity" "', argument " "1"" of type '" "std::vector< ExtMethod > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ExtMethod > * >(argp1);
  {
    try {
      result = ((std::vector< ExtMethod > const *)arg1)->capacity();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ExtMethodVector(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ExtMethod > *arg1 = (std::vector< ExtMethod > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_ExtMethod_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ExtMethodVector" "', argument " "1"" of type '" "std::vector< ExtMethod > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ExtMethod > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ExtMethodVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_ExtMethod_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ExtMethodVector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_SetInt_at(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ASCXX_Set< long > *arg1 = (ASCXX_Set< long > *) 0 ;
  unsigned long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  long result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SetInt_at", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ASCXX_SetT_long_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetInt_at" "', argument " "1"" of type '" "ASCXX_Set< long > const *""'"); 
  }
  arg1 = reinterpret_cast< ASCXX_Set< long > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetInt_at" "', argument " "2"" of type '" "unsigned long""'");
  } 
  temp2 = static_cast< unsigned long >(val2);
  arg2 = &temp2;
  {
    try {
      result = (long)((ASCXX_Set< long > const *)arg1)->at((unsigned long const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetInt_length(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ASCXX_Set< long > *arg1 = (ASCXX_Set< long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned long result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ASCXX_SetT_long_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetInt_length" "', argument " "1"" of type '" "ASCXX_Set< long > const *""'"); 
  }
  arg1 = reinterpret_cast< ASCXX_Set< long > * >(argp1);
  {
    try {
      result = (unsigned long)((ASCXX_Set< long > const *)arg1)->length();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SetInt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ASCXX_Set< long > *arg1 = (ASCXX_Set< long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ASCXX_SetT_long_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SetInt" "', argument " "1"" of type '" "ASCXX_Set< long > *""'"); 
  }
  arg1 = reinterpret_cast< ASCXX_Set< long > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SetInt_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ASCXX_SetT_long_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_SetString_at(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ASCXX_Set< SymChar > *arg1 = (ASCXX_Set< SymChar > *) 0 ;
  unsigned long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  SwigValueWrapper< SymChar > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SetString_at", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ASCXX_SetT_SymChar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetString_at" "', argument " "1"" of type '" "ASCXX_Set< SymChar > const *""'"); 
  }
  arg1 = reinterpret_cast< ASCXX_Set< SymChar > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetString_at" "', argument " "2"" of type '" "unsigned long""'");
  } 
  temp2 = static_cast< unsigned long >(val2);
  arg2 = &temp2;
  {
    try {
      result = ((ASCXX_Set< SymChar > const *)arg1)->at((unsigned long const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new SymChar(result)), SWIGTYPE_p_SymChar, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetString_length(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ASCXX_Set< SymChar > *arg1 = (ASCXX_Set< SymChar > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned long result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ASCXX_SetT_SymChar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetString_length" "', argument " "1"" of type '" "ASCXX_Set< SymChar > const *""'"); 
  }
  arg1 = reinterpret_cast< ASCXX_Set< SymChar > * >(argp1);
  {
    try {
      result = (unsigned long)((ASCXX_Set< SymChar > const *)arg1)->length();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SetString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ASCXX_Set< SymChar > *arg1 = (ASCXX_Set< SymChar > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ASCXX_SetT_SymChar_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SetString" "', argument " "1"" of type '" "ASCXX_Set< SymChar > *""'"); 
  }
  arg1 = reinterpret_cast< ASCXX_Set< SymChar > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SetString_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ASCXX_SetT_SymChar_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_DoubleVector_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_iterator" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_vector_Sl_double_Sg__iterator(arg1,arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___nonzero__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_double_Sg____nonzero__((std::vector< double > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___bool__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_double_Sg____bool__((std::vector< double > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___len__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = std_vector_Sl_double_Sg____len__((std::vector< double > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "DoubleVector___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___getslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___getslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector___getslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___setslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___setslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector___setslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_double_Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___setslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___setslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector___setslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DoubleVector___setslice__" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DoubleVector___setslice__" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_double_Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< double,std::allocator< double > > const &)*arg4);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DoubleVector___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    PyObject *retobj = _wrap_DoubleVector___setslice____SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_DoubleVector___setslice____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DoubleVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__setslice__(std::vector< double >::difference_type,std::vector< double >::difference_type)\n"
    "    std::vector< double >::__setslice__(std::vector< double >::difference_type,std::vector< double >::difference_type,std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DoubleVector___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "DoubleVector___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___delslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___delslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector___delslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_double_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___delitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___delitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_double_Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___getitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg____getitem____SWIG_0(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DoubleVector___setitem__" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DoubleVector___setitem__" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_double_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        std_vector_Sl_double_Sg____setitem____SWIG_1(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___delitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        std_vector_Sl_double_Sg____delitem____SWIG_1(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DoubleVector___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_1;
    return _wrap_DoubleVector___delitem____SWIG_1(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_DoubleVector___delitem____SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DoubleVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__delitem__(std::vector< double >::difference_type)\n"
    "    std::vector< double >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DoubleVector___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___getitem__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___getitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  {
    try {
      try {
        result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg____getitem____SWIG_1((std::vector< double > const *)arg1,SWIG_STD_MOVE(arg2));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  (void)swig::container_owner<swig::traits<std::vector< double >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DoubleVector___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_1;
    return _wrap_DoubleVector___getitem____SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_DoubleVector___getitem____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DoubleVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__getitem__(PySliceObject *)\n"
    "    std::vector< double >::__getitem__(std::vector< double >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DoubleVector___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___setitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector___setitem__" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      try {
        std_vector_Sl_double_Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(double const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DoubleVector___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_DoubleVector___setitem____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_2;
    {
      int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_DoubleVector___setitem____SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_DoubleVector___setitem____SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DoubleVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__setitem__(PySliceObject *,std::vector< double,std::allocator< double > > const &)\n"
    "    std::vector< double >::__setitem__(PySliceObject *)\n"
    "    std::vector< double >::__setitem__(std::vector< double >::difference_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DoubleVector_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::value_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_pop" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      try {
        result = (std::vector< double >::value_type)std_vector_Sl_double_Sg__pop(arg1);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "DoubleVector_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_append" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_append" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      std_vector_Sl_double_Sg__append(arg1,(double const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DoubleVector__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (std::vector< double > *)new std::vector< double >();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DoubleVector__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DoubleVector" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DoubleVector" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_empty" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (bool)((std::vector< double > const *)arg1)->empty();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_size" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = ((std::vector< double > const *)arg1)->size();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "DoubleVector_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_swap" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DoubleVector_swap" "', argument " "2"" of type '" "std::vector< double > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DoubleVector_swap" "', argument " "2"" of type '" "std::vector< double > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_begin" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_end" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (arg1)->end();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_rbegin" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_rend" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_clear" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      (arg1)->clear();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< double > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_get_allocator" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = ((std::vector< double > const *)arg1)->get_allocator();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< double >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DoubleVector__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DoubleVector" "', argument " "1"" of type '" "std::vector< double >::size_type""'");
  } 
  arg1 = static_cast< std::vector< double >::size_type >(val1);
  {
    try {
      result = (std::vector< double > *)new std::vector< double >(arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_pop_back" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_resize" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_resize" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< double >::iterator result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_erase" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_double_Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< double >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_erase" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "3"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "3"" of type '" "std::vector< double >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_double_Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DoubleVector_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_DoubleVector_erase__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_DoubleVector_erase__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DoubleVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::erase(std::vector< double >::iterator)\n"
    "    std::vector< double >::erase(std::vector< double >::iterator,std::vector< double >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_DoubleVector__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double >::size_type arg1 ;
  std::vector< double >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  std::vector< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DoubleVector" "', argument " "1"" of type '" "std::vector< double >::size_type""'");
  } 
  arg1 = static_cast< std::vector< double >::size_type >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DoubleVector" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      result = (std::vector< double > *)new std::vector< double >(arg1,(std::vector< double >::value_type const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DoubleVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_DoubleVector", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    PyObject *retobj = _wrap_new_DoubleVector__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 1) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[0], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_new_DoubleVector__SWIG_2(self, argc, argv);
  }
check_2:
  
  if (argc == 1) {
    PyObject *retobj = _wrap_new_DoubleVector__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_new_DoubleVector__SWIG_3(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_DoubleVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::vector()\n"
    "    std::vector< double >::vector(std::vector< double > const &)\n"
    "    std::vector< double >::vector(std::vector< double >::size_type)\n"
    "    std::vector< double >::vector(std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DoubleVector_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "DoubleVector_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_push_back" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_push_back" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->push_back((std::vector< double >::value_type const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_front" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (std::vector< double >::value_type *) &((std::vector< double > const *)arg1)->front();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  (void)swig::container_owner<swig::traits<std::vector< double >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_back" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (std::vector< double >::value_type *) &((std::vector< double > const *)arg1)->back();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  (void)swig::container_owner<swig::traits<std::vector< double >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "DoubleVector_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_assign" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_assign" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector_assign" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      (arg1)->assign(arg2,(std::vector< double >::value_type const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_resize" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_resize" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector_resize" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      (arg1)->resize(arg2,(std::vector< double >::value_type const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DoubleVector_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_DoubleVector_resize__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_DoubleVector_resize__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DoubleVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::resize(std::vector< double >::size_type)\n"
    "    std::vector< double >::resize(std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DoubleVector_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  std::vector< double >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_insert" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector_insert" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      result = std_vector_Sl_double_Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(double const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::size_type arg3 ;
  std::vector< double >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< double >::value_type temp4 ;
  double val4 ;
  int ecode4 = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_insert" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector_insert" "', argument " "3"" of type '" "std::vector< double >::size_type""'");
  } 
  arg3 = static_cast< std::vector< double >::size_type >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DoubleVector_insert" "', argument " "4"" of type '" "std::vector< double >::value_type""'");
  } 
  temp4 = static_cast< std::vector< double >::value_type >(val4);
  arg4 = &temp4;
  {
    try {
      std_vector_Sl_double_Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(double const &)*arg4);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DoubleVector_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    PyObject *retobj = _wrap_DoubleVector_insert__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_DoubleVector_insert__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DoubleVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::insert(std::vector< double >::iterator,std::vector< double >::value_type const &)\n"
    "    std::vector< double >::insert(std::vector< double >::iterator,std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DoubleVector_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "DoubleVector_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_reserve" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_reserve" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_capacity" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = ((std::vector< double > const *)arg1)->capacity();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DoubleVector(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DoubleVector" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DoubleVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *DoubleVector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_VectorDoubleVector_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDoubleVector_iterator" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_vector_Sl_std_vector_Sl_double_Sg__Sg__iterator(arg1,arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDoubleVector___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDoubleVector___nonzero__" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_std_vector_Sl_double_Sg__Sg____nonzero__((std::vector< std::vector< double > > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDoubleVector___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDoubleVector___bool__" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_std_vector_Sl_double_Sg__Sg____bool__((std::vector< std::vector< double > > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDoubleVector___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< double > >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDoubleVector___len__" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    try {
      result = std_vector_Sl_std_vector_Sl_double_Sg__Sg____len__((std::vector< std::vector< double > > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDoubleVector___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::difference_type arg2 ;
  std::vector< std::vector< double > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "VectorDoubleVector___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDoubleVector___getslice__" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorDoubleVector___getslice__" "', argument " "2"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorDoubleVector___getslice__" "', argument " "3"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< double > >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *)std_vector_Sl_std_vector_Sl_double_Sg__Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDoubleVector___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::difference_type arg2 ;
  std::vector< std::vector< double > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDoubleVector___setslice__" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorDoubleVector___setslice__" "', argument " "2"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorDoubleVector___setslice__" "', argument " "3"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< double > >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_std_vector_Sl_double_Sg__Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDoubleVector___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::difference_type arg2 ;
  std::vector< std::vector< double > >::difference_type arg3 ;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDoubleVector___setslice__" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorDoubleVector___setslice__" "', argument " "2"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorDoubleVector___setslice__" "', argument " "3"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< double > >::difference_type >(val3);
  {
    std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *ptr = (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorDoubleVector___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorDoubleVector___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_std_vector_Sl_double_Sg__Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &)*arg4);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDoubleVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VectorDoubleVector___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    PyObject *retobj = _wrap_VectorDoubleVector___setslice____SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_VectorDoubleVector___setslice____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VectorDoubleVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< double > >::__setslice__(std::vector< std::vector< double > >::difference_type,std::vector< std::vector< double > >::difference_type)\n"
    "    std::vector< std::vector< double > >::__setslice__(std::vector< std::vector< double > >::difference_type,std::vector< std::vector< double > >::difference_type,std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorDoubleVector___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::difference_type arg2 ;
  std::vector< std::vector< double > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "VectorDoubleVector___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDoubleVector___delslice__" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorDoubleVector___delslice__" "', argument " "2"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorDoubleVector___delslice__" "', argument " "3"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< double > >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_std_vector_Sl_double_Sg__Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDoubleVector___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDoubleVector___delitem__" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorDoubleVector___delitem__" "', argument " "2"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_std_vector_Sl_double_Sg__Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDoubleVector___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDoubleVector___getitem__" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorDoubleVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        result = (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *)std_vector_Sl_std_vector_Sl_double_Sg__Sg____getitem____SWIG_0(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDoubleVector___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDoubleVector___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorDoubleVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *ptr = (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorDoubleVector___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorDoubleVector___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_std_vector_Sl_double_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDoubleVector___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDoubleVector___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorDoubleVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        std_vector_Sl_std_vector_Sl_double_Sg__Sg____setitem____SWIG_1(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDoubleVector___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDoubleVector___delitem__" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorDoubleVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        std_vector_Sl_std_vector_Sl_double_Sg__Sg____delitem____SWIG_1(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDoubleVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VectorDoubleVector___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_1;
    return _wrap_VectorDoubleVector___delitem____SWIG_1(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_VectorDoubleVector___delitem____SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VectorDoubleVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< double > >::__delitem__(std::vector< std::vector< double > >::difference_type)\n"
    "    std::vector< std::vector< double > >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorDoubleVector___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< std::vector< double > >::value_type *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDoubleVector___getitem__" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorDoubleVector___getitem__" "', argument " "2"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::difference_type >(val2);
  {
    try {
      try {
        result = (std::vector< std::vector< double > >::value_type *) &std_vector_Sl_std_vector_Sl_double_Sg__Sg____getitem____SWIG_1((std::vector< std::vector< double > > const *)arg1,SWIG_STD_MOVE(arg2));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::vector< double > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDoubleVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VectorDoubleVector___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_1;
    return _wrap_VectorDoubleVector___getitem____SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_VectorDoubleVector___getitem____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VectorDoubleVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< double > >::__getitem__(PySliceObject *)\n"
    "    std::vector< std::vector< double > >::__getitem__(std::vector< std::vector< double > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorDoubleVector___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::difference_type arg2 ;
  std::vector< std::vector< double > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDoubleVector___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorDoubleVector___setitem__" "', argument " "2"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::difference_type >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorDoubleVector___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorDoubleVector___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_std_vector_Sl_double_Sg__Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::vector< double,std::allocator< double > > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDoubleVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VectorDoubleVector___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_VectorDoubleVector___setitem____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_2;
    {
      int res = swig::asptr(argv[2], (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_VectorDoubleVector___setitem____SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_VectorDoubleVector___setitem____SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VectorDoubleVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< double > >::__setitem__(PySliceObject *,std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &)\n"
    "    std::vector< std::vector< double > >::__setitem__(PySliceObject *)\n"
    "    std::vector< std::vector< double > >::__setitem__(std::vector< std::vector< double > >::difference_type,std::vector< std::vector< double > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorDoubleVector_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< double > >::value_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDoubleVector_pop" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    try {
      try {
        result = std_vector_Sl_std_vector_Sl_double_Sg__Sg__pop(arg1);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDoubleVector_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "VectorDoubleVector_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDoubleVector_append" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorDoubleVector_append" "', argument " "2"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorDoubleVector_append" "', argument " "2"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      std_vector_Sl_std_vector_Sl_double_Sg__Sg__append(arg1,(std::vector< double,std::allocator< double > > const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorDoubleVector__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorDoubleVector__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double,std::allocator< double > > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< std::vector< double > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *ptr = (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorDoubleVector" "', argument " "1"" of type '" "std::vector< std::vector< double,std::allocator< double > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorDoubleVector" "', argument " "1"" of type '" "std::vector< std::vector< double,std::allocator< double > > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >((std::vector< std::vector< double,std::allocator< double > > > const &)*arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDoubleVector_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDoubleVector_empty" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    try {
      result = (bool)((std::vector< std::vector< double > > const *)arg1)->empty();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDoubleVector_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< double > >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDoubleVector_size" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    try {
      result = ((std::vector< std::vector< double > > const *)arg1)->size();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDoubleVector_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double,std::allocator< double > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "VectorDoubleVector_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDoubleVector_swap" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorDoubleVector_swap" "', argument " "2"" of type '" "std::vector< std::vector< double,std::allocator< double > > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorDoubleVector_swap" "', argument " "2"" of type '" "std::vector< std::vector< double,std::allocator< double > > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< double,std::allocator< double > > > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDoubleVector_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< double > >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDoubleVector_begin" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< double > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDoubleVector_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< double > >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDoubleVector_end" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    try {
      result = (arg1)->end();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< double > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDoubleVector_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< double > >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDoubleVector_rbegin" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< double > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDoubleVector_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< double > >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDoubleVector_rend" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< double > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDoubleVector_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDoubleVector_clear" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    try {
      (arg1)->clear();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDoubleVector_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< std::vector< double,std::allocator< double > > > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDoubleVector_get_allocator" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    try {
      result = ((std::vector< std::vector< double > > const *)arg1)->get_allocator();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< std::vector< double > >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_std__vectorT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorDoubleVector__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< std::vector< double > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorDoubleVector" "', argument " "1"" of type '" "std::vector< std::vector< double > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< double > >::size_type >(val1);
  {
    try {
      result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >(arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDoubleVector_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDoubleVector_pop_back" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDoubleVector_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDoubleVector_resize" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorDoubleVector_resize" "', argument " "2"" of type '" "std::vector< std::vector< double > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDoubleVector_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< std::vector< double > >::iterator result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDoubleVector_erase" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorDoubleVector_erase" "', argument " "2"" of type '" "std::vector< std::vector< double > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorDoubleVector_erase" "', argument " "2"" of type '" "std::vector< std::vector< double > >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_std_vector_Sl_double_Sg__Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< double > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDoubleVector_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::iterator arg2 ;
  std::vector< std::vector< double > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< std::vector< double > >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDoubleVector_erase" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorDoubleVector_erase" "', argument " "2"" of type '" "std::vector< std::vector< double > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorDoubleVector_erase" "', argument " "2"" of type '" "std::vector< std::vector< double > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorDoubleVector_erase" "', argument " "3"" of type '" "std::vector< std::vector< double > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorDoubleVector_erase" "', argument " "3"" of type '" "std::vector< std::vector< double > >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_std_vector_Sl_double_Sg__Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< double > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDoubleVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VectorDoubleVector_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_VectorDoubleVector_erase__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_VectorDoubleVector_erase__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VectorDoubleVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< double > >::erase(std::vector< std::vector< double > >::iterator)\n"
    "    std::vector< std::vector< double > >::erase(std::vector< std::vector< double > >::iterator,std::vector< std::vector< double > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_VectorDoubleVector__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > >::size_type arg1 ;
  std::vector< std::vector< double > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::vector< std::vector< double > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorDoubleVector" "', argument " "1"" of type '" "std::vector< std::vector< double > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< double > >::size_type >(val1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VectorDoubleVector" "', argument " "2"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorDoubleVector" "', argument " "2"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >(arg1,(std::vector< std::vector< double > >::value_type const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorDoubleVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_VectorDoubleVector", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    PyObject *retobj = _wrap_new_VectorDoubleVector__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 1) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[0], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_new_VectorDoubleVector__SWIG_2(self, argc, argv);
  }
check_2:
  
  if (argc == 1) {
    PyObject *retobj = _wrap_new_VectorDoubleVector__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_new_VectorDoubleVector__SWIG_3(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_VectorDoubleVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< double > >::vector()\n"
    "    std::vector< std::vector< double > >::vector(std::vector< std::vector< double,std::allocator< double > > > const &)\n"
    "    std::vector< std::vector< double > >::vector(std::vector< std::vector< double > >::size_type)\n"
    "    std::vector< std::vector< double > >::vector(std::vector< std::vector< double > >::size_type,std::vector< std::vector< double > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorDoubleVector_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "VectorDoubleVector_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDoubleVector_push_back" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorDoubleVector_push_back" "', argument " "2"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorDoubleVector_push_back" "', argument " "2"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->push_back((std::vector< std::vector< double > >::value_type const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDoubleVector_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< double > >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDoubleVector_front" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    try {
      result = (std::vector< std::vector< double > >::value_type *) &((std::vector< std::vector< double > > const *)arg1)->front();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::vector< double > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDoubleVector_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< double > >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDoubleVector_back" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    try {
      result = (std::vector< std::vector< double > >::value_type *) &((std::vector< std::vector< double > > const *)arg1)->back();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::vector< double > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDoubleVector_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::size_type arg2 ;
  std::vector< std::vector< double > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "VectorDoubleVector_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDoubleVector_assign" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorDoubleVector_assign" "', argument " "2"" of type '" "std::vector< std::vector< double > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::size_type >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorDoubleVector_assign" "', argument " "3"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorDoubleVector_assign" "', argument " "3"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->assign(arg2,(std::vector< std::vector< double > >::value_type const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDoubleVector_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::size_type arg2 ;
  std::vector< std::vector< double > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDoubleVector_resize" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorDoubleVector_resize" "', argument " "2"" of type '" "std::vector< std::vector< double > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::size_type >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorDoubleVector_resize" "', argument " "3"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorDoubleVector_resize" "', argument " "3"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->resize(arg2,(std::vector< std::vector< double > >::value_type const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDoubleVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VectorDoubleVector_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_VectorDoubleVector_resize__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_VectorDoubleVector_resize__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VectorDoubleVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< double > >::resize(std::vector< std::vector< double > >::size_type)\n"
    "    std::vector< std::vector< double > >::resize(std::vector< std::vector< double > >::size_type,std::vector< std::vector< double > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorDoubleVector_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::iterator arg2 ;
  std::vector< std::vector< double > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  std::vector< std::vector< double > >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDoubleVector_insert" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorDoubleVector_insert" "', argument " "2"" of type '" "std::vector< std::vector< double > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorDoubleVector_insert" "', argument " "2"" of type '" "std::vector< std::vector< double > >::iterator""'");
    }
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorDoubleVector_insert" "', argument " "3"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorDoubleVector_insert" "', argument " "3"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = std_vector_Sl_std_vector_Sl_double_Sg__Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(std::vector< double,std::allocator< double > > const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< double > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDoubleVector_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::iterator arg2 ;
  std::vector< std::vector< double > >::size_type arg3 ;
  std::vector< std::vector< double > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDoubleVector_insert" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorDoubleVector_insert" "', argument " "2"" of type '" "std::vector< std::vector< double > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorDoubleVector_insert" "', argument " "2"" of type '" "std::vector< std::vector< double > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorDoubleVector_insert" "', argument " "3"" of type '" "std::vector< std::vector< double > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< double > >::size_type >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorDoubleVector_insert" "', argument " "4"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorDoubleVector_insert" "', argument " "4"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      std_vector_Sl_std_vector_Sl_double_Sg__Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< double,std::allocator< double > > const &)*arg4);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDoubleVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VectorDoubleVector_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    PyObject *retobj = _wrap_VectorDoubleVector_insert__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_VectorDoubleVector_insert__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VectorDoubleVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< double > >::insert(std::vector< std::vector< double > >::iterator,std::vector< std::vector< double > >::value_type const &)\n"
    "    std::vector< std::vector< double > >::insert(std::vector< std::vector< double > >::iterator,std::vector< std::vector< double > >::size_type,std::vector< std::vector< double > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorDoubleVector_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "VectorDoubleVector_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDoubleVector_reserve" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorDoubleVector_reserve" "', argument " "2"" of type '" "std::vector< std::vector< double > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDoubleVector_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< double > >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDoubleVector_capacity" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    try {
      result = ((std::vector< std::vector< double > > const *)arg1)->capacity();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VectorDoubleVector(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorDoubleVector" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VectorDoubleVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *VectorDoubleVector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_IntVector_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_iterator" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_vector_Sl_int_Sg__iterator(arg1,arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___nonzero__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_int_Sg____nonzero__((std::vector< int > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___bool__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_int_Sg____bool__((std::vector< int > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___len__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = std_vector_Sl_int_Sg____len__((std::vector< int > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IntVector___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___getslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector___getslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector___getslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< int,std::allocator< int > > *)std_vector_Sl_int_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___setslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector___setslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector___setslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_int_Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  std::vector< int,std::allocator< int > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___setslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector___setslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector___setslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IntVector___setslice__" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IntVector___setslice__" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_int_Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< int,std::allocator< int > > const &)*arg4);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "IntVector___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    PyObject *retobj = _wrap_IntVector___setslice____SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_IntVector___setslice____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'IntVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::__setslice__(std::vector< int >::difference_type,std::vector< int >::difference_type)\n"
    "    std::vector< int >::__setslice__(std::vector< int >::difference_type,std::vector< int >::difference_type,std::vector< int,std::allocator< int > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntVector___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IntVector___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___delslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector___delslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector___delslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_int_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___delitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector___delitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_int_Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___getitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        result = (std::vector< int,std::allocator< int > > *)std_vector_Sl_int_Sg____getitem____SWIG_0(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___setitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IntVector___setitem__" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IntVector___setitem__" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_int_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___setitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        std_vector_Sl_int_Sg____setitem____SWIG_1(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___delitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        std_vector_Sl_int_Sg____delitem____SWIG_1(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "IntVector___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_1;
    return _wrap_IntVector___delitem____SWIG_1(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_IntVector___delitem____SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'IntVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::__delitem__(std::vector< int >::difference_type)\n"
    "    std::vector< int >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntVector___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___getitem__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector___getitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  {
    try {
      try {
        result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg____getitem____SWIG_1((std::vector< int > const *)arg1,SWIG_STD_MOVE(arg2));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  (void)swig::container_owner<swig::traits<std::vector< int >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "IntVector___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_1;
    return _wrap_IntVector___getitem____SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_IntVector___getitem____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'IntVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::__getitem__(PySliceObject *)\n"
    "    std::vector< int >::__getitem__(std::vector< int >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntVector___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___setitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector___setitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector___setitem__" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      try {
        std_vector_Sl_int_Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(int const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "IntVector___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_IntVector___setitem____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_2;
    {
      int res = swig::asptr(argv[2], (std::vector< int,std::allocator< int > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_IntVector___setitem____SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_IntVector___setitem____SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'IntVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::__setitem__(PySliceObject *,std::vector< int,std::allocator< int > > const &)\n"
    "    std::vector< int >::__setitem__(PySliceObject *)\n"
    "    std::vector< int >::__setitem__(std::vector< int >::difference_type,std::vector< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntVector_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::value_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_pop" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      try {
        result = (std::vector< int >::value_type)std_vector_Sl_int_Sg__pop(arg1);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IntVector_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_append" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_append" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      std_vector_Sl_int_Sg__append(arg1,(int const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IntVector__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< int > *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (std::vector< int > *)new std::vector< int >();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IntVector__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< int > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IntVector" "', argument " "1"" of type '" "std::vector< int > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IntVector" "', argument " "1"" of type '" "std::vector< int > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_empty" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = (bool)((std::vector< int > const *)arg1)->empty();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_size" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = ((std::vector< int > const *)arg1)->size();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IntVector_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_swap" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IntVector_swap" "', argument " "2"" of type '" "std::vector< int > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IntVector_swap" "', argument " "2"" of type '" "std::vector< int > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_begin" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_end" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = (arg1)->end();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_rbegin" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_rend" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_clear" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      (arg1)->clear();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< int > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_get_allocator" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = ((std::vector< int > const *)arg1)->get_allocator();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< int >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_int_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IntVector__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< int > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IntVector" "', argument " "1"" of type '" "std::vector< int >::size_type""'");
  } 
  arg1 = static_cast< std::vector< int >::size_type >(val1);
  {
    try {
      result = (std::vector< int > *)new std::vector< int >(arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_pop_back" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_resize" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_resize" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< int >::iterator result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_erase" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_int_Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< int >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_erase" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_erase" "', argument " "3"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_erase" "', argument " "3"" of type '" "std::vector< int >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_int_Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "IntVector_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_IntVector_erase__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_IntVector_erase__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'IntVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::erase(std::vector< int >::iterator)\n"
    "    std::vector< int >::erase(std::vector< int >::iterator,std::vector< int >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_IntVector__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int >::size_type arg1 ;
  std::vector< int >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< int > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IntVector" "', argument " "1"" of type '" "std::vector< int >::size_type""'");
  } 
  arg1 = static_cast< std::vector< int >::size_type >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IntVector" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      result = (std::vector< int > *)new std::vector< int >(arg1,(std::vector< int >::value_type const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IntVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_IntVector", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    PyObject *retobj = _wrap_new_IntVector__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 1) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[0], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_new_IntVector__SWIG_2(self, argc, argv);
  }
check_2:
  
  if (argc == 1) {
    PyObject *retobj = _wrap_new_IntVector__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_new_IntVector__SWIG_3(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_IntVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::vector()\n"
    "    std::vector< int >::vector(std::vector< int > const &)\n"
    "    std::vector< int >::vector(std::vector< int >::size_type)\n"
    "    std::vector< int >::vector(std::vector< int >::size_type,std::vector< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntVector_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IntVector_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_push_back" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_push_back" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_front" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = (std::vector< int >::value_type *) &((std::vector< int > const *)arg1)->front();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  (void)swig::container_owner<swig::traits<std::vector< int >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_back" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = (std::vector< int >::value_type *) &((std::vector< int > const *)arg1)->back();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  (void)swig::container_owner<swig::traits<std::vector< int >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IntVector_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_assign" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_assign" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector_assign" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      (arg1)->assign(arg2,(std::vector< int >::value_type const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_resize" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_resize" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector_resize" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      (arg1)->resize(arg2,(std::vector< int >::value_type const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "IntVector_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_IntVector_resize__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_IntVector_resize__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'IntVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::resize(std::vector< int >::size_type)\n"
    "    std::vector< int >::resize(std::vector< int >::size_type,std::vector< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntVector_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  std::vector< int >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_insert" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector_insert" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      result = std_vector_Sl_int_Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(int const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::size_type arg3 ;
  std::vector< int >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< int >::value_type temp4 ;
  int val4 ;
  int ecode4 = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_insert" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector_insert" "', argument " "3"" of type '" "std::vector< int >::size_type""'");
  } 
  arg3 = static_cast< std::vector< int >::size_type >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IntVector_insert" "', argument " "4"" of type '" "std::vector< int >::value_type""'");
  } 
  temp4 = static_cast< std::vector< int >::value_type >(val4);
  arg4 = &temp4;
  {
    try {
      std_vector_Sl_int_Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(int const &)*arg4);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "IntVector_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    PyObject *retobj = _wrap_IntVector_insert__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_IntVector_insert__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'IntVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::insert(std::vector< int >::iterator,std::vector< int >::value_type const &)\n"
    "    std::vector< int >::insert(std::vector< int >::iterator,std::vector< int >::size_type,std::vector< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntVector_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IntVector_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_reserve" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_reserve" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_capacity" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = ((std::vector< int > const *)arg1)->capacity();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IntVector(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IntVector" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IntVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_int_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *IntVector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_CurveVector_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Curve > *arg1 = (std::vector< Curve > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Curve_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CurveVector_iterator" "', argument " "1"" of type '" "std::vector< Curve > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Curve > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_vector_Sl_Curve_Sg__iterator(arg1,arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CurveVector___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Curve > *arg1 = (std::vector< Curve > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Curve_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CurveVector___nonzero__" "', argument " "1"" of type '" "std::vector< Curve > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Curve > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_Curve_Sg____nonzero__((std::vector< Curve > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CurveVector___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Curve > *arg1 = (std::vector< Curve > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Curve_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CurveVector___bool__" "', argument " "1"" of type '" "std::vector< Curve > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Curve > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_Curve_Sg____bool__((std::vector< Curve > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CurveVector___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Curve > *arg1 = (std::vector< Curve > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Curve >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Curve_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CurveVector___len__" "', argument " "1"" of type '" "std::vector< Curve > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Curve > * >(argp1);
  {
    try {
      result = std_vector_Sl_Curve_Sg____len__((std::vector< Curve > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CurveVector___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Curve > *arg1 = (std::vector< Curve > *) 0 ;
  std::vector< Curve >::difference_type arg2 ;
  std::vector< Curve >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< Curve,std::allocator< Curve > > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "CurveVector___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Curve_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CurveVector___getslice__" "', argument " "1"" of type '" "std::vector< Curve > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Curve > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CurveVector___getslice__" "', argument " "2"" of type '" "std::vector< Curve >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Curve >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CurveVector___getslice__" "', argument " "3"" of type '" "std::vector< Curve >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Curve >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< Curve,std::allocator< Curve > > *)std_vector_Sl_Curve_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Curve_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CurveVector___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Curve > *arg1 = (std::vector< Curve > *) 0 ;
  std::vector< Curve >::difference_type arg2 ;
  std::vector< Curve >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Curve_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CurveVector___setslice__" "', argument " "1"" of type '" "std::vector< Curve > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Curve > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CurveVector___setslice__" "', argument " "2"" of type '" "std::vector< Curve >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Curve >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CurveVector___setslice__" "', argument " "3"" of type '" "std::vector< Curve >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Curve >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_Curve_Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CurveVector___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Curve > *arg1 = (std::vector< Curve > *) 0 ;
  std::vector< Curve >::difference_type arg2 ;
  std::vector< Curve >::difference_type arg3 ;
  std::vector< Curve,std::allocator< Curve > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Curve_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CurveVector___setslice__" "', argument " "1"" of type '" "std::vector< Curve > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Curve > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CurveVector___setslice__" "', argument " "2"" of type '" "std::vector< Curve >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Curve >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CurveVector___setslice__" "', argument " "3"" of type '" "std::vector< Curve >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Curve >::difference_type >(val3);
  {
    std::vector< Curve,std::allocator< Curve > > *ptr = (std::vector< Curve,std::allocator< Curve > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CurveVector___setslice__" "', argument " "4"" of type '" "std::vector< Curve,std::allocator< Curve > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CurveVector___setslice__" "', argument " "4"" of type '" "std::vector< Curve,std::allocator< Curve > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_Curve_Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< Curve,std::allocator< Curve > > const &)*arg4);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CurveVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "CurveVector___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    PyObject *retobj = _wrap_CurveVector___setslice____SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_CurveVector___setslice____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'CurveVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Curve >::__setslice__(std::vector< Curve >::difference_type,std::vector< Curve >::difference_type)\n"
    "    std::vector< Curve >::__setslice__(std::vector< Curve >::difference_type,std::vector< Curve >::difference_type,std::vector< Curve,std::allocator< Curve > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CurveVector___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Curve > *arg1 = (std::vector< Curve > *) 0 ;
  std::vector< Curve >::difference_type arg2 ;
  std::vector< Curve >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "CurveVector___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Curve_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CurveVector___delslice__" "', argument " "1"" of type '" "std::vector< Curve > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Curve > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CurveVector___delslice__" "', argument " "2"" of type '" "std::vector< Curve >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Curve >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CurveVector___delslice__" "', argument " "3"" of type '" "std::vector< Curve >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Curve >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_Curve_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CurveVector___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Curve > *arg1 = (std::vector< Curve > *) 0 ;
  std::vector< Curve >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Curve_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CurveVector___delitem__" "', argument " "1"" of type '" "std::vector< Curve > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Curve > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CurveVector___delitem__" "', argument " "2"" of type '" "std::vector< Curve >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Curve >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_Curve_Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CurveVector___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Curve > *arg1 = (std::vector< Curve > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< Curve,std::allocator< Curve > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Curve_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CurveVector___getitem__" "', argument " "1"" of type '" "std::vector< Curve > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Curve > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CurveVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        result = (std::vector< Curve,std::allocator< Curve > > *)std_vector_Sl_Curve_Sg____getitem____SWIG_0(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Curve_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CurveVector___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Curve > *arg1 = (std::vector< Curve > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< Curve,std::allocator< Curve > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Curve_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CurveVector___setitem__" "', argument " "1"" of type '" "std::vector< Curve > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Curve > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CurveVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector< Curve,std::allocator< Curve > > *ptr = (std::vector< Curve,std::allocator< Curve > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CurveVector___setitem__" "', argument " "3"" of type '" "std::vector< Curve,std::allocator< Curve > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CurveVector___setitem__" "', argument " "3"" of type '" "std::vector< Curve,std::allocator< Curve > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_Curve_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< Curve,std::allocator< Curve > > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CurveVector___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Curve > *arg1 = (std::vector< Curve > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Curve_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CurveVector___setitem__" "', argument " "1"" of type '" "std::vector< Curve > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Curve > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CurveVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        std_vector_Sl_Curve_Sg____setitem____SWIG_1(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CurveVector___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Curve > *arg1 = (std::vector< Curve > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Curve_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CurveVector___delitem__" "', argument " "1"" of type '" "std::vector< Curve > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Curve > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CurveVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        std_vector_Sl_Curve_Sg____delitem____SWIG_1(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CurveVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "CurveVector___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_1;
    return _wrap_CurveVector___delitem____SWIG_1(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_CurveVector___delitem____SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'CurveVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Curve >::__delitem__(std::vector< Curve >::difference_type)\n"
    "    std::vector< Curve >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CurveVector___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Curve > *arg1 = (std::vector< Curve > *) 0 ;
  std::vector< Curve >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< Curve >::value_type *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Curve_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CurveVector___getitem__" "', argument " "1"" of type '" "std::vector< Curve > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Curve > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CurveVector___getitem__" "', argument " "2"" of type '" "std::vector< Curve >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Curve >::difference_type >(val2);
  {
    try {
      try {
        result = (std::vector< Curve >::value_type *) &std_vector_Sl_Curve_Sg____getitem____SWIG_1((std::vector< Curve > const *)arg1,SWIG_STD_MOVE(arg2));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Curve, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Curve >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CurveVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "CurveVector___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_1;
    return _wrap_CurveVector___getitem____SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_CurveVector___getitem____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'CurveVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Curve >::__getitem__(PySliceObject *)\n"
    "    std::vector< Curve >::__getitem__(std::vector< Curve >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CurveVector___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Curve > *arg1 = (std::vector< Curve > *) 0 ;
  std::vector< Curve >::difference_type arg2 ;
  std::vector< Curve >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Curve_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CurveVector___setitem__" "', argument " "1"" of type '" "std::vector< Curve > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Curve > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CurveVector___setitem__" "', argument " "2"" of type '" "std::vector< Curve >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Curve >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Curve,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CurveVector___setitem__" "', argument " "3"" of type '" "std::vector< Curve >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CurveVector___setitem__" "', argument " "3"" of type '" "std::vector< Curve >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Curve >::value_type * >(argp3);
  {
    try {
      try {
        std_vector_Sl_Curve_Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(Curve const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CurveVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "CurveVector___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_CurveVector___setitem____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_2;
    {
      int res = swig::asptr(argv[2], (std::vector< Curve,std::allocator< Curve > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_CurveVector___setitem____SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_CurveVector___setitem____SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'CurveVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Curve >::__setitem__(PySliceObject *,std::vector< Curve,std::allocator< Curve > > const &)\n"
    "    std::vector< Curve >::__setitem__(PySliceObject *)\n"
    "    std::vector< Curve >::__setitem__(std::vector< Curve >::difference_type,std::vector< Curve >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CurveVector_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Curve > *arg1 = (std::vector< Curve > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Curve >::value_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Curve_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CurveVector_pop" "', argument " "1"" of type '" "std::vector< Curve > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Curve > * >(argp1);
  {
    try {
      try {
        result = std_vector_Sl_Curve_Sg__pop(arg1);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< Curve >::value_type(result)), SWIGTYPE_p_Curve, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CurveVector_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Curve > *arg1 = (std::vector< Curve > *) 0 ;
  std::vector< Curve >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "CurveVector_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Curve_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CurveVector_append" "', argument " "1"" of type '" "std::vector< Curve > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Curve > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Curve,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CurveVector_append" "', argument " "2"" of type '" "std::vector< Curve >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CurveVector_append" "', argument " "2"" of type '" "std::vector< Curve >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Curve >::value_type * >(argp2);
  {
    try {
      std_vector_Sl_Curve_Sg__append(arg1,(Curve const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CurveVector__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< Curve > *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (std::vector< Curve > *)new std::vector< Curve >();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Curve_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CurveVector__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Curve > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< Curve > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< Curve,std::allocator< Curve > > *ptr = (std::vector< Curve,std::allocator< Curve > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CurveVector" "', argument " "1"" of type '" "std::vector< Curve > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CurveVector" "', argument " "1"" of type '" "std::vector< Curve > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< Curve > *)new std::vector< Curve >((std::vector< Curve > const &)*arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Curve_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CurveVector_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Curve > *arg1 = (std::vector< Curve > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Curve_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CurveVector_empty" "', argument " "1"" of type '" "std::vector< Curve > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Curve > * >(argp1);
  {
    try {
      result = (bool)((std::vector< Curve > const *)arg1)->empty();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CurveVector_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Curve > *arg1 = (std::vector< Curve > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Curve >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Curve_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CurveVector_size" "', argument " "1"" of type '" "std::vector< Curve > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Curve > * >(argp1);
  {
    try {
      result = ((std::vector< Curve > const *)arg1)->size();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CurveVector_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Curve > *arg1 = (std::vector< Curve > *) 0 ;
  std::vector< Curve > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "CurveVector_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Curve_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CurveVector_swap" "', argument " "1"" of type '" "std::vector< Curve > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Curve > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_Curve_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CurveVector_swap" "', argument " "2"" of type '" "std::vector< Curve > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CurveVector_swap" "', argument " "2"" of type '" "std::vector< Curve > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Curve > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CurveVector_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Curve > *arg1 = (std::vector< Curve > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Curve >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Curve_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CurveVector_begin" "', argument " "1"" of type '" "std::vector< Curve > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Curve > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Curve >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CurveVector_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Curve > *arg1 = (std::vector< Curve > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Curve >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Curve_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CurveVector_end" "', argument " "1"" of type '" "std::vector< Curve > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Curve > * >(argp1);
  {
    try {
      result = (arg1)->end();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Curve >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CurveVector_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Curve > *arg1 = (std::vector< Curve > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Curve >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Curve_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CurveVector_rbegin" "', argument " "1"" of type '" "std::vector< Curve > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Curve > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Curve >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CurveVector_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Curve > *arg1 = (std::vector< Curve > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Curve >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Curve_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CurveVector_rend" "', argument " "1"" of type '" "std::vector< Curve > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Curve > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Curve >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CurveVector_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Curve > *arg1 = (std::vector< Curve > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Curve_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CurveVector_clear" "', argument " "1"" of type '" "std::vector< Curve > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Curve > * >(argp1);
  {
    try {
      (arg1)->clear();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CurveVector_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Curve > *arg1 = (std::vector< Curve > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< Curve > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Curve_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CurveVector_get_allocator" "', argument " "1"" of type '" "std::vector< Curve > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Curve > * >(argp1);
  {
    try {
      result = ((std::vector< Curve > const *)arg1)->get_allocator();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< Curve >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_Curve_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CurveVector_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Curve > *arg1 = (std::vector< Curve > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Curve_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CurveVector_pop_back" "', argument " "1"" of type '" "std::vector< Curve > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Curve > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CurveVector_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Curve > *arg1 = (std::vector< Curve > *) 0 ;
  std::vector< Curve >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< Curve >::iterator result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Curve_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CurveVector_erase" "', argument " "1"" of type '" "std::vector< Curve > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Curve > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CurveVector_erase" "', argument " "2"" of type '" "std::vector< Curve >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Curve >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Curve >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CurveVector_erase" "', argument " "2"" of type '" "std::vector< Curve >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_Curve_Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Curve >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CurveVector_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Curve > *arg1 = (std::vector< Curve > *) 0 ;
  std::vector< Curve >::iterator arg2 ;
  std::vector< Curve >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< Curve >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Curve_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CurveVector_erase" "', argument " "1"" of type '" "std::vector< Curve > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Curve > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CurveVector_erase" "', argument " "2"" of type '" "std::vector< Curve >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Curve >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Curve >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CurveVector_erase" "', argument " "2"" of type '" "std::vector< Curve >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CurveVector_erase" "', argument " "3"" of type '" "std::vector< Curve >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Curve >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Curve >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CurveVector_erase" "', argument " "3"" of type '" "std::vector< Curve >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_Curve_Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Curve >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CurveVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "CurveVector_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_CurveVector_erase__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_CurveVector_erase__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'CurveVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Curve >::erase(std::vector< Curve >::iterator)\n"
    "    std::vector< Curve >::erase(std::vector< Curve >::iterator,std::vector< Curve >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_CurveVector__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Curve >::size_type arg1 ;
  std::vector< Curve >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< Curve > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CurveVector" "', argument " "1"" of type '" "std::vector< Curve >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Curve >::size_type >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Curve,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_CurveVector" "', argument " "2"" of type '" "std::vector< Curve >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CurveVector" "', argument " "2"" of type '" "std::vector< Curve >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Curve >::value_type * >(argp2);
  {
    try {
      result = (std::vector< Curve > *)new std::vector< Curve >(arg1,(std::vector< Curve >::value_type const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Curve_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CurveVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_CurveVector", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    PyObject *retobj = _wrap_new_CurveVector__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 1) {
    PyObject *retobj = _wrap_new_CurveVector__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_new_CurveVector__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_CurveVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Curve >::vector()\n"
    "    std::vector< Curve >::vector(std::vector< Curve > const &)\n"
    "    std::vector< Curve >::vector(std::vector< Curve >::size_type,std::vector< Curve >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CurveVector_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Curve > *arg1 = (std::vector< Curve > *) 0 ;
  std::vector< Curve >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "CurveVector_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Curve_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CurveVector_push_back" "', argument " "1"" of type '" "std::vector< Curve > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Curve > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Curve,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CurveVector_push_back" "', argument " "2"" of type '" "std::vector< Curve >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CurveVector_push_back" "', argument " "2"" of type '" "std::vector< Curve >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Curve >::value_type * >(argp2);
  {
    try {
      (arg1)->push_back((std::vector< Curve >::value_type const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CurveVector_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Curve > *arg1 = (std::vector< Curve > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Curve >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Curve_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CurveVector_front" "', argument " "1"" of type '" "std::vector< Curve > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Curve > * >(argp1);
  {
    try {
      result = (std::vector< Curve >::value_type *) &((std::vector< Curve > const *)arg1)->front();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Curve, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Curve >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CurveVector_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Curve > *arg1 = (std::vector< Curve > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Curve >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Curve_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CurveVector_back" "', argument " "1"" of type '" "std::vector< Curve > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Curve > * >(argp1);
  {
    try {
      result = (std::vector< Curve >::value_type *) &((std::vector< Curve > const *)arg1)->back();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Curve, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Curve >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CurveVector_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Curve > *arg1 = (std::vector< Curve > *) 0 ;
  std::vector< Curve >::size_type arg2 ;
  std::vector< Curve >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "CurveVector_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Curve_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CurveVector_assign" "', argument " "1"" of type '" "std::vector< Curve > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Curve > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CurveVector_assign" "', argument " "2"" of type '" "std::vector< Curve >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Curve >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Curve,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CurveVector_assign" "', argument " "3"" of type '" "std::vector< Curve >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CurveVector_assign" "', argument " "3"" of type '" "std::vector< Curve >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Curve >::value_type * >(argp3);
  {
    try {
      (arg1)->assign(arg2,(std::vector< Curve >::value_type const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CurveVector_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Curve > *arg1 = (std::vector< Curve > *) 0 ;
  std::vector< Curve >::iterator arg2 ;
  std::vector< Curve >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::vector< Curve >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Curve_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CurveVector_insert" "', argument " "1"" of type '" "std::vector< Curve > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Curve > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CurveVector_insert" "', argument " "2"" of type '" "std::vector< Curve >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Curve >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Curve >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CurveVector_insert" "', argument " "2"" of type '" "std::vector< Curve >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Curve,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CurveVector_insert" "', argument " "3"" of type '" "std::vector< Curve >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CurveVector_insert" "', argument " "3"" of type '" "std::vector< Curve >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Curve >::value_type * >(argp3);
  {
    try {
      result = std_vector_Sl_Curve_Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(Curve const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Curve >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CurveVector_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Curve > *arg1 = (std::vector< Curve > *) 0 ;
  std::vector< Curve >::iterator arg2 ;
  std::vector< Curve >::size_type arg3 ;
  std::vector< Curve >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Curve_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CurveVector_insert" "', argument " "1"" of type '" "std::vector< Curve > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Curve > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CurveVector_insert" "', argument " "2"" of type '" "std::vector< Curve >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Curve >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Curve >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CurveVector_insert" "', argument " "2"" of type '" "std::vector< Curve >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CurveVector_insert" "', argument " "3"" of type '" "std::vector< Curve >::size_type""'");
  } 
  arg3 = static_cast< std::vector< Curve >::size_type >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_Curve,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CurveVector_insert" "', argument " "4"" of type '" "std::vector< Curve >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CurveVector_insert" "', argument " "4"" of type '" "std::vector< Curve >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< Curve >::value_type * >(argp4);
  {
    try {
      std_vector_Sl_Curve_Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(Curve const &)*arg4);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CurveVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "CurveVector_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    PyObject *retobj = _wrap_CurveVector_insert__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_CurveVector_insert__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'CurveVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Curve >::insert(std::vector< Curve >::iterator,std::vector< Curve >::value_type const &)\n"
    "    std::vector< Curve >::insert(std::vector< Curve >::iterator,std::vector< Curve >::size_type,std::vector< Curve >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CurveVector_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Curve > *arg1 = (std::vector< Curve > *) 0 ;
  std::vector< Curve >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "CurveVector_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Curve_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CurveVector_reserve" "', argument " "1"" of type '" "std::vector< Curve > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Curve > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CurveVector_reserve" "', argument " "2"" of type '" "std::vector< Curve >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Curve >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CurveVector_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Curve > *arg1 = (std::vector< Curve > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Curve >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Curve_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CurveVector_capacity" "', argument " "1"" of type '" "std::vector< Curve > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Curve > * >(argp1);
  {
    try {
      result = ((std::vector< Curve > const *)arg1)->capacity();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CurveVector(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Curve > *arg1 = (std::vector< Curve > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Curve_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CurveVector" "', argument " "1"" of type '" "std::vector< Curve > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Curve > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CurveVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_Curve_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *CurveVector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_StringVector_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_iterator" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_vector_Sl_std_string_Sg__iterator(arg1,arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___nonzero__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_std_string_Sg____nonzero__((std::vector< std::string > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___bool__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_std_string_Sg____bool__((std::vector< std::string > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___len__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = std_vector_Sl_std_string_Sg____len__((std::vector< std::string > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "StringVector___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___getslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector___getslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringVector___getslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< std::string,std::allocator< std::string > > *)std_vector_Sl_std_string_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___setslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector___setslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringVector___setslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_std_string_Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  std::vector< std::string,std::allocator< std::string > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___setslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector___setslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringVector___setslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "StringVector___setslice__" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector___setslice__" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_std_string_Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< std::string,std::allocator< std::string > > const &)*arg4);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "StringVector___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    PyObject *retobj = _wrap_StringVector___setslice____SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_StringVector___setslice____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'StringVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::__setslice__(std::vector< std::string >::difference_type,std::vector< std::string >::difference_type)\n"
    "    std::vector< std::string >::__setslice__(std::vector< std::string >::difference_type,std::vector< std::string >::difference_type,std::vector< std::string,std::allocator< std::string > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringVector___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "StringVector___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___delslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector___delslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringVector___delslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_std_string_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___delitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector___delitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_std_string_Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___getitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        result = (std::vector< std::string,std::allocator< std::string > > *)std_vector_Sl_std_string_Sg____getitem____SWIG_0(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___setitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StringVector___setitem__" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector___setitem__" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_std_string_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___setitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        std_vector_Sl_std_string_Sg____setitem____SWIG_1(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___delitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        std_vector_Sl_std_string_Sg____delitem____SWIG_1(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "StringVector___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_1;
    return _wrap_StringVector___delitem____SWIG_1(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_StringVector___delitem____SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'StringVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::__delitem__(std::vector< std::string >::difference_type)\n"
    "    std::vector< std::string >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringVector___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___getitem__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector___getitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  {
    try {
      try {
        result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg____getitem____SWIG_1((std::vector< std::string > const *)arg1,SWIG_STD_MOVE(arg2));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::string >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "StringVector___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_1;
    return _wrap_StringVector___getitem____SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_StringVector___getitem____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'StringVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::__getitem__(PySliceObject *)\n"
    "    std::vector< std::string >::__getitem__(std::vector< std::string >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringVector___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___setitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector___setitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StringVector___setitem__" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector___setitem__" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_std_string_Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::string const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "StringVector___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_StringVector___setitem____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_2;
    {
      int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_StringVector___setitem____SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_StringVector___setitem____SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'StringVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::__setitem__(PySliceObject *,std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    std::vector< std::string >::__setitem__(PySliceObject *)\n"
    "    std::vector< std::string >::__setitem__(std::vector< std::string >::difference_type,std::vector< std::string >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringVector_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string >::value_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_pop" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      try {
        result = std_vector_Sl_std_string_Sg__pop(arg1);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "StringVector_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_append" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringVector_append" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector_append" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      std_vector_Sl_std_string_Sg__append(arg1,(std::string const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StringVector__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< std::string > *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StringVector__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< std::string > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StringVector" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StringVector" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_empty" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (bool)((std::vector< std::string > const *)arg1)->empty();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_size" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = ((std::vector< std::string > const *)arg1)->size();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "StringVector_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_swap" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_std__string_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringVector_swap" "', argument " "2"" of type '" "std::vector< std::string > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector_swap" "', argument " "2"" of type '" "std::vector< std::string > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_begin" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_end" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (arg1)->end();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_rbegin" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_rend" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_clear" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      (arg1)->clear();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< std::string > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_get_allocator" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = ((std::vector< std::string > const *)arg1)->get_allocator();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< std::string >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_std__string_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StringVector__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StringVector" "', argument " "1"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::string >::size_type >(val1);
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_pop_back" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_resize" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector_resize" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< std::string >::iterator result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_erase" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_std_string_Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< std::string >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_erase" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_erase" "', argument " "3"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_erase" "', argument " "3"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_std_string_Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "StringVector_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_StringVector_erase__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_StringVector_erase__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'StringVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::erase(std::vector< std::string >::iterator)\n"
    "    std::vector< std::string >::erase(std::vector< std::string >::iterator,std::vector< std::string >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_StringVector__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::vector< std::string > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StringVector" "', argument " "1"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::string >::size_type >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_StringVector" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StringVector" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >(arg1,(std::vector< std::string >::value_type const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StringVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_StringVector", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    PyObject *retobj = _wrap_new_StringVector__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 1) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[0], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_new_StringVector__SWIG_2(self, argc, argv);
  }
check_2:
  
  if (argc == 1) {
    PyObject *retobj = _wrap_new_StringVector__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_new_StringVector__SWIG_3(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_StringVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::vector()\n"
    "    std::vector< std::string >::vector(std::vector< std::string > const &)\n"
    "    std::vector< std::string >::vector(std::vector< std::string >::size_type)\n"
    "    std::vector< std::string >::vector(std::vector< std::string >::size_type,std::vector< std::string >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringVector_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "StringVector_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_push_back" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringVector_push_back" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector_push_back" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_front" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (std::vector< std::string >::value_type *) &((std::vector< std::string > const *)arg1)->front();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::string >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_back" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (std::vector< std::string >::value_type *) &((std::vector< std::string > const *)arg1)->back();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::string >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "StringVector_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_assign" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector_assign" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StringVector_assign" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector_assign" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->assign(arg2,(std::vector< std::string >::value_type const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_resize" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector_resize" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StringVector_resize" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector_resize" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->resize(arg2,(std::vector< std::string >::value_type const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "StringVector_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_StringVector_resize__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_StringVector_resize__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'StringVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::resize(std::vector< std::string >::size_type)\n"
    "    std::vector< std::string >::resize(std::vector< std::string >::size_type,std::vector< std::string >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringVector_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  std::vector< std::string >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_insert" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StringVector_insert" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector_insert" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = std_vector_Sl_std_string_Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(std::string const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::size_type arg3 ;
  std::vector< std::string >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_insert" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringVector_insert" "', argument " "3"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::size_type >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "StringVector_insert" "', argument " "4"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector_insert" "', argument " "4"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      std_vector_Sl_std_string_Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::string const &)*arg4);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "StringVector_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    PyObject *retobj = _wrap_StringVector_insert__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_StringVector_insert__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'StringVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::insert(std::vector< std::string >::iterator,std::vector< std::string >::value_type const &)\n"
    "    std::vector< std::string >::insert(std::vector< std::string >::iterator,std::vector< std::string >::size_type,std::vector< std::string >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringVector_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "StringVector_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_reserve" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector_reserve" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_capacity" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = ((std::vector< std::string > const *)arg1)->capacity();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_StringVector(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StringVector" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StringVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__string_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *StringVector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_IntStringMap__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::less< int > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::map< int,std::string > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__lessT_int_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IntStringMap" "', argument " "1"" of type '" "std::less< int > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IntStringMap" "', argument " "1"" of type '" "std::less< int > const &""'"); 
  }
  arg1 = reinterpret_cast< std::less< int > * >(argp1);
  {
    try {
      result = (std::map< int,std::string > *)new std::map< int,std::string >((std::less< int > const &)*arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_int_std__string_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntStringMap_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntStringMap_iterator" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_map_Sl_int_Sc_std_string_Sg__iterator(arg1,arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntStringMap___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntStringMap___nonzero__" "', argument " "1"" of type '" "std::map< int,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  {
    try {
      result = (bool)std_map_Sl_int_Sc_std_string_Sg____nonzero__((std::map< int,std::string > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntStringMap___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntStringMap___bool__" "', argument " "1"" of type '" "std::map< int,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  {
    try {
      result = (bool)std_map_Sl_int_Sc_std_string_Sg____bool__((std::map< int,std::string > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntStringMap___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< int,std::string >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntStringMap___len__" "', argument " "1"" of type '" "std::map< int,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  {
    try {
      result = std_map_Sl_int_Sc_std_string_Sg____len__((std::map< int,std::string > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntStringMap___getitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  std::map< int,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::map< int,std::string >::key_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::map< int,std::string >::mapped_type *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IntStringMap___getitem__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntStringMap___getitem__" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntStringMap___getitem__" "', argument " "2"" of type '" "std::map< int,std::string >::key_type""'");
  } 
  temp2 = static_cast< std::map< int,std::string >::key_type >(val2);
  arg2 = &temp2;
  {
    try {
      try {
        result = (std::map< int,std::string >::mapped_type *) &std_map_Sl_int_Sc_std_string_Sg____getitem__(arg1,(int const &)*arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntStringMap___delitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  std::map< int,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::map< int,std::string >::key_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IntStringMap___delitem__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntStringMap___delitem__" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntStringMap___delitem__" "', argument " "2"" of type '" "std::map< int,std::string >::key_type""'");
  } 
  temp2 = static_cast< std::map< int,std::string >::key_type >(val2);
  arg2 = &temp2;
  {
    try {
      try {
        std_map_Sl_int_Sc_std_string_Sg____delitem__(arg1,(int const &)*arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntStringMap_has_key(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  std::map< int,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::map< int,std::string >::key_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IntStringMap_has_key", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntStringMap_has_key" "', argument " "1"" of type '" "std::map< int,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntStringMap_has_key" "', argument " "2"" of type '" "std::map< int,std::string >::key_type""'");
  } 
  temp2 = static_cast< std::map< int,std::string >::key_type >(val2);
  arg2 = &temp2;
  {
    try {
      result = (bool)std_map_Sl_int_Sc_std_string_Sg__has_key((std::map< int,std::string > const *)arg1,(int const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntStringMap_keys(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntStringMap_keys" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  {
    try {
      result = (PyObject *)std_map_Sl_int_Sc_std_string_Sg__keys(arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntStringMap_values(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntStringMap_values" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  {
    try {
      result = (PyObject *)std_map_Sl_int_Sc_std_string_Sg__values(arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntStringMap_items(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntStringMap_items" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  {
    try {
      result = (PyObject *)std_map_Sl_int_Sc_std_string_Sg__items(arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntStringMap___contains__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  std::map< int,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::map< int,std::string >::key_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IntStringMap___contains__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntStringMap___contains__" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntStringMap___contains__" "', argument " "2"" of type '" "std::map< int,std::string >::key_type""'");
  } 
  temp2 = static_cast< std::map< int,std::string >::key_type >(val2);
  arg2 = &temp2;
  {
    try {
      result = (bool)std_map_Sl_int_Sc_std_string_Sg____contains__(arg1,(int const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntStringMap_key_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntStringMap_key_iterator" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_map_Sl_int_Sc_std_string_Sg__key_iterator(arg1,arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntStringMap_value_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntStringMap_value_iterator" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_map_Sl_int_Sc_std_string_Sg__value_iterator(arg1,arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntStringMap___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  std::map< int,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::map< int,std::string >::key_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntStringMap___setitem__" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntStringMap___setitem__" "', argument " "2"" of type '" "std::map< int,std::string >::key_type""'");
  } 
  temp2 = static_cast< std::map< int,std::string >::key_type >(val2);
  arg2 = &temp2;
  {
    try {
      std_map_Sl_int_Sc_std_string_Sg____setitem____SWIG_0(arg1,(int const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntStringMap___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  std::map< int,std::string >::key_type *arg2 = 0 ;
  std::map< int,std::string >::mapped_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::map< int,std::string >::key_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntStringMap___setitem__" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntStringMap___setitem__" "', argument " "2"" of type '" "std::map< int,std::string >::key_type""'");
  } 
  temp2 = static_cast< std::map< int,std::string >::key_type >(val2);
  arg2 = &temp2;
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IntStringMap___setitem__" "', argument " "3"" of type '" "std::map< int,std::string >::mapped_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IntStringMap___setitem__" "', argument " "3"" of type '" "std::map< int,std::string >::mapped_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_map_Sl_int_Sc_std_string_Sg____setitem____SWIG_1(arg1,(int const &)*arg2,(std::string const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntStringMap___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "IntStringMap___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_IntStringMap___setitem____SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_IntStringMap___setitem____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'IntStringMap___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::map< int,std::string >::__setitem__(std::map< int,std::string >::key_type const &)\n"
    "    std::map< int,std::string >::__setitem__(std::map< int,std::string >::key_type const &,std::map< int,std::string >::mapped_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntStringMap_asdict(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntStringMap_asdict" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  {
    try {
      result = (PyObject *)std_map_Sl_int_Sc_std_string_Sg__asdict(arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IntStringMap__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (std::map< int,std::string > *)new std::map< int,std::string >();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_int_std__string_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IntStringMap__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::map< int,std::string > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > *ptr = (std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IntStringMap" "', argument " "1"" of type '" "std::map< int,std::string > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IntStringMap" "', argument " "1"" of type '" "std::map< int,std::string > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::map< int,std::string > *)new std::map< int,std::string >((std::map< int,std::string > const &)*arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_int_std__string_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IntStringMap(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_IntStringMap", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    PyObject *retobj = _wrap_new_IntStringMap__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__lessT_int_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_new_IntStringMap__SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 1) {
    PyObject *retobj = _wrap_new_IntStringMap__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_IntStringMap'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::map< int,std::string >::map(std::less< int > const &)\n"
    "    std::map< int,std::string >::map()\n"
    "    std::map< int,std::string >::map(std::map< int,std::string > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntStringMap_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntStringMap_empty" "', argument " "1"" of type '" "std::map< int,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  {
    try {
      result = (bool)((std::map< int,std::string > const *)arg1)->empty();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntStringMap_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< int,std::string >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntStringMap_size" "', argument " "1"" of type '" "std::map< int,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  {
    try {
      result = ((std::map< int,std::string > const *)arg1)->size();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntStringMap_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  std::map< int,std::string > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IntStringMap_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntStringMap_swap" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__mapT_int_std__string_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IntStringMap_swap" "', argument " "2"" of type '" "std::map< int,std::string > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IntStringMap_swap" "', argument " "2"" of type '" "std::map< int,std::string > &""'"); 
  }
  arg2 = reinterpret_cast< std::map< int,std::string > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntStringMap_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< int,std::string >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntStringMap_begin" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< int,std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntStringMap_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< int,std::string >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntStringMap_end" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  {
    try {
      result = (arg1)->end();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< int,std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntStringMap_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< int,std::string >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntStringMap_rbegin" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< int,std::string >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntStringMap_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< int,std::string >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntStringMap_rend" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< int,std::string >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntStringMap_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntStringMap_clear" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  {
    try {
      (arg1)->clear();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntStringMap_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< std::pair< int const,std::string > > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntStringMap_get_allocator" "', argument " "1"" of type '" "std::map< int,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  {
    try {
      result = ((std::map< int,std::string > const *)arg1)->get_allocator();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::map< int,std::string >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_std__pairT_int_const_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntStringMap_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  std::map< int,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::map< int,std::string >::key_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  std::map< int,std::string >::size_type result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntStringMap_erase" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntStringMap_erase" "', argument " "2"" of type '" "std::map< int,std::string >::key_type""'");
  } 
  temp2 = static_cast< std::map< int,std::string >::key_type >(val2);
  arg2 = &temp2;
  {
    try {
      result = (arg1)->erase((std::map< int,std::string >::key_type const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntStringMap_count(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  std::map< int,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::map< int,std::string >::key_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::map< int,std::string >::size_type result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IntStringMap_count", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntStringMap_count" "', argument " "1"" of type '" "std::map< int,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntStringMap_count" "', argument " "2"" of type '" "std::map< int,std::string >::key_type""'");
  } 
  temp2 = static_cast< std::map< int,std::string >::key_type >(val2);
  arg2 = &temp2;
  {
    try {
      result = ((std::map< int,std::string > const *)arg1)->count((std::map< int,std::string >::key_type const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntStringMap_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  std::map< int,std::string >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntStringMap_erase" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntStringMap_erase" "', argument " "2"" of type '" "std::map< int,std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::map< int,std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::map< int,std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntStringMap_erase" "', argument " "2"" of type '" "std::map< int,std::string >::iterator""'");
    }
  }
  {
    try {
      std_map_Sl_int_Sc_std_string_Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2));
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntStringMap_erase__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  std::map< int,std::string >::iterator arg2 ;
  std::map< int,std::string >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntStringMap_erase" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntStringMap_erase" "', argument " "2"" of type '" "std::map< int,std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::map< int,std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::map< int,std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntStringMap_erase" "', argument " "2"" of type '" "std::map< int,std::string >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntStringMap_erase" "', argument " "3"" of type '" "std::map< int,std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::map< int,std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::map< int,std::string >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntStringMap_erase" "', argument " "3"" of type '" "std::map< int,std::string >::iterator""'");
    }
  }
  {
    try {
      std_map_Sl_int_Sc_std_string_Sg__erase__SWIG_2(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntStringMap_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "IntStringMap_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::map< int,std::string >::iterator > *>(iter) != 0));
    }
    if (!_v) goto check_1;
    return _wrap_IntStringMap_erase__SWIG_1(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_IntStringMap_erase__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_IntStringMap_erase__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'IntStringMap_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::map< int,std::string >::erase(std::map< int,std::string >::key_type const &)\n"
    "    std::map< int,std::string >::erase(std::map< int,std::string >::iterator)\n"
    "    std::map< int,std::string >::erase(std::map< int,std::string >::iterator,std::map< int,std::string >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntStringMap_find(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  std::map< int,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::map< int,std::string >::key_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::map< int,std::string >::iterator result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IntStringMap_find", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntStringMap_find" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntStringMap_find" "', argument " "2"" of type '" "std::map< int,std::string >::key_type""'");
  } 
  temp2 = static_cast< std::map< int,std::string >::key_type >(val2);
  arg2 = &temp2;
  {
    try {
      result = (arg1)->find((std::map< int,std::string >::key_type const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< int,std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntStringMap_lower_bound(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  std::map< int,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::map< int,std::string >::key_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::map< int,std::string >::iterator result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IntStringMap_lower_bound", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntStringMap_lower_bound" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntStringMap_lower_bound" "', argument " "2"" of type '" "std::map< int,std::string >::key_type""'");
  } 
  temp2 = static_cast< std::map< int,std::string >::key_type >(val2);
  arg2 = &temp2;
  {
    try {
      result = (arg1)->lower_bound((std::map< int,std::string >::key_type const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< int,std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntStringMap_upper_bound(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  std::map< int,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::map< int,std::string >::key_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::map< int,std::string >::iterator result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IntStringMap_upper_bound", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntStringMap_upper_bound" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntStringMap_upper_bound" "', argument " "2"" of type '" "std::map< int,std::string >::key_type""'");
  } 
  temp2 = static_cast< std::map< int,std::string >::key_type >(val2);
  arg2 = &temp2;
  {
    try {
      result = (arg1)->upper_bound((std::map< int,std::string >::key_type const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< int,std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IntStringMap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__string_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IntStringMap" "', argument " "1"" of type '" "std::map< int,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::string > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IntStringMap_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__mapT_int_std__string_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *IntStringMap_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_AnnotationVector_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Annotation > *arg1 = (std::vector< Annotation > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Annotation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnotationVector_iterator" "', argument " "1"" of type '" "std::vector< Annotation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Annotation > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_vector_Sl_Annotation_Sg__iterator(arg1,arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnotationVector___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Annotation > *arg1 = (std::vector< Annotation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Annotation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnotationVector___nonzero__" "', argument " "1"" of type '" "std::vector< Annotation > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Annotation > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_Annotation_Sg____nonzero__((std::vector< Annotation > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnotationVector___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Annotation > *arg1 = (std::vector< Annotation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Annotation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnotationVector___bool__" "', argument " "1"" of type '" "std::vector< Annotation > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Annotation > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_Annotation_Sg____bool__((std::vector< Annotation > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnotationVector___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Annotation > *arg1 = (std::vector< Annotation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Annotation >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Annotation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnotationVector___len__" "', argument " "1"" of type '" "std::vector< Annotation > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Annotation > * >(argp1);
  {
    try {
      result = std_vector_Sl_Annotation_Sg____len__((std::vector< Annotation > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnotationVector___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Annotation > *arg1 = (std::vector< Annotation > *) 0 ;
  std::vector< Annotation >::difference_type arg2 ;
  std::vector< Annotation >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< Annotation,std::allocator< Annotation > > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "AnnotationVector___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Annotation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnotationVector___getslice__" "', argument " "1"" of type '" "std::vector< Annotation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Annotation > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AnnotationVector___getslice__" "', argument " "2"" of type '" "std::vector< Annotation >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Annotation >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AnnotationVector___getslice__" "', argument " "3"" of type '" "std::vector< Annotation >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Annotation >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< Annotation,std::allocator< Annotation > > *)std_vector_Sl_Annotation_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Annotation_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnotationVector___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Annotation > *arg1 = (std::vector< Annotation > *) 0 ;
  std::vector< Annotation >::difference_type arg2 ;
  std::vector< Annotation >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Annotation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnotationVector___setslice__" "', argument " "1"" of type '" "std::vector< Annotation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Annotation > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AnnotationVector___setslice__" "', argument " "2"" of type '" "std::vector< Annotation >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Annotation >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AnnotationVector___setslice__" "', argument " "3"" of type '" "std::vector< Annotation >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Annotation >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_Annotation_Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnotationVector___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Annotation > *arg1 = (std::vector< Annotation > *) 0 ;
  std::vector< Annotation >::difference_type arg2 ;
  std::vector< Annotation >::difference_type arg3 ;
  std::vector< Annotation,std::allocator< Annotation > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Annotation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnotationVector___setslice__" "', argument " "1"" of type '" "std::vector< Annotation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Annotation > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AnnotationVector___setslice__" "', argument " "2"" of type '" "std::vector< Annotation >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Annotation >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AnnotationVector___setslice__" "', argument " "3"" of type '" "std::vector< Annotation >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Annotation >::difference_type >(val3);
  {
    std::vector< Annotation,std::allocator< Annotation > > *ptr = (std::vector< Annotation,std::allocator< Annotation > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AnnotationVector___setslice__" "', argument " "4"" of type '" "std::vector< Annotation,std::allocator< Annotation > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AnnotationVector___setslice__" "', argument " "4"" of type '" "std::vector< Annotation,std::allocator< Annotation > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_Annotation_Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< Annotation,std::allocator< Annotation > > const &)*arg4);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnotationVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "AnnotationVector___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    PyObject *retobj = _wrap_AnnotationVector___setslice____SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_AnnotationVector___setslice____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'AnnotationVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Annotation >::__setslice__(std::vector< Annotation >::difference_type,std::vector< Annotation >::difference_type)\n"
    "    std::vector< Annotation >::__setslice__(std::vector< Annotation >::difference_type,std::vector< Annotation >::difference_type,std::vector< Annotation,std::allocator< Annotation > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_AnnotationVector___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Annotation > *arg1 = (std::vector< Annotation > *) 0 ;
  std::vector< Annotation >::difference_type arg2 ;
  std::vector< Annotation >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "AnnotationVector___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Annotation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnotationVector___delslice__" "', argument " "1"" of type '" "std::vector< Annotation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Annotation > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AnnotationVector___delslice__" "', argument " "2"" of type '" "std::vector< Annotation >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Annotation >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AnnotationVector___delslice__" "', argument " "3"" of type '" "std::vector< Annotation >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Annotation >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_Annotation_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnotationVector___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Annotation > *arg1 = (std::vector< Annotation > *) 0 ;
  std::vector< Annotation >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Annotation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnotationVector___delitem__" "', argument " "1"" of type '" "std::vector< Annotation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Annotation > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AnnotationVector___delitem__" "', argument " "2"" of type '" "std::vector< Annotation >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Annotation >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_Annotation_Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnotationVector___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Annotation > *arg1 = (std::vector< Annotation > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< Annotation,std::allocator< Annotation > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Annotation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnotationVector___getitem__" "', argument " "1"" of type '" "std::vector< Annotation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Annotation > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "AnnotationVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        result = (std::vector< Annotation,std::allocator< Annotation > > *)std_vector_Sl_Annotation_Sg____getitem____SWIG_0(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Annotation_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnotationVector___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Annotation > *arg1 = (std::vector< Annotation > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< Annotation,std::allocator< Annotation > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Annotation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnotationVector___setitem__" "', argument " "1"" of type '" "std::vector< Annotation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Annotation > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "AnnotationVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector< Annotation,std::allocator< Annotation > > *ptr = (std::vector< Annotation,std::allocator< Annotation > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AnnotationVector___setitem__" "', argument " "3"" of type '" "std::vector< Annotation,std::allocator< Annotation > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AnnotationVector___setitem__" "', argument " "3"" of type '" "std::vector< Annotation,std::allocator< Annotation > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_Annotation_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< Annotation,std::allocator< Annotation > > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnotationVector___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Annotation > *arg1 = (std::vector< Annotation > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Annotation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnotationVector___setitem__" "', argument " "1"" of type '" "std::vector< Annotation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Annotation > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "AnnotationVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        std_vector_Sl_Annotation_Sg____setitem____SWIG_1(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnotationVector___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Annotation > *arg1 = (std::vector< Annotation > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Annotation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnotationVector___delitem__" "', argument " "1"" of type '" "std::vector< Annotation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Annotation > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "AnnotationVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        std_vector_Sl_Annotation_Sg____delitem____SWIG_1(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnotationVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "AnnotationVector___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_1;
    return _wrap_AnnotationVector___delitem____SWIG_1(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_AnnotationVector___delitem____SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'AnnotationVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Annotation >::__delitem__(std::vector< Annotation >::difference_type)\n"
    "    std::vector< Annotation >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_AnnotationVector___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Annotation > *arg1 = (std::vector< Annotation > *) 0 ;
  std::vector< Annotation >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< Annotation >::value_type *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Annotation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnotationVector___getitem__" "', argument " "1"" of type '" "std::vector< Annotation > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Annotation > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AnnotationVector___getitem__" "', argument " "2"" of type '" "std::vector< Annotation >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Annotation >::difference_type >(val2);
  {
    try {
      try {
        result = (std::vector< Annotation >::value_type *) &std_vector_Sl_Annotation_Sg____getitem____SWIG_1((std::vector< Annotation > const *)arg1,SWIG_STD_MOVE(arg2));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Annotation, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Annotation >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnotationVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "AnnotationVector___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_1;
    return _wrap_AnnotationVector___getitem____SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_AnnotationVector___getitem____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'AnnotationVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Annotation >::__getitem__(PySliceObject *)\n"
    "    std::vector< Annotation >::__getitem__(std::vector< Annotation >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_AnnotationVector___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Annotation > *arg1 = (std::vector< Annotation > *) 0 ;
  std::vector< Annotation >::difference_type arg2 ;
  std::vector< Annotation >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Annotation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnotationVector___setitem__" "', argument " "1"" of type '" "std::vector< Annotation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Annotation > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AnnotationVector___setitem__" "', argument " "2"" of type '" "std::vector< Annotation >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Annotation >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Annotation,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AnnotationVector___setitem__" "', argument " "3"" of type '" "std::vector< Annotation >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AnnotationVector___setitem__" "', argument " "3"" of type '" "std::vector< Annotation >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Annotation >::value_type * >(argp3);
  {
    try {
      try {
        std_vector_Sl_Annotation_Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(Annotation const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnotationVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "AnnotationVector___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_AnnotationVector___setitem____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_2;
    {
      int res = swig::asptr(argv[2], (std::vector< Annotation,std::allocator< Annotation > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_AnnotationVector___setitem____SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_AnnotationVector___setitem____SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'AnnotationVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Annotation >::__setitem__(PySliceObject *,std::vector< Annotation,std::allocator< Annotation > > const &)\n"
    "    std::vector< Annotation >::__setitem__(PySliceObject *)\n"
    "    std::vector< Annotation >::__setitem__(std::vector< Annotation >::difference_type,std::vector< Annotation >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_AnnotationVector_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Annotation > *arg1 = (std::vector< Annotation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Annotation >::value_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Annotation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnotationVector_pop" "', argument " "1"" of type '" "std::vector< Annotation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Annotation > * >(argp1);
  {
    try {
      try {
        result = std_vector_Sl_Annotation_Sg__pop(arg1);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< Annotation >::value_type(result)), SWIGTYPE_p_Annotation, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnotationVector_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Annotation > *arg1 = (std::vector< Annotation > *) 0 ;
  std::vector< Annotation >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "AnnotationVector_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Annotation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnotationVector_append" "', argument " "1"" of type '" "std::vector< Annotation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Annotation > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Annotation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AnnotationVector_append" "', argument " "2"" of type '" "std::vector< Annotation >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AnnotationVector_append" "', argument " "2"" of type '" "std::vector< Annotation >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Annotation >::value_type * >(argp2);
  {
    try {
      std_vector_Sl_Annotation_Sg__append(arg1,(Annotation const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AnnotationVector__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< Annotation > *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (std::vector< Annotation > *)new std::vector< Annotation >();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Annotation_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AnnotationVector__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Annotation > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< Annotation > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< Annotation,std::allocator< Annotation > > *ptr = (std::vector< Annotation,std::allocator< Annotation > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AnnotationVector" "', argument " "1"" of type '" "std::vector< Annotation > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AnnotationVector" "', argument " "1"" of type '" "std::vector< Annotation > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< Annotation > *)new std::vector< Annotation >((std::vector< Annotation > const &)*arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Annotation_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnotationVector_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Annotation > *arg1 = (std::vector< Annotation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Annotation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnotationVector_empty" "', argument " "1"" of type '" "std::vector< Annotation > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Annotation > * >(argp1);
  {
    try {
      result = (bool)((std::vector< Annotation > const *)arg1)->empty();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnotationVector_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Annotation > *arg1 = (std::vector< Annotation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Annotation >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Annotation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnotationVector_size" "', argument " "1"" of type '" "std::vector< Annotation > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Annotation > * >(argp1);
  {
    try {
      result = ((std::vector< Annotation > const *)arg1)->size();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnotationVector_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Annotation > *arg1 = (std::vector< Annotation > *) 0 ;
  std::vector< Annotation > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "AnnotationVector_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Annotation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnotationVector_swap" "', argument " "1"" of type '" "std::vector< Annotation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Annotation > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_Annotation_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AnnotationVector_swap" "', argument " "2"" of type '" "std::vector< Annotation > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AnnotationVector_swap" "', argument " "2"" of type '" "std::vector< Annotation > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Annotation > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnotationVector_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Annotation > *arg1 = (std::vector< Annotation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Annotation >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Annotation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnotationVector_begin" "', argument " "1"" of type '" "std::vector< Annotation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Annotation > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Annotation >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnotationVector_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Annotation > *arg1 = (std::vector< Annotation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Annotation >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Annotation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnotationVector_end" "', argument " "1"" of type '" "std::vector< Annotation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Annotation > * >(argp1);
  {
    try {
      result = (arg1)->end();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Annotation >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnotationVector_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Annotation > *arg1 = (std::vector< Annotation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Annotation >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Annotation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnotationVector_rbegin" "', argument " "1"" of type '" "std::vector< Annotation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Annotation > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Annotation >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnotationVector_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Annotation > *arg1 = (std::vector< Annotation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Annotation >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Annotation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnotationVector_rend" "', argument " "1"" of type '" "std::vector< Annotation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Annotation > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Annotation >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnotationVector_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Annotation > *arg1 = (std::vector< Annotation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Annotation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnotationVector_clear" "', argument " "1"" of type '" "std::vector< Annotation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Annotation > * >(argp1);
  {
    try {
      (arg1)->clear();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnotationVector_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Annotation > *arg1 = (std::vector< Annotation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< Annotation > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Annotation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnotationVector_get_allocator" "', argument " "1"" of type '" "std::vector< Annotation > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Annotation > * >(argp1);
  {
    try {
      result = ((std::vector< Annotation > const *)arg1)->get_allocator();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< Annotation >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_Annotation_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AnnotationVector__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Annotation >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< Annotation > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_AnnotationVector" "', argument " "1"" of type '" "std::vector< Annotation >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Annotation >::size_type >(val1);
  {
    try {
      result = (std::vector< Annotation > *)new std::vector< Annotation >(arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Annotation_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnotationVector_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Annotation > *arg1 = (std::vector< Annotation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Annotation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnotationVector_pop_back" "', argument " "1"" of type '" "std::vector< Annotation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Annotation > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnotationVector_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Annotation > *arg1 = (std::vector< Annotation > *) 0 ;
  std::vector< Annotation >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Annotation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnotationVector_resize" "', argument " "1"" of type '" "std::vector< Annotation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Annotation > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AnnotationVector_resize" "', argument " "2"" of type '" "std::vector< Annotation >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Annotation >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnotationVector_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Annotation > *arg1 = (std::vector< Annotation > *) 0 ;
  std::vector< Annotation >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< Annotation >::iterator result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Annotation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnotationVector_erase" "', argument " "1"" of type '" "std::vector< Annotation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Annotation > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "AnnotationVector_erase" "', argument " "2"" of type '" "std::vector< Annotation >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Annotation >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Annotation >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "AnnotationVector_erase" "', argument " "2"" of type '" "std::vector< Annotation >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_Annotation_Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Annotation >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnotationVector_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Annotation > *arg1 = (std::vector< Annotation > *) 0 ;
  std::vector< Annotation >::iterator arg2 ;
  std::vector< Annotation >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< Annotation >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Annotation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnotationVector_erase" "', argument " "1"" of type '" "std::vector< Annotation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Annotation > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "AnnotationVector_erase" "', argument " "2"" of type '" "std::vector< Annotation >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Annotation >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Annotation >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "AnnotationVector_erase" "', argument " "2"" of type '" "std::vector< Annotation >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "AnnotationVector_erase" "', argument " "3"" of type '" "std::vector< Annotation >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Annotation >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Annotation >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "AnnotationVector_erase" "', argument " "3"" of type '" "std::vector< Annotation >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_Annotation_Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Annotation >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnotationVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "AnnotationVector_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_AnnotationVector_erase__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_AnnotationVector_erase__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'AnnotationVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Annotation >::erase(std::vector< Annotation >::iterator)\n"
    "    std::vector< Annotation >::erase(std::vector< Annotation >::iterator,std::vector< Annotation >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_AnnotationVector__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Annotation >::size_type arg1 ;
  std::vector< Annotation >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< Annotation > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_AnnotationVector" "', argument " "1"" of type '" "std::vector< Annotation >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Annotation >::size_type >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Annotation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_AnnotationVector" "', argument " "2"" of type '" "std::vector< Annotation >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AnnotationVector" "', argument " "2"" of type '" "std::vector< Annotation >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Annotation >::value_type * >(argp2);
  {
    try {
      result = (std::vector< Annotation > *)new std::vector< Annotation >(arg1,(std::vector< Annotation >::value_type const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Annotation_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AnnotationVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_AnnotationVector", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    PyObject *retobj = _wrap_new_AnnotationVector__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 1) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[0], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_new_AnnotationVector__SWIG_2(self, argc, argv);
  }
check_2:
  
  if (argc == 1) {
    PyObject *retobj = _wrap_new_AnnotationVector__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_new_AnnotationVector__SWIG_3(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_AnnotationVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Annotation >::vector()\n"
    "    std::vector< Annotation >::vector(std::vector< Annotation > const &)\n"
    "    std::vector< Annotation >::vector(std::vector< Annotation >::size_type)\n"
    "    std::vector< Annotation >::vector(std::vector< Annotation >::size_type,std::vector< Annotation >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_AnnotationVector_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Annotation > *arg1 = (std::vector< Annotation > *) 0 ;
  std::vector< Annotation >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "AnnotationVector_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Annotation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnotationVector_push_back" "', argument " "1"" of type '" "std::vector< Annotation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Annotation > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Annotation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AnnotationVector_push_back" "', argument " "2"" of type '" "std::vector< Annotation >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AnnotationVector_push_back" "', argument " "2"" of type '" "std::vector< Annotation >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Annotation >::value_type * >(argp2);
  {
    try {
      (arg1)->push_back((std::vector< Annotation >::value_type const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnotationVector_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Annotation > *arg1 = (std::vector< Annotation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Annotation >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Annotation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnotationVector_front" "', argument " "1"" of type '" "std::vector< Annotation > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Annotation > * >(argp1);
  {
    try {
      result = (std::vector< Annotation >::value_type *) &((std::vector< Annotation > const *)arg1)->front();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Annotation, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Annotation >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnotationVector_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Annotation > *arg1 = (std::vector< Annotation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Annotation >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Annotation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnotationVector_back" "', argument " "1"" of type '" "std::vector< Annotation > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Annotation > * >(argp1);
  {
    try {
      result = (std::vector< Annotation >::value_type *) &((std::vector< Annotation > const *)arg1)->back();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Annotation, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Annotation >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnotationVector_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Annotation > *arg1 = (std::vector< Annotation > *) 0 ;
  std::vector< Annotation >::size_type arg2 ;
  std::vector< Annotation >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "AnnotationVector_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Annotation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnotationVector_assign" "', argument " "1"" of type '" "std::vector< Annotation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Annotation > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AnnotationVector_assign" "', argument " "2"" of type '" "std::vector< Annotation >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Annotation >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Annotation,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AnnotationVector_assign" "', argument " "3"" of type '" "std::vector< Annotation >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AnnotationVector_assign" "', argument " "3"" of type '" "std::vector< Annotation >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Annotation >::value_type * >(argp3);
  {
    try {
      (arg1)->assign(arg2,(std::vector< Annotation >::value_type const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnotationVector_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Annotation > *arg1 = (std::vector< Annotation > *) 0 ;
  std::vector< Annotation >::size_type arg2 ;
  std::vector< Annotation >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Annotation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnotationVector_resize" "', argument " "1"" of type '" "std::vector< Annotation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Annotation > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AnnotationVector_resize" "', argument " "2"" of type '" "std::vector< Annotation >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Annotation >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Annotation,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AnnotationVector_resize" "', argument " "3"" of type '" "std::vector< Annotation >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AnnotationVector_resize" "', argument " "3"" of type '" "std::vector< Annotation >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Annotation >::value_type * >(argp3);
  {
    try {
      (arg1)->resize(arg2,(std::vector< Annotation >::value_type const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnotationVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "AnnotationVector_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_AnnotationVector_resize__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_AnnotationVector_resize__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'AnnotationVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Annotation >::resize(std::vector< Annotation >::size_type)\n"
    "    std::vector< Annotation >::resize(std::vector< Annotation >::size_type,std::vector< Annotation >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_AnnotationVector_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Annotation > *arg1 = (std::vector< Annotation > *) 0 ;
  std::vector< Annotation >::iterator arg2 ;
  std::vector< Annotation >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::vector< Annotation >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Annotation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnotationVector_insert" "', argument " "1"" of type '" "std::vector< Annotation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Annotation > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "AnnotationVector_insert" "', argument " "2"" of type '" "std::vector< Annotation >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Annotation >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Annotation >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "AnnotationVector_insert" "', argument " "2"" of type '" "std::vector< Annotation >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Annotation,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AnnotationVector_insert" "', argument " "3"" of type '" "std::vector< Annotation >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AnnotationVector_insert" "', argument " "3"" of type '" "std::vector< Annotation >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Annotation >::value_type * >(argp3);
  {
    try {
      result = std_vector_Sl_Annotation_Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(Annotation const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Annotation >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnotationVector_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Annotation > *arg1 = (std::vector< Annotation > *) 0 ;
  std::vector< Annotation >::iterator arg2 ;
  std::vector< Annotation >::size_type arg3 ;
  std::vector< Annotation >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Annotation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnotationVector_insert" "', argument " "1"" of type '" "std::vector< Annotation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Annotation > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "AnnotationVector_insert" "', argument " "2"" of type '" "std::vector< Annotation >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Annotation >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Annotation >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "AnnotationVector_insert" "', argument " "2"" of type '" "std::vector< Annotation >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AnnotationVector_insert" "', argument " "3"" of type '" "std::vector< Annotation >::size_type""'");
  } 
  arg3 = static_cast< std::vector< Annotation >::size_type >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_Annotation,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AnnotationVector_insert" "', argument " "4"" of type '" "std::vector< Annotation >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AnnotationVector_insert" "', argument " "4"" of type '" "std::vector< Annotation >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< Annotation >::value_type * >(argp4);
  {
    try {
      std_vector_Sl_Annotation_Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(Annotation const &)*arg4);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnotationVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "AnnotationVector_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    PyObject *retobj = _wrap_AnnotationVector_insert__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_AnnotationVector_insert__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'AnnotationVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Annotation >::insert(std::vector< Annotation >::iterator,std::vector< Annotation >::value_type const &)\n"
    "    std::vector< Annotation >::insert(std::vector< Annotation >::iterator,std::vector< Annotation >::size_type,std::vector< Annotation >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_AnnotationVector_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Annotation > *arg1 = (std::vector< Annotation > *) 0 ;
  std::vector< Annotation >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "AnnotationVector_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Annotation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnotationVector_reserve" "', argument " "1"" of type '" "std::vector< Annotation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Annotation > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AnnotationVector_reserve" "', argument " "2"" of type '" "std::vector< Annotation >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Annotation >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnotationVector_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Annotation > *arg1 = (std::vector< Annotation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Annotation >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Annotation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnotationVector_capacity" "', argument " "1"" of type '" "std::vector< Annotation > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Annotation > * >(argp1);
  {
    try {
      result = ((std::vector< Annotation > const *)arg1)->capacity();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AnnotationVector(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Annotation > *arg1 = (std::vector< Annotation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Annotation_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AnnotationVector" "', argument " "1"" of type '" "std::vector< Annotation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Annotation > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AnnotationVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_Annotation_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *AnnotationVector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_UnitsVector_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UnitsM > *arg1 = (std::vector< UnitsM > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_UnitsM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitsVector_iterator" "', argument " "1"" of type '" "std::vector< UnitsM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UnitsM > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_vector_Sl_UnitsM_Sg__iterator(arg1,arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitsVector___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UnitsM > *arg1 = (std::vector< UnitsM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_UnitsM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitsVector___nonzero__" "', argument " "1"" of type '" "std::vector< UnitsM > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UnitsM > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_UnitsM_Sg____nonzero__((std::vector< UnitsM > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitsVector___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UnitsM > *arg1 = (std::vector< UnitsM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_UnitsM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitsVector___bool__" "', argument " "1"" of type '" "std::vector< UnitsM > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UnitsM > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_UnitsM_Sg____bool__((std::vector< UnitsM > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitsVector___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UnitsM > *arg1 = (std::vector< UnitsM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< UnitsM >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_UnitsM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitsVector___len__" "', argument " "1"" of type '" "std::vector< UnitsM > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UnitsM > * >(argp1);
  {
    try {
      result = std_vector_Sl_UnitsM_Sg____len__((std::vector< UnitsM > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitsVector___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UnitsM > *arg1 = (std::vector< UnitsM > *) 0 ;
  std::vector< UnitsM >::difference_type arg2 ;
  std::vector< UnitsM >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< UnitsM,std::allocator< UnitsM > > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "UnitsVector___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_UnitsM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitsVector___getslice__" "', argument " "1"" of type '" "std::vector< UnitsM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UnitsM > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UnitsVector___getslice__" "', argument " "2"" of type '" "std::vector< UnitsM >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< UnitsM >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UnitsVector___getslice__" "', argument " "3"" of type '" "std::vector< UnitsM >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< UnitsM >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< UnitsM,std::allocator< UnitsM > > *)std_vector_Sl_UnitsM_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_UnitsM_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitsVector___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< UnitsM > *arg1 = (std::vector< UnitsM > *) 0 ;
  std::vector< UnitsM >::difference_type arg2 ;
  std::vector< UnitsM >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_UnitsM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitsVector___setslice__" "', argument " "1"" of type '" "std::vector< UnitsM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UnitsM > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UnitsVector___setslice__" "', argument " "2"" of type '" "std::vector< UnitsM >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< UnitsM >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UnitsVector___setslice__" "', argument " "3"" of type '" "std::vector< UnitsM >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< UnitsM >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_UnitsM_Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitsVector___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< UnitsM > *arg1 = (std::vector< UnitsM > *) 0 ;
  std::vector< UnitsM >::difference_type arg2 ;
  std::vector< UnitsM >::difference_type arg3 ;
  std::vector< UnitsM,std::allocator< UnitsM > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_UnitsM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitsVector___setslice__" "', argument " "1"" of type '" "std::vector< UnitsM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UnitsM > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UnitsVector___setslice__" "', argument " "2"" of type '" "std::vector< UnitsM >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< UnitsM >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UnitsVector___setslice__" "', argument " "3"" of type '" "std::vector< UnitsM >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< UnitsM >::difference_type >(val3);
  {
    std::vector< UnitsM,std::allocator< UnitsM > > *ptr = (std::vector< UnitsM,std::allocator< UnitsM > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "UnitsVector___setslice__" "', argument " "4"" of type '" "std::vector< UnitsM,std::allocator< UnitsM > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnitsVector___setslice__" "', argument " "4"" of type '" "std::vector< UnitsM,std::allocator< UnitsM > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_UnitsM_Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< UnitsM,std::allocator< UnitsM > > const &)*arg4);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitsVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "UnitsVector___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    PyObject *retobj = _wrap_UnitsVector___setslice____SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_UnitsVector___setslice____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'UnitsVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< UnitsM >::__setslice__(std::vector< UnitsM >::difference_type,std::vector< UnitsM >::difference_type)\n"
    "    std::vector< UnitsM >::__setslice__(std::vector< UnitsM >::difference_type,std::vector< UnitsM >::difference_type,std::vector< UnitsM,std::allocator< UnitsM > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_UnitsVector___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UnitsM > *arg1 = (std::vector< UnitsM > *) 0 ;
  std::vector< UnitsM >::difference_type arg2 ;
  std::vector< UnitsM >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "UnitsVector___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_UnitsM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitsVector___delslice__" "', argument " "1"" of type '" "std::vector< UnitsM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UnitsM > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UnitsVector___delslice__" "', argument " "2"" of type '" "std::vector< UnitsM >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< UnitsM >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UnitsVector___delslice__" "', argument " "3"" of type '" "std::vector< UnitsM >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< UnitsM >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_UnitsM_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitsVector___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< UnitsM > *arg1 = (std::vector< UnitsM > *) 0 ;
  std::vector< UnitsM >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_UnitsM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitsVector___delitem__" "', argument " "1"" of type '" "std::vector< UnitsM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UnitsM > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UnitsVector___delitem__" "', argument " "2"" of type '" "std::vector< UnitsM >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< UnitsM >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_UnitsM_Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitsVector___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< UnitsM > *arg1 = (std::vector< UnitsM > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< UnitsM,std::allocator< UnitsM > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_UnitsM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitsVector___getitem__" "', argument " "1"" of type '" "std::vector< UnitsM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UnitsM > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UnitsVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        result = (std::vector< UnitsM,std::allocator< UnitsM > > *)std_vector_Sl_UnitsM_Sg____getitem____SWIG_0(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_UnitsM_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitsVector___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< UnitsM > *arg1 = (std::vector< UnitsM > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< UnitsM,std::allocator< UnitsM > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_UnitsM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitsVector___setitem__" "', argument " "1"" of type '" "std::vector< UnitsM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UnitsM > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UnitsVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector< UnitsM,std::allocator< UnitsM > > *ptr = (std::vector< UnitsM,std::allocator< UnitsM > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "UnitsVector___setitem__" "', argument " "3"" of type '" "std::vector< UnitsM,std::allocator< UnitsM > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnitsVector___setitem__" "', argument " "3"" of type '" "std::vector< UnitsM,std::allocator< UnitsM > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_UnitsM_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< UnitsM,std::allocator< UnitsM > > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitsVector___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< UnitsM > *arg1 = (std::vector< UnitsM > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_UnitsM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitsVector___setitem__" "', argument " "1"" of type '" "std::vector< UnitsM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UnitsM > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UnitsVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        std_vector_Sl_UnitsM_Sg____setitem____SWIG_1(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitsVector___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< UnitsM > *arg1 = (std::vector< UnitsM > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_UnitsM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitsVector___delitem__" "', argument " "1"" of type '" "std::vector< UnitsM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UnitsM > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UnitsVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        std_vector_Sl_UnitsM_Sg____delitem____SWIG_1(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitsVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "UnitsVector___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_1;
    return _wrap_UnitsVector___delitem____SWIG_1(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_UnitsVector___delitem____SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'UnitsVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< UnitsM >::__delitem__(std::vector< UnitsM >::difference_type)\n"
    "    std::vector< UnitsM >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_UnitsVector___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< UnitsM > *arg1 = (std::vector< UnitsM > *) 0 ;
  std::vector< UnitsM >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< UnitsM >::value_type *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_UnitsM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitsVector___getitem__" "', argument " "1"" of type '" "std::vector< UnitsM > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UnitsM > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UnitsVector___getitem__" "', argument " "2"" of type '" "std::vector< UnitsM >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< UnitsM >::difference_type >(val2);
  {
    try {
      try {
        result = (std::vector< UnitsM >::value_type *) &std_vector_Sl_UnitsM_Sg____getitem____SWIG_1((std::vector< UnitsM > const *)arg1,SWIG_STD_MOVE(arg2));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_UnitsM, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< UnitsM >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitsVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "UnitsVector___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_1;
    return _wrap_UnitsVector___getitem____SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_UnitsVector___getitem____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'UnitsVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< UnitsM >::__getitem__(PySliceObject *)\n"
    "    std::vector< UnitsM >::__getitem__(std::vector< UnitsM >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_UnitsVector___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< UnitsM > *arg1 = (std::vector< UnitsM > *) 0 ;
  std::vector< UnitsM >::difference_type arg2 ;
  std::vector< UnitsM >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_UnitsM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitsVector___setitem__" "', argument " "1"" of type '" "std::vector< UnitsM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UnitsM > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UnitsVector___setitem__" "', argument " "2"" of type '" "std::vector< UnitsM >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< UnitsM >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_UnitsM,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "UnitsVector___setitem__" "', argument " "3"" of type '" "std::vector< UnitsM >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnitsVector___setitem__" "', argument " "3"" of type '" "std::vector< UnitsM >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< UnitsM >::value_type * >(argp3);
  {
    try {
      try {
        std_vector_Sl_UnitsM_Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(UnitsM const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitsVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "UnitsVector___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_UnitsVector___setitem____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_2;
    {
      int res = swig::asptr(argv[2], (std::vector< UnitsM,std::allocator< UnitsM > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_UnitsVector___setitem____SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_UnitsVector___setitem____SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'UnitsVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< UnitsM >::__setitem__(PySliceObject *,std::vector< UnitsM,std::allocator< UnitsM > > const &)\n"
    "    std::vector< UnitsM >::__setitem__(PySliceObject *)\n"
    "    std::vector< UnitsM >::__setitem__(std::vector< UnitsM >::difference_type,std::vector< UnitsM >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_UnitsVector_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UnitsM > *arg1 = (std::vector< UnitsM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< UnitsM >::value_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_UnitsM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitsVector_pop" "', argument " "1"" of type '" "std::vector< UnitsM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UnitsM > * >(argp1);
  {
    try {
      try {
        result = std_vector_Sl_UnitsM_Sg__pop(arg1);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< UnitsM >::value_type(result)), SWIGTYPE_p_UnitsM, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitsVector_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UnitsM > *arg1 = (std::vector< UnitsM > *) 0 ;
  std::vector< UnitsM >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "UnitsVector_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_UnitsM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitsVector_append" "', argument " "1"" of type '" "std::vector< UnitsM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UnitsM > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_UnitsM,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnitsVector_append" "', argument " "2"" of type '" "std::vector< UnitsM >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnitsVector_append" "', argument " "2"" of type '" "std::vector< UnitsM >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< UnitsM >::value_type * >(argp2);
  {
    try {
      std_vector_Sl_UnitsM_Sg__append(arg1,(UnitsM const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UnitsVector__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< UnitsM > *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (std::vector< UnitsM > *)new std::vector< UnitsM >();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_UnitsM_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UnitsVector__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< UnitsM > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< UnitsM > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< UnitsM,std::allocator< UnitsM > > *ptr = (std::vector< UnitsM,std::allocator< UnitsM > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UnitsVector" "', argument " "1"" of type '" "std::vector< UnitsM > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UnitsVector" "', argument " "1"" of type '" "std::vector< UnitsM > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< UnitsM > *)new std::vector< UnitsM >((std::vector< UnitsM > const &)*arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_UnitsM_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitsVector_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UnitsM > *arg1 = (std::vector< UnitsM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_UnitsM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitsVector_empty" "', argument " "1"" of type '" "std::vector< UnitsM > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UnitsM > * >(argp1);
  {
    try {
      result = (bool)((std::vector< UnitsM > const *)arg1)->empty();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitsVector_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UnitsM > *arg1 = (std::vector< UnitsM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< UnitsM >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_UnitsM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitsVector_size" "', argument " "1"" of type '" "std::vector< UnitsM > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UnitsM > * >(argp1);
  {
    try {
      result = ((std::vector< UnitsM > const *)arg1)->size();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitsVector_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UnitsM > *arg1 = (std::vector< UnitsM > *) 0 ;
  std::vector< UnitsM > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "UnitsVector_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_UnitsM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitsVector_swap" "', argument " "1"" of type '" "std::vector< UnitsM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UnitsM > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_UnitsM_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnitsVector_swap" "', argument " "2"" of type '" "std::vector< UnitsM > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnitsVector_swap" "', argument " "2"" of type '" "std::vector< UnitsM > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< UnitsM > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitsVector_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UnitsM > *arg1 = (std::vector< UnitsM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< UnitsM >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_UnitsM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitsVector_begin" "', argument " "1"" of type '" "std::vector< UnitsM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UnitsM > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< UnitsM >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitsVector_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UnitsM > *arg1 = (std::vector< UnitsM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< UnitsM >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_UnitsM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitsVector_end" "', argument " "1"" of type '" "std::vector< UnitsM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UnitsM > * >(argp1);
  {
    try {
      result = (arg1)->end();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< UnitsM >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitsVector_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UnitsM > *arg1 = (std::vector< UnitsM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< UnitsM >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_UnitsM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitsVector_rbegin" "', argument " "1"" of type '" "std::vector< UnitsM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UnitsM > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< UnitsM >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitsVector_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UnitsM > *arg1 = (std::vector< UnitsM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< UnitsM >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_UnitsM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitsVector_rend" "', argument " "1"" of type '" "std::vector< UnitsM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UnitsM > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< UnitsM >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitsVector_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UnitsM > *arg1 = (std::vector< UnitsM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_UnitsM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitsVector_clear" "', argument " "1"" of type '" "std::vector< UnitsM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UnitsM > * >(argp1);
  {
    try {
      (arg1)->clear();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitsVector_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UnitsM > *arg1 = (std::vector< UnitsM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< UnitsM > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_UnitsM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitsVector_get_allocator" "', argument " "1"" of type '" "std::vector< UnitsM > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UnitsM > * >(argp1);
  {
    try {
      result = ((std::vector< UnitsM > const *)arg1)->get_allocator();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< UnitsM >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_UnitsM_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UnitsVector__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< UnitsM >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< UnitsM > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UnitsVector" "', argument " "1"" of type '" "std::vector< UnitsM >::size_type""'");
  } 
  arg1 = static_cast< std::vector< UnitsM >::size_type >(val1);
  {
    try {
      result = (std::vector< UnitsM > *)new std::vector< UnitsM >(arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_UnitsM_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitsVector_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UnitsM > *arg1 = (std::vector< UnitsM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_UnitsM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitsVector_pop_back" "', argument " "1"" of type '" "std::vector< UnitsM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UnitsM > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitsVector_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< UnitsM > *arg1 = (std::vector< UnitsM > *) 0 ;
  std::vector< UnitsM >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_UnitsM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitsVector_resize" "', argument " "1"" of type '" "std::vector< UnitsM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UnitsM > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UnitsVector_resize" "', argument " "2"" of type '" "std::vector< UnitsM >::size_type""'");
  } 
  arg2 = static_cast< std::vector< UnitsM >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitsVector_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< UnitsM > *arg1 = (std::vector< UnitsM > *) 0 ;
  std::vector< UnitsM >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< UnitsM >::iterator result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_UnitsM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitsVector_erase" "', argument " "1"" of type '" "std::vector< UnitsM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UnitsM > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UnitsVector_erase" "', argument " "2"" of type '" "std::vector< UnitsM >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< UnitsM >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< UnitsM >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UnitsVector_erase" "', argument " "2"" of type '" "std::vector< UnitsM >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_UnitsM_Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< UnitsM >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitsVector_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< UnitsM > *arg1 = (std::vector< UnitsM > *) 0 ;
  std::vector< UnitsM >::iterator arg2 ;
  std::vector< UnitsM >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< UnitsM >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_UnitsM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitsVector_erase" "', argument " "1"" of type '" "std::vector< UnitsM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UnitsM > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UnitsVector_erase" "', argument " "2"" of type '" "std::vector< UnitsM >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< UnitsM >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< UnitsM >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UnitsVector_erase" "', argument " "2"" of type '" "std::vector< UnitsM >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UnitsVector_erase" "', argument " "3"" of type '" "std::vector< UnitsM >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< UnitsM >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< UnitsM >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UnitsVector_erase" "', argument " "3"" of type '" "std::vector< UnitsM >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_UnitsM_Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< UnitsM >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitsVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "UnitsVector_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_UnitsVector_erase__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_UnitsVector_erase__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'UnitsVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< UnitsM >::erase(std::vector< UnitsM >::iterator)\n"
    "    std::vector< UnitsM >::erase(std::vector< UnitsM >::iterator,std::vector< UnitsM >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_UnitsVector__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< UnitsM >::size_type arg1 ;
  std::vector< UnitsM >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< UnitsM > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UnitsVector" "', argument " "1"" of type '" "std::vector< UnitsM >::size_type""'");
  } 
  arg1 = static_cast< std::vector< UnitsM >::size_type >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_UnitsM,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_UnitsVector" "', argument " "2"" of type '" "std::vector< UnitsM >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UnitsVector" "', argument " "2"" of type '" "std::vector< UnitsM >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< UnitsM >::value_type * >(argp2);
  {
    try {
      result = (std::vector< UnitsM > *)new std::vector< UnitsM >(arg1,(std::vector< UnitsM >::value_type const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_UnitsM_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UnitsVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_UnitsVector", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    PyObject *retobj = _wrap_new_UnitsVector__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 1) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[0], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_new_UnitsVector__SWIG_2(self, argc, argv);
  }
check_2:
  
  if (argc == 1) {
    PyObject *retobj = _wrap_new_UnitsVector__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_new_UnitsVector__SWIG_3(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_UnitsVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< UnitsM >::vector()\n"
    "    std::vector< UnitsM >::vector(std::vector< UnitsM > const &)\n"
    "    std::vector< UnitsM >::vector(std::vector< UnitsM >::size_type)\n"
    "    std::vector< UnitsM >::vector(std::vector< UnitsM >::size_type,std::vector< UnitsM >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_UnitsVector_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UnitsM > *arg1 = (std::vector< UnitsM > *) 0 ;
  std::vector< UnitsM >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "UnitsVector_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_UnitsM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitsVector_push_back" "', argument " "1"" of type '" "std::vector< UnitsM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UnitsM > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_UnitsM,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnitsVector_push_back" "', argument " "2"" of type '" "std::vector< UnitsM >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnitsVector_push_back" "', argument " "2"" of type '" "std::vector< UnitsM >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< UnitsM >::value_type * >(argp2);
  {
    try {
      (arg1)->push_back((std::vector< UnitsM >::value_type const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitsVector_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UnitsM > *arg1 = (std::vector< UnitsM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< UnitsM >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_UnitsM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitsVector_front" "', argument " "1"" of type '" "std::vector< UnitsM > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UnitsM > * >(argp1);
  {
    try {
      result = (std::vector< UnitsM >::value_type *) &((std::vector< UnitsM > const *)arg1)->front();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_UnitsM, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< UnitsM >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitsVector_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UnitsM > *arg1 = (std::vector< UnitsM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< UnitsM >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_UnitsM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitsVector_back" "', argument " "1"" of type '" "std::vector< UnitsM > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UnitsM > * >(argp1);
  {
    try {
      result = (std::vector< UnitsM >::value_type *) &((std::vector< UnitsM > const *)arg1)->back();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_UnitsM, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< UnitsM >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitsVector_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UnitsM > *arg1 = (std::vector< UnitsM > *) 0 ;
  std::vector< UnitsM >::size_type arg2 ;
  std::vector< UnitsM >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "UnitsVector_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_UnitsM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitsVector_assign" "', argument " "1"" of type '" "std::vector< UnitsM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UnitsM > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UnitsVector_assign" "', argument " "2"" of type '" "std::vector< UnitsM >::size_type""'");
  } 
  arg2 = static_cast< std::vector< UnitsM >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_UnitsM,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "UnitsVector_assign" "', argument " "3"" of type '" "std::vector< UnitsM >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnitsVector_assign" "', argument " "3"" of type '" "std::vector< UnitsM >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< UnitsM >::value_type * >(argp3);
  {
    try {
      (arg1)->assign(arg2,(std::vector< UnitsM >::value_type const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitsVector_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< UnitsM > *arg1 = (std::vector< UnitsM > *) 0 ;
  std::vector< UnitsM >::size_type arg2 ;
  std::vector< UnitsM >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_UnitsM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitsVector_resize" "', argument " "1"" of type '" "std::vector< UnitsM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UnitsM > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UnitsVector_resize" "', argument " "2"" of type '" "std::vector< UnitsM >::size_type""'");
  } 
  arg2 = static_cast< std::vector< UnitsM >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_UnitsM,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "UnitsVector_resize" "', argument " "3"" of type '" "std::vector< UnitsM >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnitsVector_resize" "', argument " "3"" of type '" "std::vector< UnitsM >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< UnitsM >::value_type * >(argp3);
  {
    try {
      (arg1)->resize(arg2,(std::vector< UnitsM >::value_type const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitsVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "UnitsVector_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_UnitsVector_resize__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_UnitsVector_resize__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'UnitsVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< UnitsM >::resize(std::vector< UnitsM >::size_type)\n"
    "    std::vector< UnitsM >::resize(std::vector< UnitsM >::size_type,std::vector< UnitsM >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_UnitsVector_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< UnitsM > *arg1 = (std::vector< UnitsM > *) 0 ;
  std::vector< UnitsM >::iterator arg2 ;
  std::vector< UnitsM >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::vector< UnitsM >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_UnitsM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitsVector_insert" "', argument " "1"" of type '" "std::vector< UnitsM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UnitsM > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UnitsVector_insert" "', argument " "2"" of type '" "std::vector< UnitsM >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< UnitsM >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< UnitsM >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UnitsVector_insert" "', argument " "2"" of type '" "std::vector< UnitsM >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_UnitsM,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "UnitsVector_insert" "', argument " "3"" of type '" "std::vector< UnitsM >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnitsVector_insert" "', argument " "3"" of type '" "std::vector< UnitsM >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< UnitsM >::value_type * >(argp3);
  {
    try {
      result = std_vector_Sl_UnitsM_Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(UnitsM const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< UnitsM >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitsVector_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< UnitsM > *arg1 = (std::vector< UnitsM > *) 0 ;
  std::vector< UnitsM >::iterator arg2 ;
  std::vector< UnitsM >::size_type arg3 ;
  std::vector< UnitsM >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_UnitsM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitsVector_insert" "', argument " "1"" of type '" "std::vector< UnitsM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UnitsM > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UnitsVector_insert" "', argument " "2"" of type '" "std::vector< UnitsM >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< UnitsM >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< UnitsM >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UnitsVector_insert" "', argument " "2"" of type '" "std::vector< UnitsM >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UnitsVector_insert" "', argument " "3"" of type '" "std::vector< UnitsM >::size_type""'");
  } 
  arg3 = static_cast< std::vector< UnitsM >::size_type >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_UnitsM,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "UnitsVector_insert" "', argument " "4"" of type '" "std::vector< UnitsM >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnitsVector_insert" "', argument " "4"" of type '" "std::vector< UnitsM >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< UnitsM >::value_type * >(argp4);
  {
    try {
      std_vector_Sl_UnitsM_Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(UnitsM const &)*arg4);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitsVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "UnitsVector_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    PyObject *retobj = _wrap_UnitsVector_insert__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_UnitsVector_insert__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'UnitsVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< UnitsM >::insert(std::vector< UnitsM >::iterator,std::vector< UnitsM >::value_type const &)\n"
    "    std::vector< UnitsM >::insert(std::vector< UnitsM >::iterator,std::vector< UnitsM >::size_type,std::vector< UnitsM >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_UnitsVector_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UnitsM > *arg1 = (std::vector< UnitsM > *) 0 ;
  std::vector< UnitsM >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "UnitsVector_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_UnitsM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitsVector_reserve" "', argument " "1"" of type '" "std::vector< UnitsM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UnitsM > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UnitsVector_reserve" "', argument " "2"" of type '" "std::vector< UnitsM >::size_type""'");
  } 
  arg2 = static_cast< std::vector< UnitsM >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitsVector_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UnitsM > *arg1 = (std::vector< UnitsM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< UnitsM >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_UnitsM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitsVector_capacity" "', argument " "1"" of type '" "std::vector< UnitsM > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UnitsM > * >(argp1);
  {
    try {
      result = ((std::vector< UnitsM > const *)arg1)->capacity();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_UnitsVector(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UnitsM > *arg1 = (std::vector< UnitsM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_UnitsM_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UnitsVector" "', argument " "1"" of type '" "std::vector< UnitsM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UnitsM > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UnitsVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_UnitsM_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *UnitsVector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_TypeSet__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::less< Type > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::set< Type > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__lessT_Type_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TypeSet" "', argument " "1"" of type '" "std::less< Type > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TypeSet" "', argument " "1"" of type '" "std::less< Type > const &""'"); 
  }
  arg1 = reinterpret_cast< std::less< Type > * >(argp1);
  {
    try {
      result = (std::set< Type > *)new std::set< Type >((std::less< Type > const &)*arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_Type_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeSet_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Type > *arg1 = (std::set< Type > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeSet_iterator" "', argument " "1"" of type '" "std::set< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Type > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_set_Sl_Type_Sg__iterator(arg1,arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeSet___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Type > *arg1 = (std::set< Type > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeSet___nonzero__" "', argument " "1"" of type '" "std::set< Type > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Type > * >(argp1);
  {
    try {
      result = (bool)std_set_Sl_Type_Sg____nonzero__((std::set< Type > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeSet___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Type > *arg1 = (std::set< Type > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeSet___bool__" "', argument " "1"" of type '" "std::set< Type > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Type > * >(argp1);
  {
    try {
      result = (bool)std_set_Sl_Type_Sg____bool__((std::set< Type > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeSet___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Type > *arg1 = (std::set< Type > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::set< Type >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeSet___len__" "', argument " "1"" of type '" "std::set< Type > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Type > * >(argp1);
  {
    try {
      result = std_set_Sl_Type_Sg____len__((std::set< Type > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeSet_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Type > *arg1 = (std::set< Type > *) 0 ;
  std::set< Type >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TypeSet_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeSet_append" "', argument " "1"" of type '" "std::set< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Type > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Type,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TypeSet_append" "', argument " "2"" of type '" "std::set< Type >::value_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TypeSet_append" "', argument " "2"" of type '" "std::set< Type >::value_type""'");
    } else {
      std::set< Type >::value_type * temp = reinterpret_cast< std::set< Type >::value_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      std_set_Sl_Type_Sg__append(arg1,SWIG_STD_MOVE(arg2));
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeSet___contains__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Type > *arg1 = (std::set< Type > *) 0 ;
  std::set< Type >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TypeSet___contains__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeSet___contains__" "', argument " "1"" of type '" "std::set< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Type > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Type,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TypeSet___contains__" "', argument " "2"" of type '" "std::set< Type >::value_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TypeSet___contains__" "', argument " "2"" of type '" "std::set< Type >::value_type""'");
    } else {
      std::set< Type >::value_type * temp = reinterpret_cast< std::set< Type >::value_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (bool)std_set_Sl_Type_Sg____contains__(arg1,SWIG_STD_MOVE(arg2));
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeSet___getitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Type > *arg1 = (std::set< Type > *) 0 ;
  std::set< Type >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::set< Type >::value_type result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TypeSet___getitem__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeSet___getitem__" "', argument " "1"" of type '" "std::set< Type > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Type > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TypeSet___getitem__" "', argument " "2"" of type '" "std::set< Type >::difference_type""'");
  } 
  arg2 = static_cast< std::set< Type >::difference_type >(val2);
  {
    try {
      try {
        result = std_set_Sl_Type_Sg____getitem__((std::set< Type > const *)arg1,SWIG_STD_MOVE(arg2));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::set< Type >::value_type(result)), SWIGTYPE_p_Type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeSet_add(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Type > *arg1 = (std::set< Type > *) 0 ;
  std::set< Type >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TypeSet_add", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeSet_add" "', argument " "1"" of type '" "std::set< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Type > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Type,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TypeSet_add" "', argument " "2"" of type '" "std::set< Type >::value_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TypeSet_add" "', argument " "2"" of type '" "std::set< Type >::value_type""'");
    } else {
      std::set< Type >::value_type * temp = reinterpret_cast< std::set< Type >::value_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      std_set_Sl_Type_Sg__add(arg1,SWIG_STD_MOVE(arg2));
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeSet_discard(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Type > *arg1 = (std::set< Type > *) 0 ;
  std::set< Type >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TypeSet_discard", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeSet_discard" "', argument " "1"" of type '" "std::set< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Type > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Type,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TypeSet_discard" "', argument " "2"" of type '" "std::set< Type >::value_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TypeSet_discard" "', argument " "2"" of type '" "std::set< Type >::value_type""'");
    } else {
      std::set< Type >::value_type * temp = reinterpret_cast< std::set< Type >::value_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      std_set_Sl_Type_Sg__discard(arg1,SWIG_STD_MOVE(arg2));
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TypeSet__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::set< Type > *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (std::set< Type > *)new std::set< Type >();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_Type_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TypeSet__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::set< Type > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::set< Type > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::set< Type,std::less< Type >,std::allocator< Type > > *ptr = (std::set< Type,std::less< Type >,std::allocator< Type > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TypeSet" "', argument " "1"" of type '" "std::set< Type > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TypeSet" "', argument " "1"" of type '" "std::set< Type > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::set< Type > *)new std::set< Type >((std::set< Type > const &)*arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_Type_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TypeSet(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_TypeSet", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    PyObject *retobj = _wrap_new_TypeSet__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__lessT_Type_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_new_TypeSet__SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 1) {
    PyObject *retobj = _wrap_new_TypeSet__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_TypeSet'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::set< Type >::set(std::less< Type > const &)\n"
    "    std::set< Type >::set()\n"
    "    std::set< Type >::set(std::set< Type > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TypeSet_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Type > *arg1 = (std::set< Type > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeSet_empty" "', argument " "1"" of type '" "std::set< Type > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Type > * >(argp1);
  {
    try {
      result = (bool)((std::set< Type > const *)arg1)->empty();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeSet_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Type > *arg1 = (std::set< Type > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::set< Type >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeSet_size" "', argument " "1"" of type '" "std::set< Type > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Type > * >(argp1);
  {
    try {
      result = ((std::set< Type > const *)arg1)->size();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeSet_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Type > *arg1 = (std::set< Type > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeSet_clear" "', argument " "1"" of type '" "std::set< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Type > * >(argp1);
  {
    try {
      (arg1)->clear();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeSet_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Type > *arg1 = (std::set< Type > *) 0 ;
  std::set< Type > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TypeSet_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeSet_swap" "', argument " "1"" of type '" "std::set< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Type > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__setT_Type_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TypeSet_swap" "', argument " "2"" of type '" "std::set< Type > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TypeSet_swap" "', argument " "2"" of type '" "std::set< Type > &""'"); 
  }
  arg2 = reinterpret_cast< std::set< Type > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeSet_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::set< Type > *arg1 = (std::set< Type > *) 0 ;
  std::set< Type >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::set< Type >::size_type result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeSet_erase" "', argument " "1"" of type '" "std::set< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Type > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TypeSet_erase" "', argument " "2"" of type '" "std::set< Type >::key_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TypeSet_erase" "', argument " "2"" of type '" "std::set< Type >::key_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::set< Type >::key_type * >(argp2);
  {
    try {
      result = (arg1)->erase((std::set< Type >::key_type const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeSet_count(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Type > *arg1 = (std::set< Type > *) 0 ;
  std::set< Type >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  std::set< Type >::size_type result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TypeSet_count", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeSet_count" "', argument " "1"" of type '" "std::set< Type > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Type > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TypeSet_count" "', argument " "2"" of type '" "std::set< Type >::key_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TypeSet_count" "', argument " "2"" of type '" "std::set< Type >::key_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::set< Type >::key_type * >(argp2);
  {
    try {
      result = ((std::set< Type > const *)arg1)->count((std::set< Type >::key_type const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeSet_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Type > *arg1 = (std::set< Type > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::set< Type >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeSet_begin" "', argument " "1"" of type '" "std::set< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Type > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< Type >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeSet_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Type > *arg1 = (std::set< Type > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::set< Type >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeSet_end" "', argument " "1"" of type '" "std::set< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Type > * >(argp1);
  {
    try {
      result = (arg1)->end();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< Type >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeSet_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Type > *arg1 = (std::set< Type > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::set< Type >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeSet_rbegin" "', argument " "1"" of type '" "std::set< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Type > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< Type >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeSet_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Type > *arg1 = (std::set< Type > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::set< Type >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeSet_rend" "', argument " "1"" of type '" "std::set< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Type > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< Type >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeSet_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::set< Type > *arg1 = (std::set< Type > *) 0 ;
  std::set< Type >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeSet_erase" "', argument " "1"" of type '" "std::set< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Type > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TypeSet_erase" "', argument " "2"" of type '" "std::set< Type >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::set< Type >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::set< Type >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TypeSet_erase" "', argument " "2"" of type '" "std::set< Type >::iterator""'");
    }
  }
  {
    try {
      std_set_Sl_Type_Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2));
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeSet_erase__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::set< Type > *arg1 = (std::set< Type > *) 0 ;
  std::set< Type >::iterator arg2 ;
  std::set< Type >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeSet_erase" "', argument " "1"" of type '" "std::set< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Type > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TypeSet_erase" "', argument " "2"" of type '" "std::set< Type >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::set< Type >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::set< Type >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TypeSet_erase" "', argument " "2"" of type '" "std::set< Type >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TypeSet_erase" "', argument " "3"" of type '" "std::set< Type >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::set< Type >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::set< Type >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TypeSet_erase" "', argument " "3"" of type '" "std::set< Type >::iterator""'");
    }
  }
  {
    try {
      std_set_Sl_Type_Sg__erase__SWIG_2(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeSet_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "TypeSet_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Type, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    return _wrap_TypeSet_erase__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_TypeSet_erase__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_TypeSet_erase__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'TypeSet_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::set< Type >::erase(std::set< Type >::key_type const &)\n"
    "    std::set< Type >::erase(std::set< Type >::iterator)\n"
    "    std::set< Type >::erase(std::set< Type >::iterator,std::set< Type >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TypeSet_find(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Type > *arg1 = (std::set< Type > *) 0 ;
  std::set< Type >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  std::set< Type >::iterator result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TypeSet_find", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeSet_find" "', argument " "1"" of type '" "std::set< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Type > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TypeSet_find" "', argument " "2"" of type '" "std::set< Type >::key_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TypeSet_find" "', argument " "2"" of type '" "std::set< Type >::key_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::set< Type >::key_type * >(argp2);
  {
    try {
      result = (arg1)->find((std::set< Type >::key_type const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< Type >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeSet_lower_bound(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Type > *arg1 = (std::set< Type > *) 0 ;
  std::set< Type >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  std::set< Type >::iterator result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TypeSet_lower_bound", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeSet_lower_bound" "', argument " "1"" of type '" "std::set< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Type > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TypeSet_lower_bound" "', argument " "2"" of type '" "std::set< Type >::key_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TypeSet_lower_bound" "', argument " "2"" of type '" "std::set< Type >::key_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::set< Type >::key_type * >(argp2);
  {
    try {
      result = (arg1)->lower_bound((std::set< Type >::key_type const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< Type >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeSet_upper_bound(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Type > *arg1 = (std::set< Type > *) 0 ;
  std::set< Type >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  std::set< Type >::iterator result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TypeSet_upper_bound", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeSet_upper_bound" "', argument " "1"" of type '" "std::set< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Type > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TypeSet_upper_bound" "', argument " "2"" of type '" "std::set< Type >::key_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TypeSet_upper_bound" "', argument " "2"" of type '" "std::set< Type >::key_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::set< Type >::key_type * >(argp2);
  {
    try {
      result = (arg1)->upper_bound((std::set< Type >::key_type const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< Type >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeSet_equal_range(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Type > *arg1 = (std::set< Type > *) 0 ;
  std::set< Type >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  SwigValueWrapper< std::pair< std::set< Type >::iterator,std::set< Type >::iterator > > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TypeSet_equal_range", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeSet_equal_range" "', argument " "1"" of type '" "std::set< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Type > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TypeSet_equal_range" "', argument " "2"" of type '" "std::set< Type >::key_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TypeSet_equal_range" "', argument " "2"" of type '" "std::set< Type >::key_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::set< Type >::key_type * >(argp2);
  {
    try {
      result = (arg1)->equal_range((std::set< Type >::key_type const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = PyTuple_New(2);
  PyTuple_SetItem(resultobj,0,SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::pair< std::set< Type >::iterator,std::set< Type >::iterator > & >(result).first),
      swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN));
  PyTuple_SetItem(resultobj,1,SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::pair< std::set< Type >::iterator,std::set< Type >::iterator > & >(result).second),
      swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeSet_insert(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Type > *arg1 = (std::set< Type > *) 0 ;
  std::set< Type >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  SwigValueWrapper< std::pair< std::set< Type >::iterator,bool > > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TypeSet_insert", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_Type_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeSet_insert" "', argument " "1"" of type '" "std::set< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Type > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TypeSet_insert" "', argument " "2"" of type '" "std::set< Type >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TypeSet_insert" "', argument " "2"" of type '" "std::set< Type >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::set< Type >::value_type * >(argp2);
  {
    try {
      result = (arg1)->insert((std::set< Type >::value_type const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = PyTuple_New(2);
  PyTuple_SetItem(resultobj,0,SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::pair< std::set< Type >::iterator,bool > & >(result).first),
      swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN));    
  PyTuple_SetItem(resultobj,1,SWIG_From_bool  (static_cast< const std::pair< std::set< Type >::iterator,bool > & >(result).second));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TypeSet(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Type > *arg1 = (std::set< Type > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_Type_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TypeSet" "', argument " "1"" of type '" "std::set< Type > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Type > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TypeSet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__setT_Type_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *TypeSet_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_Reporter_setErrorCallback(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Reporter *arg1 = (Reporter *) 0 ;
  error_reporter_callback_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Reporter_setErrorCallback", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Reporter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reporter_setErrorCallback" "', argument " "1"" of type '" "Reporter *""'"); 
  }
  arg1 = reinterpret_cast< Reporter * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_error_reporter_callback_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reporter_setErrorCallback" "', argument " "2"" of type '" "error_reporter_callback_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reporter_setErrorCallback" "', argument " "2"" of type '" "error_reporter_callback_t""'");
    } else {
      error_reporter_callback_t * temp = reinterpret_cast< error_reporter_callback_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reporter_setErrorCallback" "', argument " "3"" of type '" "void *""'"); 
  }
  {
    try {
      (arg1)->setErrorCallback(arg2,arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reporter_setPythonErrorCallback(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Reporter *arg1 = (Reporter *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Reporter_setPythonErrorCallback", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Reporter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reporter_setPythonErrorCallback" "', argument " "1"" of type '" "Reporter *""'"); 
  }
  arg1 = reinterpret_cast< Reporter * >(argp1);
  {
    if (!PyCallable_Check(swig_obj[1])) {
      PyErr_SetString(PyExc_TypeError, "Need a callable object!");
      return NULL;
    }
    arg2 = swig_obj[1];
  }
  {
    try {
      (arg1)->setPythonErrorCallback(arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reporter_clearPythonErrorCallback(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Reporter *arg1 = (Reporter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Reporter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reporter_clearPythonErrorCallback" "', argument " "1"" of type '" "Reporter *""'"); 
  }
  arg1 = reinterpret_cast< Reporter * >(argp1);
  {
    try {
      (arg1)->clearPythonErrorCallback();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reporter_reportError(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Reporter *arg1 = (Reporter *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Reporter_reportError", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Reporter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reporter_reportError" "', argument " "1"" of type '" "Reporter *""'"); 
  }
  arg1 = reinterpret_cast< Reporter * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reporter_reportError" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      Reporter_reportError(arg1,(char const *)arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reporter_reportNote(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Reporter *arg1 = (Reporter *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Reporter_reportNote", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Reporter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reporter_reportNote" "', argument " "1"" of type '" "Reporter *""'"); 
  }
  arg1 = reinterpret_cast< Reporter * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reporter_reportNote" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      Reporter_reportNote(arg1,(char const *)arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reporter_reportWarning(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Reporter *arg1 = (Reporter *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Reporter_reportWarning", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Reporter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reporter_reportWarning" "', argument " "1"" of type '" "Reporter *""'"); 
  }
  arg1 = reinterpret_cast< Reporter * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reporter_reportWarning" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      Reporter_reportWarning(arg1,(char const *)arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reporter_reportSuccess(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Reporter *arg1 = (Reporter *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Reporter_reportSuccess", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Reporter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reporter_reportSuccess" "', argument " "1"" of type '" "Reporter *""'"); 
  }
  arg1 = reinterpret_cast< Reporter * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reporter_reportSuccess" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      Reporter_reportSuccess(arg1,(char const *)arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *Reporter_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Reporter, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_getReporter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Reporter *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "getReporter", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (Reporter *)getReporter();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Reporter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_Dimensions_BASEUNITS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Dimensions_BASEUNITS is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Dimensions_BASEUNITS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(Dimensions::BASEUNITS), SWIGTYPE_p_std__string,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Dimensions_getBaseUnit(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int *arg1 = 0 ;
  unsigned int temp1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Dimensions_getBaseUnit" "', argument " "1"" of type '" "unsigned int""'");
  } 
  temp1 = static_cast< unsigned int >(val1);
  arg1 = &temp1;
  {
    try {
      result = Dimensions::getBaseUnit((unsigned int const &)*arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Dimensions__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dim_type *arg1 = (dim_type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dimensions *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dim_type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Dimensions" "', argument " "1"" of type '" "dim_type const *""'"); 
  }
  arg1 = reinterpret_cast< dim_type * >(argp1);
  {
    try {
      result = (Dimensions *)new Dimensions((dim_type const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Dimensions, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Dimensions__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Dimensions *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dimensions *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Dimensions,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Dimensions" "', argument " "1"" of type '" "Dimensions const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Dimensions" "', argument " "1"" of type '" "Dimensions const &""'"); 
  }
  arg1 = reinterpret_cast< Dimensions * >(argp1);
  {
    try {
      result = (Dimensions *)new Dimensions((Dimensions const &)*arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Dimensions, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Dimensions__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  Dimensions *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (Dimensions *)new Dimensions();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Dimensions, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Dimensions(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_Dimensions", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    PyObject *retobj = _wrap_new_Dimensions__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Dimensions, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_new_Dimensions__SWIG_1(self, argc, argv);
  }
check_2:
  
  if (argc == 1) {
    PyObject *retobj = _wrap_new_Dimensions__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Dimensions'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dimensions::Dimensions(dim_type const *)\n"
    "    Dimensions::Dimensions(Dimensions const &)\n"
    "    Dimensions::Dimensions()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Dimensions_getInternalType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Dimensions *arg1 = (Dimensions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  dim_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Dimensions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dimensions_getInternalType" "', argument " "1"" of type '" "Dimensions const *""'"); 
  }
  arg1 = reinterpret_cast< Dimensions * >(argp1);
  {
    try {
      result = (dim_type *)((Dimensions const *)arg1)->getInternalType();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dim_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dimensions_toString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Dimensions *arg1 = (Dimensions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Dimensions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dimensions_toString" "', argument " "1"" of type '" "Dimensions const *""'"); 
  }
  arg1 = reinterpret_cast< Dimensions * >(argp1);
  {
    try {
      result = ((Dimensions const *)arg1)->toString();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dimensions___lt__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Dimensions *arg1 = (Dimensions *) 0 ;
  Dimensions *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Dimensions___lt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Dimensions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dimensions___lt__" "', argument " "1"" of type '" "Dimensions const *""'"); 
  }
  arg1 = reinterpret_cast< Dimensions * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Dimensions,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dimensions___lt__" "', argument " "2"" of type '" "Dimensions const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dimensions___lt__" "', argument " "2"" of type '" "Dimensions const &""'"); 
  }
  arg2 = reinterpret_cast< Dimensions * >(argp2);
  {
    try {
      result = (bool)((Dimensions const *)arg1)->operator <((Dimensions const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Dimensions___eq__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Dimensions *arg1 = (Dimensions *) 0 ;
  Dimensions *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Dimensions___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Dimensions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dimensions___eq__" "', argument " "1"" of type '" "Dimensions const *""'"); 
  }
  arg1 = reinterpret_cast< Dimensions * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Dimensions,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dimensions___eq__" "', argument " "2"" of type '" "Dimensions const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dimensions___eq__" "', argument " "2"" of type '" "Dimensions const &""'"); 
  }
  arg2 = reinterpret_cast< Dimensions * >(argp2);
  {
    try {
      result = (bool)((Dimensions const *)arg1)->operator ==((Dimensions const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Dimensions___ne__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Dimensions *arg1 = (Dimensions *) 0 ;
  Dimensions *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Dimensions___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Dimensions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dimensions___ne__" "', argument " "1"" of type '" "Dimensions const *""'"); 
  }
  arg1 = reinterpret_cast< Dimensions * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Dimensions,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dimensions___ne__" "', argument " "2"" of type '" "Dimensions const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dimensions___ne__" "', argument " "2"" of type '" "Dimensions const &""'"); 
  }
  arg2 = reinterpret_cast< Dimensions * >(argp2);
  {
    try {
      result = (bool)((Dimensions const *)arg1)->operator !=((Dimensions const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Dimensions_isDimensionless(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Dimensions *arg1 = (Dimensions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Dimensions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dimensions_isDimensionless" "', argument " "1"" of type '" "Dimensions const *""'"); 
  }
  arg1 = reinterpret_cast< Dimensions * >(argp1);
  {
    try {
      result = (bool)((Dimensions const *)arg1)->isDimensionless();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dimensions_isWild(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Dimensions *arg1 = (Dimensions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Dimensions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dimensions_isWild" "', argument " "1"" of type '" "Dimensions const *""'"); 
  }
  arg1 = reinterpret_cast< Dimensions * >(argp1);
  {
    try {
      result = (bool)((Dimensions const *)arg1)->isWild();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dimensions_getFractionNumerator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Dimensions *arg1 = (Dimensions *) 0 ;
  unsigned int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  short result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Dimensions_getFractionNumerator", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Dimensions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dimensions_getFractionNumerator" "', argument " "1"" of type '" "Dimensions const *""'"); 
  }
  arg1 = reinterpret_cast< Dimensions * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Dimensions_getFractionNumerator" "', argument " "2"" of type '" "unsigned int""'");
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  {
    try {
      result = (short)((Dimensions const *)arg1)->getFractionNumerator((unsigned int const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dimensions_getFractionDenominator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Dimensions *arg1 = (Dimensions *) 0 ;
  unsigned int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  short result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Dimensions_getFractionDenominator", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Dimensions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dimensions_getFractionDenominator" "', argument " "1"" of type '" "Dimensions const *""'"); 
  }
  arg1 = reinterpret_cast< Dimensions * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Dimensions_getFractionDenominator" "', argument " "2"" of type '" "unsigned int""'");
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  {
    try {
      result = (short)((Dimensions const *)arg1)->getFractionDenominator((unsigned int const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Dimensions(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Dimensions *arg1 = (Dimensions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Dimensions, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Dimensions" "', argument " "1"" of type '" "Dimensions *""'"); 
  }
  arg1 = reinterpret_cast< Dimensions * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Dimensions_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Dimensions, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Dimensions_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Units__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  UnitsM *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (UnitsM *)new UnitsM();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_UnitsM, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Units__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Units *arg1 = (Units *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UnitsM *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Units, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Units" "', argument " "1"" of type '" "Units const *""'"); 
  }
  arg1 = reinterpret_cast< Units * >(argp1);
  {
    try {
      result = (UnitsM *)new UnitsM((Units const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_UnitsM, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Units__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  UnitsM *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Units" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      result = (UnitsM *)new UnitsM((char const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_UnitsM, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Units(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_Units", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    PyObject *retobj = _wrap_new_Units__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Units, 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_new_Units__SWIG_1(self, argc, argv);
  }
check_2:
  
  if (argc == 1) {
    PyObject *retobj = _wrap_new_Units__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Units'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    UnitsM::UnitsM()\n"
    "    UnitsM::UnitsM(Units const *)\n"
    "    UnitsM::UnitsM(char const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Units_getName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  UnitsM *arg1 = (UnitsM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< SymChar > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_UnitsM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Units_getName" "', argument " "1"" of type '" "UnitsM const *""'"); 
  }
  arg1 = reinterpret_cast< UnitsM * >(argp1);
  {
    try {
      result = ((UnitsM const *)arg1)->getName();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new SymChar(result)), SWIGTYPE_p_SymChar, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Units_getDimensions(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  UnitsM *arg1 = (UnitsM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Dimensions result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_UnitsM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Units_getDimensions" "', argument " "1"" of type '" "UnitsM const *""'"); 
  }
  arg1 = reinterpret_cast< UnitsM * >(argp1);
  {
    try {
      result = ((UnitsM const *)arg1)->getDimensions();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new Dimensions(result)), SWIGTYPE_p_Dimensions, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Units_getConversion(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  UnitsM *arg1 = (UnitsM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_UnitsM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Units_getConversion" "', argument " "1"" of type '" "UnitsM const *""'"); 
  }
  arg1 = reinterpret_cast< UnitsM * >(argp1);
  {
    try {
      result = (double)((UnitsM const *)arg1)->getConversion();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Units___eq__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  UnitsM *arg1 = (UnitsM *) 0 ;
  UnitsM *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Units___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_UnitsM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Units___eq__" "', argument " "1"" of type '" "UnitsM const *""'"); 
  }
  arg1 = reinterpret_cast< UnitsM * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_UnitsM,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Units___eq__" "', argument " "2"" of type '" "UnitsM const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Units___eq__" "', argument " "2"" of type '" "UnitsM const &""'"); 
  }
  arg2 = reinterpret_cast< UnitsM * >(argp2);
  {
    try {
      result = (bool)((UnitsM const *)arg1)->operator ==((UnitsM const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_delete_Units(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  UnitsM *arg1 = (UnitsM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_UnitsM, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Units" "', argument " "1"" of type '" "UnitsM *""'"); 
  }
  arg1 = reinterpret_cast< UnitsM * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Units_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_UnitsM, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Units_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Library__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  Library *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Library" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      result = (Library *)new Library((char const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Library, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Library__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  Library *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (Library *)new Library();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Library, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Library(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_Library", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    PyObject *retobj = _wrap_new_Library__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 1) {
    PyObject *retobj = _wrap_new_Library__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Library'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Library::Library(char const *)\n"
    "    Library::Library()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Library(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Library *arg1 = (Library *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Library, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Library" "', argument " "1"" of type '" "Library *""'"); 
  }
  arg1 = reinterpret_cast< Library * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Library_load(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Library *arg1 = (Library *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Library_load", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Library, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Library_load" "', argument " "1"" of type '" "Library *""'"); 
  }
  arg1 = reinterpret_cast< Library * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Library_load" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      (arg1)->load((char const *)arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Library_loadString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Library *arg1 = (Library *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Library_loadString", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Library, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Library_loadString" "', argument " "1"" of type '" "Library *""'"); 
  }
  arg1 = reinterpret_cast< Library * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Library_loadString" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Library_loadString" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try {
      (arg1)->loadString((char const *)arg2,(char const *)arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Library_getLoadErrorMessage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Library_getLoadErrorMessage" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (char *)Library::getLoadErrorMessage(arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Library_listModules__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Library *arg1 = (Library *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Library, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Library_listModules" "', argument " "1"" of type '" "Library *""'"); 
  }
  arg1 = reinterpret_cast< Library * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Library_listModules" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->listModules(arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Library_listModules__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Library *arg1 = (Library *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Library, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Library_listModules" "', argument " "1"" of type '" "Library *""'"); 
  }
  arg1 = reinterpret_cast< Library * >(argp1);
  {
    try {
      (arg1)->listModules();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Library_listModules(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Library_listModules", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    PyObject *retobj = _wrap_Library_listModules__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_Library_listModules__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Library_listModules'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Library::listModules(int const)\n"
    "    Library::listModules()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Library_findType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Library *arg1 = (Library *) 0 ;
  SymChar *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  Type *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Library_findType", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Library, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Library_findType" "', argument " "1"" of type '" "Library *""'"); 
  }
  arg1 = reinterpret_cast< Library * >(argp1);
  {
    arg2 = new SymChar(PyUnicode_AsUTF8(swig_obj[1]));
  }
  {
    try {
      result = (Type *) &(arg1)->findType((SymChar const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Library_getModules__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Library *arg1 = (Library *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< Module,std::allocator< Module > > result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Library, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Library_getModules" "', argument " "1"" of type '" "Library *""'"); 
  }
  arg1 = reinterpret_cast< Library * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Library_getModules" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (arg1)->getModules(arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< Module,std::allocator< Module > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Library_getModules__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Library *arg1 = (Library *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< Module,std::allocator< Module > > result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Library, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Library_getModules" "', argument " "1"" of type '" "Library *""'"); 
  }
  arg1 = reinterpret_cast< Library * >(argp1);
  {
    try {
      result = (arg1)->getModules();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< Module,std::allocator< Module > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Library_getModules(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Library_getModules", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    PyObject *retobj = _wrap_Library_getModules__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_Library_getModules__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Library_getModules'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Library::getModules(int const)\n"
    "    Library::getModules()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Library_getModuleTypes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Library *arg1 = (Library *) 0 ;
  Module *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  std::vector< Type,std::allocator< Type > > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Library_getModuleTypes", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Library, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Library_getModuleTypes" "', argument " "1"" of type '" "Library *""'"); 
  }
  arg1 = reinterpret_cast< Library * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Module,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Library_getModuleTypes" "', argument " "2"" of type '" "Module const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Library_getModuleTypes" "', argument " "2"" of type '" "Module const &""'"); 
  }
  arg2 = reinterpret_cast< Module * >(argp2);
  {
    try {
      result = (arg1)->getModuleTypes((Module const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< Type,std::allocator< Type > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Library_getExtMethods(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Library *arg1 = (Library *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ExtMethod,std::allocator< ExtMethod > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Library, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Library_getExtMethods" "', argument " "1"" of type '" "Library *""'"); 
  }
  arg1 = reinterpret_cast< Library * >(argp1);
  {
    try {
      result = (arg1)->getExtMethods();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< ExtMethod,std::allocator< ExtMethod > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Library_extMethodTraverse(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  int res1 ;
  int res2 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Library_extMethodTraverse", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Library_extMethodTraverse" "', argument " "1"" of type '" "void *""'"); 
  }
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Library_extMethodTraverse" "', argument " "2"" of type '" "void *""'"); 
  }
  {
    try {
      Library::extMethodTraverse(arg1,arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Library_appendToExtMethodVector(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Library *arg1 = (Library *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Library_appendToExtMethodVector", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Library, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Library_appendToExtMethodVector" "', argument " "1"" of type '" "Library *""'"); 
  }
  arg1 = reinterpret_cast< Library * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Library_appendToExtMethodVector" "', argument " "2"" of type '" "void *""'"); 
  }
  {
    try {
      (arg1)->appendToExtMethodVector(arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Library_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Library *arg1 = (Library *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Library, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Library_clear" "', argument " "1"" of type '" "Library *""'"); 
  }
  arg1 = reinterpret_cast< Library * >(argp1);
  {
    try {
      (arg1)->clear();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Library_getAnnotationDatabase(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Library *arg1 = (Library *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< AnnotationDatabase > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Library, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Library_getAnnotationDatabase" "', argument " "1"" of type '" "Library *""'"); 
  }
  arg1 = reinterpret_cast< Library * >(argp1);
  {
    try {
      result = (arg1)->getAnnotationDatabase();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new AnnotationDatabase(result)), SWIGTYPE_p_AnnotationDatabase, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Library_getUnits(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Library *arg1 = (Library *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< UnitsM,std::allocator< UnitsM > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Library, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Library_getUnits" "', argument " "1"" of type '" "Library const *""'"); 
  }
  arg1 = reinterpret_cast< Library * >(argp1);
  {
    try {
      result = ((Library const *)arg1)->getUnits();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< UnitsM,std::allocator< UnitsM > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Library_getRealAtomTypes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Library *arg1 = (Library *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::set< Type,std::less< Type >,std::allocator< Type > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Library, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Library_getRealAtomTypes" "', argument " "1"" of type '" "Library const *""'"); 
  }
  arg1 = reinterpret_cast< Library * >(argp1);
  {
    try {
      result = ((Library const *)arg1)->getRealAtomTypes();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = swig::from(static_cast< std::set< Type,std::less< Type >,std::allocator< Type > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Library_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Library, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Library_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_SymChar(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject *swig_obj[1] ;
  SymChar *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SymChar" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SymChar" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (SymChar *)new SymChar((std::string const &)*arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SymChar, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymChar_toString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SymChar *arg1 = (SymChar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SymChar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymChar_toString" "', argument " "1"" of type '" "SymChar const *""'"); 
  }
  arg1 = reinterpret_cast< SymChar * >(argp1);
  {
    try {
      result = (char *)((SymChar const *)arg1)->toString();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymChar___repr__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SymChar *arg1 = (SymChar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SymChar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymChar___repr__" "', argument " "1"" of type '" "SymChar *""'"); 
  }
  arg1 = reinterpret_cast< SymChar * >(argp1);
  {
    try {
      result = (char *)SymChar___repr__(arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SymChar(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SymChar *arg1 = (SymChar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SymChar, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SymChar" "', argument " "1"" of type '" "SymChar *""'"); 
  }
  arg1 = reinterpret_cast< SymChar * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SymChar_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SymChar, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SymChar_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_Module_getName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Module *arg1 = (Module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Module_getName" "', argument " "1"" of type '" "Module const *""'"); 
  }
  arg1 = reinterpret_cast< Module * >(argp1);
  {
    try {
      result = (char *)((Module const *)arg1)->getName();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Module_getFilename(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Module *arg1 = (Module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Module_getFilename" "', argument " "1"" of type '" "Module const *""'"); 
  }
  arg1 = reinterpret_cast< Module * >(argp1);
  {
    try {
      result = (char *)((Module const *)arg1)->getFilename();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Module_getMtime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Module *arg1 = (Module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  tm *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Module_getMtime" "', argument " "1"" of type '" "Module const *""'"); 
  }
  arg1 = reinterpret_cast< Module * >(argp1);
  {
    try {
      result = (tm *)((Module const *)arg1)->getMtime();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tm, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Module(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Module *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_Module", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (Module *)new Module();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Module, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Module(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Module *arg1 = (Module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Module, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Module" "', argument " "1"" of type '" "Module *""'"); 
  }
  arg1 = reinterpret_cast< Module * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Module_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Module, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Module_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Method__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  InitProcedure *arg1 = (InitProcedure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Method *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_InitProcedure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Method" "', argument " "1"" of type '" "InitProcedure *""'"); 
  }
  arg1 = reinterpret_cast< InitProcedure * >(argp1);
  {
    try {
      result = (Method *)new Method(arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Method, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Method__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  Method *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (Method *)new Method();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Method, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Method__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Method *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Method *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Method,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Method" "', argument " "1"" of type '" "Method const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Method" "', argument " "1"" of type '" "Method const &""'"); 
  }
  arg1 = reinterpret_cast< Method * >(argp1);
  {
    try {
      result = (Method *)new Method((Method const &)*arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Method, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Method(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_Method", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    PyObject *retobj = _wrap_new_Method__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_InitProcedure, 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_new_Method__SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 1) {
    PyObject *retobj = _wrap_new_Method__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Method'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Method::Method(InitProcedure *)\n"
    "    Method::Method()\n"
    "    Method::Method(Method const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Method(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Method *arg1 = (Method *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Method, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Method" "', argument " "1"" of type '" "Method *""'"); 
  }
  arg1 = reinterpret_cast< Method * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Method_getInternalType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Method *arg1 = (Method *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  InitProcedure *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Method, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Method_getInternalType" "', argument " "1"" of type '" "Method const *""'"); 
  }
  arg1 = reinterpret_cast< Method * >(argp1);
  {
    try {
      result = (InitProcedure *)((Method const *)arg1)->getInternalType();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_InitProcedure, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Method_getName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Method *arg1 = (Method *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Method, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Method_getName" "', argument " "1"" of type '" "Method const *""'"); 
  }
  arg1 = reinterpret_cast< Method * >(argp1);
  {
    try {
      result = (char *)((Method const *)arg1)->getName();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Method_getSym(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Method *arg1 = (Method *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< SymChar > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Method, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Method_getSym" "', argument " "1"" of type '" "Method const *""'"); 
  }
  arg1 = reinterpret_cast< Method * >(argp1);
  {
    try {
      result = ((Method const *)arg1)->getSym();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new SymChar(result)), SWIGTYPE_p_SymChar, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Method_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Method, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Method_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Name(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SymChar *arg1 = 0 ;
  PyObject *swig_obj[1] ;
  Nam *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    arg1 = new SymChar(PyUnicode_AsUTF8(swig_obj[0]));
  }
  {
    try {
      result = (Nam *)new Nam((SymChar const &)*arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Nam, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Name_getName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Nam *arg1 = (Nam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Nam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Name_getName" "', argument " "1"" of type '" "Nam const *""'"); 
  }
  arg1 = reinterpret_cast< Nam * >(argp1);
  {
    try {
      result = ((Nam const *)arg1)->getName();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Name(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Nam *arg1 = (Nam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Nam, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Name" "', argument " "1"" of type '" "Nam *""'"); 
  }
  arg1 = reinterpret_cast< Nam * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Name_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Nam, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Name_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_Compiler_instance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Compiler *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Compiler_instance", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (Compiler *)Compiler::instance();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Compiler, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compiler_getUseRelationSharing(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Compiler *arg1 = (Compiler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Compiler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compiler_getUseRelationSharing" "', argument " "1"" of type '" "Compiler const *""'"); 
  }
  arg1 = reinterpret_cast< Compiler * >(argp1);
  {
    try {
      result = (bool)((Compiler const *)arg1)->getUseRelationSharing();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compiler_setUseRelationSharing(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Compiler *arg1 = (Compiler *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Compiler_setUseRelationSharing", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Compiler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compiler_setUseRelationSharing" "', argument " "1"" of type '" "Compiler *""'"); 
  }
  arg1 = reinterpret_cast< Compiler * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Compiler_setUseRelationSharing" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->setUseRelationSharing((bool const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compiler_setBinaryCompilation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Compiler *arg1 = (Compiler *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Compiler_setBinaryCompilation", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Compiler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compiler_setBinaryCompilation" "', argument " "1"" of type '" "Compiler *""'"); 
  }
  arg1 = reinterpret_cast< Compiler * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Compiler_setBinaryCompilation" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->setBinaryCompilation((bool const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compiler_setVerbosity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Compiler *arg1 = (Compiler *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Compiler_setVerbosity", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Compiler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compiler_setVerbosity" "', argument " "1"" of type '" "Compiler *""'"); 
  }
  arg1 = reinterpret_cast< Compiler * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Compiler_setVerbosity" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->setVerbosity((int const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Compiler_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Compiler, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_getCompiler(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Compiler *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "getCompiler", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (Compiler *)getCompiler();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Compiler, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Type__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  Type *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (Type *)new Type();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Type, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Type__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  TypeDescription *arg1 = (TypeDescription *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Type *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_TypeDescription, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Type" "', argument " "1"" of type '" "TypeDescription const *""'"); 
  }
  arg1 = reinterpret_cast< TypeDescription * >(argp1);
  {
    try {
      result = (Type *)new Type((TypeDescription const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Type, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Type(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_Type", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    PyObject *retobj = _wrap_new_Type__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 1) {
    PyObject *retobj = _wrap_new_Type__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Type'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Type::Type()\n"
    "    Type::Type(TypeDescription const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Type_getName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Type *arg1 = (Type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< SymChar > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Type_getName" "', argument " "1"" of type '" "Type const *""'"); 
  }
  arg1 = reinterpret_cast< Type * >(argp1);
  {
    try {
      result = ((Type const *)arg1)->getName();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new SymChar(result)), SWIGTYPE_p_SymChar, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Type_getParameterCount(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Type *arg1 = (Type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Type_getParameterCount" "', argument " "1"" of type '" "Type const *""'"); 
  }
  arg1 = reinterpret_cast< Type * >(argp1);
  {
    try {
      result = (int)((Type const *)arg1)->getParameterCount();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Type_getInternalType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Type *arg1 = (Type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  TypeDescription *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Type_getInternalType" "', argument " "1"" of type '" "Type const *""'"); 
  }
  arg1 = reinterpret_cast< Type * >(argp1);
  {
    try {
      result = (TypeDescription *)((Type const *)arg1)->getInternalType();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TypeDescription, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Type_getSimulation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Type *arg1 = (Type *) 0 ;
  SymChar *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  SwigValueWrapper< Simulation > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Type_getSimulation", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Type_getSimulation" "', argument " "1"" of type '" "Type *""'"); 
  }
  arg1 = reinterpret_cast< Type * >(argp1);
  {
    arg2 = new SymChar(PyUnicode_AsUTF8(swig_obj[1]));
  }
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Type_getSimulation" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (arg1)->getSimulation((SymChar const &)*arg2,arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new Simulation(result)), SWIGTYPE_p_Simulation, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Type_getDimensions(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Type *arg1 = (Type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Dimensions result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Type_getDimensions" "', argument " "1"" of type '" "Type const *""'"); 
  }
  arg1 = reinterpret_cast< Type * >(argp1);
  {
    try {
      result = ((Type const *)arg1)->getDimensions();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new Dimensions(result)), SWIGTYPE_p_Dimensions, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Type_getMethods(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Type *arg1 = (Type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Method,std::allocator< Method > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Type_getMethods" "', argument " "1"" of type '" "Type const *""'"); 
  }
  arg1 = reinterpret_cast< Type * >(argp1);
  {
    try {
      result = ((Type const *)arg1)->getMethods();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< Method,std::allocator< Method > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Type_getMethod(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Type *arg1 = (Type *) 0 ;
  SymChar *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  Method result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Type_getMethod", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Type_getMethod" "', argument " "1"" of type '" "Type const *""'"); 
  }
  arg1 = reinterpret_cast< Type * >(argp1);
  {
    arg2 = new SymChar(PyUnicode_AsUTF8(swig_obj[1]));
  }
  {
    try {
      result = ((Type const *)arg1)->getMethod((SymChar const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new Method(result)), SWIGTYPE_p_Method, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Type_isRefinedSolverVar(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Type *arg1 = (Type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Type_isRefinedSolverVar" "', argument " "1"" of type '" "Type const *""'"); 
  }
  arg1 = reinterpret_cast< Type * >(argp1);
  {
    try {
      result = (bool)((Type const *)arg1)->isRefinedSolverVar();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Type_isRefinedAtom(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Type *arg1 = (Type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Type_isRefinedAtom" "', argument " "1"" of type '" "Type const *""'"); 
  }
  arg1 = reinterpret_cast< Type * >(argp1);
  {
    try {
      result = (bool)((Type const *)arg1)->isRefinedAtom();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Type_isRefinedReal(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Type *arg1 = (Type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Type_isRefinedReal" "', argument " "1"" of type '" "Type const *""'"); 
  }
  arg1 = reinterpret_cast< Type * >(argp1);
  {
    try {
      result = (bool)((Type const *)arg1)->isRefinedReal();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Type_isRefinedConstant(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Type *arg1 = (Type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Type_isRefinedConstant" "', argument " "1"" of type '" "Type const *""'"); 
  }
  arg1 = reinterpret_cast< Type * >(argp1);
  {
    try {
      result = (bool)((Type const *)arg1)->isRefinedConstant();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Type_isFundamental(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Type *arg1 = (Type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Type_isFundamental" "', argument " "1"" of type '" "Type const *""'"); 
  }
  arg1 = reinterpret_cast< Type * >(argp1);
  {
    try {
      result = (bool)((Type const *)arg1)->isFundamental();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Type_isModel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Type *arg1 = (Type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Type_isModel" "', argument " "1"" of type '" "Type const *""'"); 
  }
  arg1 = reinterpret_cast< Type * >(argp1);
  {
    try {
      result = (bool)((Type const *)arg1)->isModel();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Type_hasParameters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Type *arg1 = (Type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Type_hasParameters" "', argument " "1"" of type '" "Type const *""'"); 
  }
  arg1 = reinterpret_cast< Type * >(argp1);
  {
    try {
      result = (bool)((Type const *)arg1)->hasParameters();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Type_findMember(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Type *arg1 = (Type *) 0 ;
  SymChar *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  Type *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Type_findMember", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Type_findMember" "', argument " "1"" of type '" "Type *""'"); 
  }
  arg1 = reinterpret_cast< Type * >(argp1);
  {
    arg2 = new SymChar(PyUnicode_AsUTF8(swig_obj[1]));
  }
  {
    try {
      result = (Type *) &(arg1)->findMember((SymChar const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Type_getModule(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Type *arg1 = (Type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Module result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Type_getModule" "', argument " "1"" of type '" "Type const *""'"); 
  }
  arg1 = reinterpret_cast< Type * >(argp1);
  {
    try {
      result = ((Type const *)arg1)->getModule();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new Module(result)), SWIGTYPE_p_Module, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Type___lt__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Type *arg1 = (Type *) 0 ;
  Type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Type___lt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Type___lt__" "', argument " "1"" of type '" "Type const *""'"); 
  }
  arg1 = reinterpret_cast< Type * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Type___lt__" "', argument " "2"" of type '" "Type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Type___lt__" "', argument " "2"" of type '" "Type const &""'"); 
  }
  arg2 = reinterpret_cast< Type * >(argp2);
  {
    try {
      result = (bool)((Type const *)arg1)->operator <((Type const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Type___repr__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Type *arg1 = (Type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Type___repr__" "', argument " "1"" of type '" "Type *""'"); 
  }
  arg1 = reinterpret_cast< Type * >(argp1);
  {
    try {
      result = (char *)Type___repr__(arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Type(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Type *arg1 = (Type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Type, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Type" "', argument " "1"" of type '" "Type *""'"); 
  }
  arg1 = reinterpret_cast< Type * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Type_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Type, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Type_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Instance__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Instance *arg1 = (Instance *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Instanc *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instance, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Instance" "', argument " "1"" of type '" "Instance *""'"); 
  }
  arg1 = reinterpret_cast< Instance * >(argp1);
  {
    try {
      result = (Instanc *)new Instanc(arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Instanc, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Instance__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Instance *arg1 = (Instance *) 0 ;
  SymChar *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Instanc *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instance, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Instance" "', argument " "1"" of type '" "Instance *""'"); 
  }
  arg1 = reinterpret_cast< Instance * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_SymChar,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Instance" "', argument " "2"" of type '" "SymChar &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Instance" "', argument " "2"" of type '" "SymChar &""'"); 
  }
  arg2 = reinterpret_cast< SymChar * >(argp2);
  {
    try {
      result = (Instanc *)new Instanc(arg1,*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Instanc, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Instance(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_Instance", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    PyObject *retobj = _wrap_new_Instance__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_new_Instance__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Instance'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Instanc::Instanc(Instance *)\n"
    "    Instanc::Instanc(Instance *,SymChar &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Instance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Instance" "', argument " "1"" of type '" "Instanc *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_getChildren(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Instanc,std::allocator< Instanc > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_getChildren" "', argument " "1"" of type '" "Instanc *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      result = (arg1)->getChildren();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< Instanc,std::allocator< Instanc > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_getKindStr(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_getKindStr" "', argument " "1"" of type '" "Instanc const *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      result = ((Instanc const *)arg1)->getKindStr();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_getName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SymChar *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_getName" "', argument " "1"" of type '" "Instanc *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      result = (SymChar *) &(arg1)->getName();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SymChar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_getType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_getType" "', argument " "1"" of type '" "Instanc const *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      result = ((Instanc const *)arg1)->getType();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new Type(result)), SWIGTYPE_p_Type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_isAtom(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_isAtom" "', argument " "1"" of type '" "Instanc const *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      result = (bool)((Instanc const *)arg1)->isAtom();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_isFixed(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_isFixed" "', argument " "1"" of type '" "Instanc const *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      result = (bool)((Instanc const *)arg1)->isFixed();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_isIncluded(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_isIncluded" "', argument " "1"" of type '" "Instanc const *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      result = (bool)((Instanc const *)arg1)->isIncluded();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_isFund(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_isFund" "', argument " "1"" of type '" "Instanc const *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      result = (bool)((Instanc const *)arg1)->isFund();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_isConst(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_isConst" "', argument " "1"" of type '" "Instanc const *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      result = (bool)((Instanc const *)arg1)->isConst();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_isAssigned(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_isAssigned" "', argument " "1"" of type '" "Instanc const *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      result = (bool)((Instanc const *)arg1)->isAssigned();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_isCompound(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_isCompound" "', argument " "1"" of type '" "Instanc const *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      result = (bool)((Instanc const *)arg1)->isCompound();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_isRelation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_isRelation" "', argument " "1"" of type '" "Instanc const *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      result = (bool)((Instanc const *)arg1)->isRelation();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_isLogicalRelation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_isLogicalRelation" "', argument " "1"" of type '" "Instanc const *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      result = (bool)((Instanc const *)arg1)->isLogicalRelation();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_isWhen(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_isWhen" "', argument " "1"" of type '" "Instanc const *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      result = (bool)((Instanc const *)arg1)->isWhen();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_isSet(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_isSet" "', argument " "1"" of type '" "Instanc const *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      result = (bool)((Instanc const *)arg1)->isSet();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_isSetInt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_isSetInt" "', argument " "1"" of type '" "Instanc const *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      result = (bool)((Instanc const *)arg1)->isSetInt();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_isSetString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_isSetString" "', argument " "1"" of type '" "Instanc const *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      result = (bool)((Instanc const *)arg1)->isSetString();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_isSetEmpty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_isSetEmpty" "', argument " "1"" of type '" "Instanc const *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      result = (bool)((Instanc const *)arg1)->isSetEmpty();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_isArray(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_isArray" "', argument " "1"" of type '" "Instanc const *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      result = (bool)((Instanc const *)arg1)->isArray();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_isDefined(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_isDefined" "', argument " "1"" of type '" "Instanc const *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      result = (bool)((Instanc const *)arg1)->isDefined();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_isBool(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_isBool" "', argument " "1"" of type '" "Instanc const *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      result = (bool)((Instanc const *)arg1)->isBool();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_isInt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_isInt" "', argument " "1"" of type '" "Instanc const *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      result = (bool)((Instanc const *)arg1)->isInt();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_isSymbol(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_isSymbol" "', argument " "1"" of type '" "Instanc const *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      result = (bool)((Instanc const *)arg1)->isSymbol();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_isReal(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_isReal" "', argument " "1"" of type '" "Instanc const *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      result = (bool)((Instanc const *)arg1)->isReal();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_isModel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_isModel" "', argument " "1"" of type '" "Instanc const *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      result = (bool)((Instanc const *)arg1)->isModel();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_getRealValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_getRealValue" "', argument " "1"" of type '" "Instanc const *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      result = (double)((Instanc const *)arg1)->getRealValue();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_isDimensionless(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_isDimensionless" "', argument " "1"" of type '" "Instanc const *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      result = (bool)((Instanc const *)arg1)->isDimensionless();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_getDimensions(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Dimensions result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_getDimensions" "', argument " "1"" of type '" "Instanc const *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      result = ((Instanc const *)arg1)->getDimensions();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new Dimensions(result)), SWIGTYPE_p_Dimensions, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_getBoolValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_getBoolValue" "', argument " "1"" of type '" "Instanc const *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      result = (bool)((Instanc const *)arg1)->getBoolValue();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_getIntValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  long result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_getIntValue" "', argument " "1"" of type '" "Instanc const *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      result = (long)((Instanc const *)arg1)->getIntValue();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_getSymbolValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< SymChar > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_getSymbolValue" "', argument " "1"" of type '" "Instanc const *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      result = ((Instanc const *)arg1)->getSymbolValue();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new SymChar(result)), SWIGTYPE_p_SymChar, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_getValueAsString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_getValueAsString" "', argument " "1"" of type '" "Instanc const *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      result = ((Instanc const *)arg1)->getValueAsString();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_getWhenAsString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  Instanc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  std::string result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Instance_getWhenAsString", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_getWhenAsString" "', argument " "1"" of type '" "Instanc const *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Instanc,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Instance_getWhenAsString" "', argument " "2"" of type '" "Instanc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Instance_getWhenAsString" "', argument " "2"" of type '" "Instanc const &""'"); 
  }
  arg2 = reinterpret_cast< Instanc * >(argp2);
  {
    try {
      result = ((Instanc const *)arg1)->getWhenAsString((Instanc const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_getLogrelAsString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  Instanc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  std::string result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Instance_getLogrelAsString", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_getLogrelAsString" "', argument " "1"" of type '" "Instanc const *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Instanc,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Instance_getLogrelAsString" "', argument " "2"" of type '" "Instanc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Instance_getLogrelAsString" "', argument " "2"" of type '" "Instanc const &""'"); 
  }
  arg2 = reinterpret_cast< Instanc * >(argp2);
  {
    try {
      result = ((Instanc const *)arg1)->getLogrelAsString((Instanc const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_getRelationAsString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  Instanc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  std::string result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Instance_getRelationAsString", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_getRelationAsString" "', argument " "1"" of type '" "Instanc const *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Instanc,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Instance_getRelationAsString" "', argument " "2"" of type '" "Instanc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Instance_getRelationAsString" "', argument " "2"" of type '" "Instanc const &""'"); 
  }
  arg2 = reinterpret_cast< Instanc * >(argp2);
  {
    try {
      result = ((Instanc const *)arg1)->getRelationAsString((Instanc const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_getResidual(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_getResidual" "', argument " "1"" of type '" "Instanc const *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      result = (double)((Instanc const *)arg1)->getResidual();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_getLogicalResidual(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_getLogicalResidual" "', argument " "1"" of type '" "Instanc const *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      result = (bool)((Instanc const *)arg1)->getLogicalResidual();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_getPlot(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< Plot > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_getPlot" "', argument " "1"" of type '" "Instanc const *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      result = ((Instanc const *)arg1)->getPlot();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new Plot(result)), SWIGTYPE_p_Plot, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_isPlottable(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_isPlottable" "', argument " "1"" of type '" "Instanc const *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      result = (bool)((Instanc const *)arg1)->isPlottable();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_getSetIntValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< ASCXX_Set< long > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_getSetIntValue" "', argument " "1"" of type '" "Instanc const *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      result = ((Instanc const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR getSetValue< long >();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ASCXX_Set< long >(result)), SWIGTYPE_p_ASCXX_SetT_long_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_getSetStringValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< ASCXX_Set< SymChar > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_getSetStringValue" "', argument " "1"" of type '" "Instanc const *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      result = ((Instanc const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR getSetValue< SymChar >();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ASCXX_Set< SymChar >(result)), SWIGTYPE_p_ASCXX_SetT_SymChar_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_isChildless(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_isChildless" "', argument " "1"" of type '" "Instanc const *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      result = (bool)((Instanc const *)arg1)->isChildless();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_setFixed__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_setFixed" "', argument " "1"" of type '" "Instanc *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Instance_setFixed" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->setFixed((bool const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_setFixed__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_setFixed" "', argument " "1"" of type '" "Instanc *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      (arg1)->setFixed();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_setFixed(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Instance_setFixed", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    PyObject *retobj = _wrap_Instance_setFixed__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_Instance_setFixed__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Instance_setFixed'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Instanc::setFixed(bool const &)\n"
    "    Instanc::setFixed()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Instance_setIncluded__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_setIncluded" "', argument " "1"" of type '" "Instanc *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Instance_setIncluded" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->setIncluded((bool const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_setIncluded__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_setIncluded" "', argument " "1"" of type '" "Instanc *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      (arg1)->setIncluded();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_setIncluded(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Instance_setIncluded", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    PyObject *retobj = _wrap_Instance_setIncluded__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_Instance_setIncluded__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Instance_setIncluded'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Instanc::setIncluded(bool const &)\n"
    "    Instanc::setIncluded()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Instance_setRealValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Instance_setRealValue", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_setRealValue" "', argument " "1"" of type '" "Instanc *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Instance_setRealValue" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->setRealValue((double const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_setRealValueWithUnits(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  double *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Instance_setRealValueWithUnits", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_setRealValueWithUnits" "', argument " "1"" of type '" "Instanc *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Instance_setRealValueWithUnits" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Instance_setRealValueWithUnits" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try {
      (arg1)->setRealValueWithUnits((double const &)*arg2,(char const *)arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_setBoolValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Instance_setBoolValue", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_setBoolValue" "', argument " "1"" of type '" "Instanc *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Instance_setBoolValue" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->setBoolValue((bool const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_setIntValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long temp2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Instance_setIntValue", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_setIntValue" "', argument " "1"" of type '" "Instanc *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  ecode2 = SWIG_AsVal_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Instance_setIntValue" "', argument " "2"" of type '" "long""'");
  } 
  temp2 = static_cast< long >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->setIntValue((long const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_setSymbolValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  SymChar *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Instance_setSymbolValue", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_setSymbolValue" "', argument " "1"" of type '" "Instanc *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    arg2 = new SymChar(PyUnicode_AsUTF8(swig_obj[1]));
  }
  {
    try {
      (arg1)->setSymbolValue((SymChar const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_write(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Instance_write", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_write" "', argument " "1"" of type '" "Instanc *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Instance_write" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      (arg1)->write((char const *)arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_getStatus(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  InstanceStatus result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_getStatus" "', argument " "1"" of type '" "Instanc const *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      result = (InstanceStatus)((Instanc const *)arg1)->getStatus();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_setLowerBound(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Instance_setLowerBound", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_setLowerBound" "', argument " "1"" of type '" "Instanc *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Instance_setLowerBound" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->setLowerBound((double const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_setUpperBound(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Instance_setUpperBound", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_setUpperBound" "', argument " "1"" of type '" "Instanc *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Instance_setUpperBound" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->setUpperBound((double const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_setNominal(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Instance_setNominal", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_setNominal" "', argument " "1"" of type '" "Instanc *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Instance_setNominal" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->setNominal((double const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_getLowerBound(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_getLowerBound" "', argument " "1"" of type '" "Instanc const *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      result = (double)((Instanc const *)arg1)->getLowerBound();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_getUpperBound(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_getUpperBound" "', argument " "1"" of type '" "Instanc const *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      result = (double)((Instanc const *)arg1)->getUpperBound();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_getNominal(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_getNominal" "', argument " "1"" of type '" "Instanc const *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      result = (double)((Instanc const *)arg1)->getNominal();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_getClique(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Instanc,std::allocator< Instanc > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_getClique" "', argument " "1"" of type '" "Instanc const *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      result = ((Instanc const *)arg1)->getClique();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< Instanc,std::allocator< Instanc > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance_getAliases(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance_getAliases" "', argument " "1"" of type '" "Instanc const *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      result = ((Instanc const *)arg1)->getAliases();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance___repr__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance___repr__" "', argument " "1"" of type '" "Instanc *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      result = (char *)Instanc___repr__(arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance___getattr__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  SwigValueWrapper< Instanc > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Instance___getattr__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance___getattr__" "', argument " "1"" of type '" "Instanc *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Instance___getattr__" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      result = Instanc___getattr__(arg1,(char const *)arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new Instanc(result)), SWIGTYPE_p_Instanc, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance___getitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long temp2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  SwigValueWrapper< Instanc > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Instance___getitem__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance___getitem__" "', argument " "1"" of type '" "Instanc *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  ecode2 = SWIG_AsVal_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Instance___getitem__" "', argument " "2"" of type '" "long""'");
  } 
  temp2 = static_cast< long >(val2);
  arg2 = &temp2;
  {
    try {
      result = Instanc___getitem__(arg1,(long const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new Instanc(result)), SWIGTYPE_p_Instanc, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instance___float__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Instanc *arg1 = (Instanc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instanc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instance___float__" "', argument " "1"" of type '" "Instanc *""'"); 
  }
  arg1 = reinterpret_cast< Instanc * >(argp1);
  {
    try {
      result = (double)Instanc___float__(arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Instance_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Instanc, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Instance_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_Registry_setPointer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Registry *arg1 = (Registry *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Registry_setPointer", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Registry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Registry_setPointer" "', argument " "1"" of type '" "Registry *""'"); 
  }
  arg1 = reinterpret_cast< Registry * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Registry_setPointer" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Registry_setPointer" "', argument " "3"" of type '" "void *""'"); 
  }
  {
    try {
      (arg1)->setPointer((char const *)arg2,arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Registry_getInstance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Registry *arg1 = (Registry *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  Instanc *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Registry_getInstance", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Registry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Registry_getInstance" "', argument " "1"" of type '" "Registry *""'"); 
  }
  arg1 = reinterpret_cast< Registry * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Registry_getInstance" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      result = (Instanc *)(arg1)->getInstance((char const *)arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Instanc, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Registry_getSimulation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Registry *arg1 = (Registry *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  Simulation *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Registry_getSimulation", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Registry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Registry_getSimulation" "', argument " "1"" of type '" "Registry *""'"); 
  }
  arg1 = reinterpret_cast< Registry * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Registry_getSimulation" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      result = (Simulation *) &(arg1)->getSimulation((char const *)arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Simulation, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Registry_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Registry *arg1 = (Registry *) 0 ;
  char *arg2 = (char *) 0 ;
  PyObject *arg3 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Registry_set", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Registry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Registry_set" "', argument " "1"" of type '" "Registry *""'"); 
  }
  arg1 = reinterpret_cast< Registry * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Registry_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  arg3 = swig_obj[2];
  {
    try {
      Registry_set(arg1,(char const *)arg2,arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Registry(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Registry *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_Registry", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (Registry *)new Registry();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Registry, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Registry(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Registry *arg1 = (Registry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Registry, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Registry" "', argument " "1"" of type '" "Registry *""'"); 
  }
  arg1 = reinterpret_cast< Registry * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Registry_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Registry, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Registry_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_shutdown(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "shutdown", 0, 0, 0)) SWIG_fail;
  {
    try {
      shutdown();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Solver__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  Solver *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (Solver *)new Solver();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Solver, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Solver__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Solver *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Solver *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Solver,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Solver" "', argument " "1"" of type '" "Solver const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Solver" "', argument " "1"" of type '" "Solver const &""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  {
    try {
      result = (Solver *)new Solver((Solver const &)*arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Solver, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Solver__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  Solver *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Solver" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Solver" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (Solver *)new Solver((std::string const &)*arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Solver, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Solver(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_Solver", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    PyObject *retobj = _wrap_new_Solver__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Solver, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_new_Solver__SWIG_1(self, argc, argv);
  }
check_2:
  
  if (argc == 1) {
    PyObject *retobj = _wrap_new_Solver__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Solver'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Solver::Solver()\n"
    "    Solver::Solver(Solver const &)\n"
    "    Solver::Solver(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_getIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_getIndex" "', argument " "1"" of type '" "Solver const *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  {
    try {
      result = (int)((Solver const *)arg1)->getIndex();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_getName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_getName" "', argument " "1"" of type '" "Solver const *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  {
    try {
      result = (std::string *) &((Solver const *)arg1)->getName();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Solver(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Solver, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Solver" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Solver_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Solver, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Solver_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_getSolvers(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Solver,std::allocator< Solver > > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "getSolvers", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = getSolvers();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< Solver,std::allocator< Solver > >(result)), SWIGTYPE_p_std__vectorT_Solver_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SingularityInfo_isSingular(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SingularityInfo *arg1 = (SingularityInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SingularityInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SingularityInfo_isSingular" "', argument " "1"" of type '" "SingularityInfo const *""'"); 
  }
  arg1 = reinterpret_cast< SingularityInfo * >(argp1);
  {
    try {
      result = (bool)((SingularityInfo const *)arg1)->isSingular();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SingularityInfo_rels_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SingularityInfo *arg1 = (SingularityInfo *) 0 ;
  std::vector< Relation,std::allocator< Relation > > *arg2 = (std::vector< Relation,std::allocator< Relation > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SingularityInfo_rels_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SingularityInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SingularityInfo_rels_set" "', argument " "1"" of type '" "SingularityInfo *""'"); 
  }
  arg1 = reinterpret_cast< SingularityInfo * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_Relation_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SingularityInfo_rels_set" "', argument " "2"" of type '" "std::vector< Relation,std::allocator< Relation > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Relation,std::allocator< Relation > > * >(argp2);
  if (arg1) (arg1)->rels = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SingularityInfo_rels_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SingularityInfo *arg1 = (SingularityInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Relation,std::allocator< Relation > > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SingularityInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SingularityInfo_rels_get" "', argument " "1"" of type '" "SingularityInfo *""'"); 
  }
  arg1 = reinterpret_cast< SingularityInfo * >(argp1);
  result = (std::vector< Relation,std::allocator< Relation > > *)& ((arg1)->rels);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Relation_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SingularityInfo_vars_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SingularityInfo *arg1 = (SingularityInfo *) 0 ;
  std::vector< Variable,std::allocator< Variable > > *arg2 = (std::vector< Variable,std::allocator< Variable > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SingularityInfo_vars_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SingularityInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SingularityInfo_vars_set" "', argument " "1"" of type '" "SingularityInfo *""'"); 
  }
  arg1 = reinterpret_cast< SingularityInfo * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_Variable_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SingularityInfo_vars_set" "', argument " "2"" of type '" "std::vector< Variable,std::allocator< Variable > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Variable,std::allocator< Variable > > * >(argp2);
  if (arg1) (arg1)->vars = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SingularityInfo_vars_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SingularityInfo *arg1 = (SingularityInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Variable,std::allocator< Variable > > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SingularityInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SingularityInfo_vars_get" "', argument " "1"" of type '" "SingularityInfo *""'"); 
  }
  arg1 = reinterpret_cast< SingularityInfo * >(argp1);
  result = (std::vector< Variable,std::allocator< Variable > > *)& ((arg1)->vars);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Variable_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SingularityInfo_freeablevars_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SingularityInfo *arg1 = (SingularityInfo *) 0 ;
  std::vector< Variable,std::allocator< Variable > > *arg2 = (std::vector< Variable,std::allocator< Variable > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SingularityInfo_freeablevars_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SingularityInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SingularityInfo_freeablevars_set" "', argument " "1"" of type '" "SingularityInfo *""'"); 
  }
  arg1 = reinterpret_cast< SingularityInfo * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_Variable_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SingularityInfo_freeablevars_set" "', argument " "2"" of type '" "std::vector< Variable,std::allocator< Variable > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Variable,std::allocator< Variable > > * >(argp2);
  if (arg1) (arg1)->freeablevars = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SingularityInfo_freeablevars_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SingularityInfo *arg1 = (SingularityInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Variable,std::allocator< Variable > > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SingularityInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SingularityInfo_freeablevars_get" "', argument " "1"" of type '" "SingularityInfo *""'"); 
  }
  arg1 = reinterpret_cast< SingularityInfo * >(argp1);
  result = (std::vector< Variable,std::allocator< Variable > > *)& ((arg1)->freeablevars);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Variable_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SingularityInfo(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SingularityInfo *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_SingularityInfo", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (SingularityInfo *)new SingularityInfo();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SingularityInfo, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SingularityInfo(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SingularityInfo *arg1 = (SingularityInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SingularityInfo, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SingularityInfo" "', argument " "1"" of type '" "SingularityInfo *""'"); 
  }
  arg1 = reinterpret_cast< SingularityInfo * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SingularityInfo_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SingularityInfo, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SingularityInfo_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Simulation__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Instance *arg1 = (Instance *) 0 ;
  SymChar *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Simulation *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Instance, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Simulation" "', argument " "1"" of type '" "Instance *""'"); 
  }
  arg1 = reinterpret_cast< Instance * >(argp1);
  {
    arg2 = new SymChar(PyUnicode_AsUTF8(swig_obj[1]));
  }
  {
    try {
      result = (Simulation *)new Simulation(arg1,(SymChar const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Simulation, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Simulation__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Simulation *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Simulation *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Simulation,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Simulation" "', argument " "1"" of type '" "Simulation const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Simulation" "', argument " "1"" of type '" "Simulation const &""'"); 
  }
  arg1 = reinterpret_cast< Simulation * >(argp1);
  {
    try {
      result = (Simulation *)new Simulation((Simulation const &)*arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Simulation, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Simulation(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_Simulation", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    PyObject *retobj = _wrap_new_Simulation__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_new_Simulation__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Simulation'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Simulation::Simulation(Instance *,SymChar const &)\n"
    "    Simulation::Simulation(Simulation const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Simulation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Simulation *arg1 = (Simulation *) 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], SWIG_as_voidptrptr(&arg1), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Simulation" "', argument " "1"" of type '" "Simulation *""'");
  }
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulation_getModel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Simulation *arg1 = (Simulation *) 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Instanc *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], SWIG_as_voidptrptr(&arg1), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulation_getModel" "', argument " "1"" of type '" "Simulation *""'");
  }
  {
    try {
      result = (Instanc *) &(arg1)->getModel();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Instanc, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulation_runDefaultMethod(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Simulation *arg1 = (Simulation *) 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], SWIG_as_voidptrptr(&arg1), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulation_runDefaultMethod" "', argument " "1"" of type '" "Simulation *""'");
  }
  {
    try {
      (arg1)->runDefaultMethod();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulation_run__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Simulation *arg1 = (Simulation *) 0 ;
  Method *arg2 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], SWIG_as_voidptrptr(&arg1), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulation_run" "', argument " "1"" of type '" "Simulation *""'");
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Method,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Simulation_run" "', argument " "2"" of type '" "Method const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Simulation_run" "', argument " "2"" of type '" "Method const &""'"); 
  }
  arg2 = reinterpret_cast< Method * >(argp2);
  {
    try {
      (arg1)->run((Method const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulation_run__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Simulation *arg1 = (Simulation *) 0 ;
  Method *arg2 = 0 ;
  Instanc *arg3 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], SWIG_as_voidptrptr(&arg1), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulation_run" "', argument " "1"" of type '" "Simulation *""'");
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Method,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Simulation_run" "', argument " "2"" of type '" "Method const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Simulation_run" "', argument " "2"" of type '" "Method const &""'"); 
  }
  arg2 = reinterpret_cast< Method * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Instanc,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Simulation_run" "', argument " "3"" of type '" "Instanc &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Simulation_run" "', argument " "3"" of type '" "Instanc &""'"); 
  }
  arg3 = reinterpret_cast< Instanc * >(argp3);
  {
    try {
      (arg1)->run((Method const &)*arg2,*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulation_run(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Simulation_run", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_Simulation_run__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_Simulation_run__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Simulation_run'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Simulation::run(Method const &)\n"
    "    Simulation::run(Method const &,Instanc &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Simulation_checkInstance__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Simulation *arg1 = (Simulation *) 0 ;
  int *arg2 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], SWIG_as_voidptrptr(&arg1), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulation_checkInstance" "', argument " "1"" of type '" "Simulation *""'");
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Simulation_checkInstance" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->checkInstance((int const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulation_checkInstance__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Simulation *arg1 = (Simulation *) 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], SWIG_as_voidptrptr(&arg1), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulation_checkInstance" "', argument " "1"" of type '" "Simulation *""'");
  }
  {
    try {
      (arg1)->checkInstance();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulation_checkInstance(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Simulation_checkInstance", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    PyObject *retobj = _wrap_Simulation_checkInstance__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_Simulation_checkInstance__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Simulation_checkInstance'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Simulation::checkInstance(int const &)\n"
    "    Simulation::checkInstance()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Simulation_checkTokens(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Simulation *arg1 = (Simulation *) 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], SWIG_as_voidptrptr(&arg1), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulation_checkTokens" "', argument " "1"" of type '" "Simulation *""'");
  }
  {
    try {
      (arg1)->checkTokens();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulation_checkStructure(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Simulation *arg1 = (Simulation *) 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], SWIG_as_voidptrptr(&arg1), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulation_checkStructure" "', argument " "1"" of type '" "Simulation *""'");
  }
  {
    try {
      (arg1)->checkStructure();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulation_checkStatistics(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Simulation *arg1 = (Simulation *) 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], SWIG_as_voidptrptr(&arg1), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulation_checkStatistics" "', argument " "1"" of type '" "Simulation *""'");
  }
  {
    try {
      (arg1)->checkStatistics();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulation_checkDimensions(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Simulation *arg1 = (Simulation *) 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], SWIG_as_voidptrptr(&arg1), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulation_checkDimensions" "', argument " "1"" of type '" "Simulation *""'");
  }
  {
    try {
      (arg1)->checkDimensions();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulation_build(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Simulation *arg1 = (Simulation *) 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], SWIG_as_voidptrptr(&arg1), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulation_build" "', argument " "1"" of type '" "Simulation *""'");
  }
  {
    try {
      (arg1)->build();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulation_checkDoF(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Simulation *arg1 = (Simulation *) 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  enum StructuralStatus result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], SWIG_as_voidptrptr(&arg1), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulation_checkDoF" "', argument " "1"" of type '" "Simulation const *""'");
  }
  {
    try {
      result = (enum StructuralStatus)((Simulation const *)arg1)->checkDoF();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulation_checkStructuralSingularity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Simulation *arg1 = (Simulation *) 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], SWIG_as_voidptrptr(&arg1), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulation_checkStructuralSingularity" "', argument " "1"" of type '" "Simulation *""'");
  }
  {
    try {
      result = (bool)(arg1)->checkStructuralSingularity();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulation_getSingularityInfo(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Simulation *arg1 = (Simulation *) 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SingularityInfo *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], SWIG_as_voidptrptr(&arg1), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulation_getSingularityInfo" "', argument " "1"" of type '" "Simulation const *""'");
  }
  {
    try {
      result = (SingularityInfo *) &((Simulation const *)arg1)->getSingularityInfo();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SingularityInfo, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulation_solve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Simulation *arg1 = (Simulation *) 0 ;
  Solver arg2 ;
  SolverReporter *arg3 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Simulation_solve", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], SWIG_as_voidptrptr(&arg1), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulation_solve" "', argument " "1"" of type '" "Simulation *""'");
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Solver,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Simulation_solve" "', argument " "2"" of type '" "Solver""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Simulation_solve" "', argument " "2"" of type '" "Solver""'");
    } else {
      Solver * temp = reinterpret_cast< Solver * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_SolverReporter,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Simulation_solve" "', argument " "3"" of type '" "SolverReporter &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Simulation_solve" "', argument " "3"" of type '" "SolverReporter &""'"); 
  }
  arg3 = reinterpret_cast< SolverReporter * >(argp3);
  {
    try {
      (arg1)->solve(arg2,*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulation_presolve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Simulation *arg1 = (Simulation *) 0 ;
  Solver arg2 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Simulation_presolve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], SWIG_as_voidptrptr(&arg1), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulation_presolve" "', argument " "1"" of type '" "Simulation *""'");
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Solver,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Simulation_presolve" "', argument " "2"" of type '" "Solver""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Simulation_presolve" "', argument " "2"" of type '" "Solver""'");
    } else {
      Solver * temp = reinterpret_cast< Solver * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (arg1)->presolve(arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulation_iterate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Simulation *arg1 = (Simulation *) 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], SWIG_as_voidptrptr(&arg1), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulation_iterate" "', argument " "1"" of type '" "Simulation *""'");
  }
  {
    try {
      result = (int)(arg1)->iterate();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulation_postsolve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Simulation *arg1 = (Simulation *) 0 ;
  SolverStatus arg2 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Simulation_postsolve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], SWIG_as_voidptrptr(&arg1), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulation_postsolve" "', argument " "1"" of type '" "Simulation *""'");
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_SolverStatus,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Simulation_postsolve" "', argument " "2"" of type '" "SolverStatus""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Simulation_postsolve" "', argument " "2"" of type '" "SolverStatus""'");
    } else {
      SolverStatus * temp = reinterpret_cast< SolverStatus * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (arg1)->postsolve(arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulation_getStatus(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Simulation *arg1 = (Simulation *) 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SolverStatus result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], SWIG_as_voidptrptr(&arg1), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulation_getStatus" "', argument " "1"" of type '" "Simulation *""'");
  }
  {
    try {
      result = (arg1)->getStatus();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new SolverStatus(result)), SWIGTYPE_p_SolverStatus, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulation_getFixableVariables(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Simulation *arg1 = (Simulation *) 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Variable,std::allocator< Variable > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], SWIG_as_voidptrptr(&arg1), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulation_getFixableVariables" "', argument " "1"" of type '" "Simulation *""'");
  }
  {
    try {
      result = (arg1)->getFixableVariables();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< Variable,std::allocator< Variable > >(result)), SWIGTYPE_p_std__vectorT_Variable_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulation_getVariablesNearBounds__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Simulation *arg1 = (Simulation *) 0 ;
  double *arg2 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  std::vector< Variable,std::allocator< Variable > > result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], SWIG_as_voidptrptr(&arg1), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulation_getVariablesNearBounds" "', argument " "1"" of type '" "Simulation *""'");
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Simulation_getVariablesNearBounds" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = (arg1)->getVariablesNearBounds((double const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< Variable,std::allocator< Variable > >(result)), SWIGTYPE_p_std__vectorT_Variable_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulation_getVariablesNearBounds__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Simulation *arg1 = (Simulation *) 0 ;
  int res1 = 0 ;
  std::vector< Variable,std::allocator< Variable > > result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], SWIG_as_voidptrptr(&arg1), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulation_getVariablesNearBounds" "', argument " "1"" of type '" "Simulation *""'");
  }
  {
    try {
      result = (arg1)->getVariablesNearBounds();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< Variable,std::allocator< Variable > >(result)), SWIGTYPE_p_std__vectorT_Variable_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulation_getVariablesNearBounds(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Simulation_getVariablesNearBounds", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    PyObject *retobj = _wrap_Simulation_getVariablesNearBounds__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_Simulation_getVariablesNearBounds__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Simulation_getVariablesNearBounds'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Simulation::getVariablesNearBounds(double const &)\n"
    "    Simulation::getVariablesNearBounds()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Simulation_getVariablesFarFromNominals(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Simulation *arg1 = (Simulation *) 0 ;
  double *arg2 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::vector< Variable,std::allocator< Variable > > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Simulation_getVariablesFarFromNominals", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], SWIG_as_voidptrptr(&arg1), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulation_getVariablesFarFromNominals" "', argument " "1"" of type '" "Simulation *""'");
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Simulation_getVariablesFarFromNominals" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = (arg1)->getVariablesFarFromNominals((double const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< Variable,std::allocator< Variable > >(result)), SWIGTYPE_p_std__vectorT_Variable_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulation_getFixedVariables(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Simulation *arg1 = (Simulation *) 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Variable,std::allocator< Variable > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], SWIG_as_voidptrptr(&arg1), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulation_getFixedVariables" "', argument " "1"" of type '" "Simulation *""'");
  }
  {
    try {
      result = (arg1)->getFixedVariables();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< Variable,std::allocator< Variable > >(result)), SWIGTYPE_p_std__vectorT_Variable_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulation_getallVariables(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Simulation *arg1 = (Simulation *) 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Variable,std::allocator< Variable > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], SWIG_as_voidptrptr(&arg1), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulation_getallVariables" "', argument " "1"" of type '" "Simulation *""'");
  }
  {
    try {
      result = (arg1)->getallVariables();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< Variable,std::allocator< Variable > >(result)), SWIGTYPE_p_std__vectorT_Variable_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulation_getMatrix(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Simulation *arg1 = (Simulation *) 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Matrix result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], SWIG_as_voidptrptr(&arg1), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulation_getMatrix" "', argument " "1"" of type '" "Simulation *""'");
  }
  {
    try {
      result = (arg1)->getMatrix();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new Matrix(result)), SWIGTYPE_p_Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulation_write__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Simulation *arg1 = (Simulation *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], SWIG_as_voidptrptr(&arg1), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulation_write" "', argument " "1"" of type '" "Simulation const *""'");
  }
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Simulation_write" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Simulation_write" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try {
      ((Simulation const *)arg1)->write((char const *)arg2,(char const *)arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulation_write__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Simulation *arg1 = (Simulation *) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], SWIG_as_voidptrptr(&arg1), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulation_write" "', argument " "1"" of type '" "Simulation const *""'");
  }
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Simulation_write" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      ((Simulation const *)arg1)->write((char const *)arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulation_write(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Simulation_write", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_Simulation_write__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_Simulation_write__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Simulation_write'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Simulation::write(char const *,char const *) const\n"
    "    Simulation::write(char const *) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Simulation_setSolver(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Simulation *arg1 = (Simulation *) 0 ;
  Solver *arg2 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Simulation_setSolver", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], SWIG_as_voidptrptr(&arg1), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulation_setSolver" "', argument " "1"" of type '" "Simulation *""'");
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Solver,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Simulation_setSolver" "', argument " "2"" of type '" "Solver &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Simulation_setSolver" "', argument " "2"" of type '" "Solver &""'"); 
  }
  arg2 = reinterpret_cast< Solver * >(argp2);
  {
    try {
      (arg1)->setSolver(*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulation_getSolver(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Simulation *arg1 = (Simulation *) 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Solver result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], SWIG_as_voidptrptr(&arg1), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulation_getSolver" "', argument " "1"" of type '" "Simulation const *""'");
  }
  {
    try {
      result = ((Simulation const *)arg1)->getSolver();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new Solver(result)), SWIGTYPE_p_Solver, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulation_getParameters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Simulation *arg1 = (Simulation *) 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< SolverParameters > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], SWIG_as_voidptrptr(&arg1), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulation_getParameters" "', argument " "1"" of type '" "Simulation const *""'");
  }
  {
    try {
      result = ((Simulation const *)arg1)->getParameters();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new SolverParameters(result)), SWIGTYPE_p_SolverParameters, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulation_setParameters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Simulation *arg1 = (Simulation *) 0 ;
  SolverParameters *arg2 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Simulation_setParameters", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], SWIG_as_voidptrptr(&arg1), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulation_setParameters" "', argument " "1"" of type '" "Simulation *""'");
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_SolverParameters,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Simulation_setParameters" "', argument " "2"" of type '" "SolverParameters &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Simulation_setParameters" "', argument " "2"" of type '" "SolverParameters &""'"); 
  }
  arg2 = reinterpret_cast< SolverParameters * >(argp2);
  {
    try {
      (arg1)->setParameters(*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulation_getIncidenceMatrix(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Simulation *arg1 = (Simulation *) 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< IncidenceMatrix > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], SWIG_as_voidptrptr(&arg1), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulation_getIncidenceMatrix" "', argument " "1"" of type '" "Simulation *""'");
  }
  {
    try {
      result = (arg1)->getIncidenceMatrix();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new IncidenceMatrix(result)), SWIGTYPE_p_IncidenceMatrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulation_getInstanceName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Simulation *arg1 = (Simulation *) 0 ;
  Instanc *arg2 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  std::string result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Simulation_getInstanceName", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], SWIG_as_voidptrptr(&arg1), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulation_getInstanceName" "', argument " "1"" of type '" "Simulation const *""'");
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Instanc,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Simulation_getInstanceName" "', argument " "2"" of type '" "Instanc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Simulation_getInstanceName" "', argument " "2"" of type '" "Instanc const &""'"); 
  }
  arg2 = reinterpret_cast< Instanc * >(argp2);
  {
    try {
      result = ((Simulation const *)arg1)->getInstanceName((Instanc const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulation_processVarStatus(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Simulation *arg1 = (Simulation *) 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], SWIG_as_voidptrptr(&arg1), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulation_processVarStatus" "', argument " "1"" of type '" "Simulation *""'");
  }
  {
    try {
      (arg1)->processVarStatus();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulation_getNumVars(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Simulation *arg1 = (Simulation *) 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], SWIG_as_voidptrptr(&arg1), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulation_getNumVars" "', argument " "1"" of type '" "Simulation *""'");
  }
  {
    try {
      result = (int)(arg1)->getNumVars();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulation_getActiveBlock(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Simulation *arg1 = (Simulation *) 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], SWIG_as_voidptrptr(&arg1), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulation_getActiveBlock" "', argument " "1"" of type '" "Simulation const *""'");
  }
  {
    try {
      result = (int)((Simulation const *)arg1)->getActiveBlock();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulation_getFreeableVariables(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Simulation *arg1 = (Simulation *) 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Variable,std::allocator< Variable > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], SWIG_as_voidptrptr(&arg1), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulation_getFreeableVariables" "', argument " "1"" of type '" "Simulation *""'");
  }
  {
    try {
      result = (arg1)->getFreeableVariables();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< Variable,std::allocator< Variable > >(result)), SWIGTYPE_p_std__vectorT_Variable_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulation_setSolverHooks(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Simulation *arg1 = (Simulation *) 0 ;
  SolverHooks *arg2 = (SolverHooks *) 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Simulation_setSolverHooks", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], SWIG_as_voidptrptr(&arg1), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulation_setSolverHooks" "', argument " "1"" of type '" "Simulation *""'");
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_SolverHooks, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Simulation_setSolverHooks" "', argument " "2"" of type '" "SolverHooks *""'"); 
  }
  arg2 = reinterpret_cast< SolverHooks * >(argp2);
  {
    try {
      (arg1)->setSolverHooks(arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulation_getSolverHooks(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Simulation *arg1 = (Simulation *) 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SolverHooks *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], SWIG_as_voidptrptr(&arg1), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulation_getSolverHooks" "', argument " "1"" of type '" "Simulation const *""'");
  }
  {
    try {
      result = (SolverHooks *)((Simulation const *)arg1)->getSolverHooks();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SolverHooks, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulation___getitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Simulation *arg1 = (Simulation *) 0 ;
  long *arg2 = 0 ;
  int res1 = 0 ;
  long temp2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  SwigValueWrapper< Instanc > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Simulation___getitem__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], SWIG_as_voidptrptr(&arg1), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulation___getitem__" "', argument " "1"" of type '" "Simulation *""'");
  }
  ecode2 = SWIG_AsVal_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Simulation___getitem__" "', argument " "2"" of type '" "long""'");
  } 
  temp2 = static_cast< long >(val2);
  arg2 = &temp2;
  {
    try {
      result = Simulation___getitem__(arg1,(long const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new Instanc(result)), SWIGTYPE_p_Instanc, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Simulation___getattr__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Simulation *arg1 = (Simulation *) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  SwigValueWrapper< Instanc > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Simulation___getattr__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], SWIG_as_voidptrptr(&arg1), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulation___getattr__" "', argument " "1"" of type '" "Simulation *""'");
  }
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Simulation___getattr__" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      result = Simulation___getattr__(arg1,(char const *)arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new Instanc(result)), SWIGTYPE_p_Instanc, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *Simulation_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Simulation, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Simulation_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Matrix__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  Matrix *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (Matrix *)new Matrix();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Matrix, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Matrix__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Matrix *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Matrix,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Matrix" "', argument " "1"" of type '" "Matrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Matrix" "', argument " "1"" of type '" "Matrix const &""'"); 
  }
  arg1 = reinterpret_cast< Matrix * >(argp1);
  {
    try {
      result = (Matrix *)new Matrix((Matrix const &)*arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Matrix, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Matrix__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mtx_matrix_t arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  Matrix *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_mtx_matrix_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Matrix" "', argument " "1"" of type '" "mtx_matrix_t""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Matrix" "', argument " "1"" of type '" "mtx_matrix_t""'");
    } else {
      mtx_matrix_t * temp = reinterpret_cast< mtx_matrix_t * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = (Matrix *)new Matrix(arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Matrix, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Matrix(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_Matrix", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    PyObject *retobj = _wrap_new_Matrix__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Matrix, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_new_Matrix__SWIG_1(self, argc, argv);
  }
check_2:
  
  if (argc == 1) {
    PyObject *retobj = _wrap_new_Matrix__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Matrix'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Matrix::Matrix()\n"
    "    Matrix::Matrix(Matrix const &)\n"
    "    Matrix::Matrix(mtx_matrix_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Matrix_write(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  int result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Matrix_write", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_write" "', argument " "1"" of type '" "Matrix const *""'"); 
  }
  arg1 = reinterpret_cast< Matrix * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matrix_write" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Matrix_write" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matrix_write" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (int)((Matrix const *)arg1)->write(arg2,(std::string const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::vector< unsigned int,std::allocator< unsigned int > > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_size" "', argument " "1"" of type '" "Matrix const *""'"); 
  }
  arg1 = reinterpret_cast< Matrix * >(argp1);
  {
    try {
      result = ((Matrix const *)arg1)->size();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< unsigned int,std::allocator< unsigned int > >(result)), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Matrix(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Matrix, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Matrix" "', argument " "1"" of type '" "Matrix *""'"); 
  }
  arg1 = reinterpret_cast< Matrix * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Matrix_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Matrix, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Matrix_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_SolverParameters_toString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverParameters *arg1 = (SolverParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverParameters_toString" "', argument " "1"" of type '" "SolverParameters *""'"); 
  }
  arg1 = reinterpret_cast< SolverParameters * >(argp1);
  {
    try {
      result = (arg1)->toString();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SolverParameters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverParameters *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SolverParameters *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_SolverParameters,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SolverParameters" "', argument " "1"" of type '" "SolverParameters const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SolverParameters" "', argument " "1"" of type '" "SolverParameters const &""'"); 
  }
  arg1 = reinterpret_cast< SolverParameters * >(argp1);
  {
    try {
      result = (SolverParameters *)new SolverParameters((SolverParameters const &)*arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SolverParameters, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverParameters_getLength(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverParameters *arg1 = (SolverParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverParameters_getLength" "', argument " "1"" of type '" "SolverParameters const *""'"); 
  }
  arg1 = reinterpret_cast< SolverParameters * >(argp1);
  {
    try {
      result = (int)((SolverParameters const *)arg1)->getLength();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverParameters_getParameter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverParameters *arg1 = (SolverParameters *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  SwigValueWrapper< SolverParameter > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SolverParameters_getParameter", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverParameters_getParameter" "', argument " "1"" of type '" "SolverParameters const *""'"); 
  }
  arg1 = reinterpret_cast< SolverParameters * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SolverParameters_getParameter" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      result = ((SolverParameters const *)arg1)->getParameter((int const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new SolverParameter(result)), SWIGTYPE_p_SolverParameter, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SolverParameters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverParameters *arg1 = (SolverParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverParameters, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SolverParameters" "', argument " "1"" of type '" "SolverParameters *""'"); 
  }
  arg1 = reinterpret_cast< SolverParameters * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SolverParameters_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SolverParameters, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SolverParameters_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Value__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  Value *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (Value *)new Value();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Value, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Value__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  value_t *arg1 = (value_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Value *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_value_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Value" "', argument " "1"" of type '" "value_t const *""'"); 
  }
  arg1 = reinterpret_cast< value_t * >(argp1);
  {
    try {
      result = (Value *)new Value((value_t const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Value, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Value(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_Value", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    PyObject *retobj = _wrap_new_Value__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 1) {
    PyObject *retobj = _wrap_new_Value__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Value'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Value::Value()\n"
    "    Value::Value(value_t const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Value(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Value *arg1 = (Value *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Value, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Value" "', argument " "1"" of type '" "Value *""'"); 
  }
  arg1 = reinterpret_cast< Value * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Value_getType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Value *arg1 = (Value *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ValueType result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Value_getType" "', argument " "1"" of type '" "Value *""'"); 
  }
  arg1 = reinterpret_cast< Value * >(argp1);
  {
    try {
      result = (ValueType)(arg1)->getType();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Value_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Value, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Value_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_SolverParameter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  slv_parameter *arg1 = (slv_parameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SolverParameter *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_slv_parameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SolverParameter" "', argument " "1"" of type '" "slv_parameter *""'"); 
  }
  arg1 = reinterpret_cast< slv_parameter * >(argp1);
  {
    try {
      result = (SolverParameter *)new SolverParameter(arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SolverParameter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverParameter_getName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverParameter *arg1 = (SolverParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverParameter_getName" "', argument " "1"" of type '" "SolverParameter const *""'"); 
  }
  arg1 = reinterpret_cast< SolverParameter * >(argp1);
  {
    try {
      result = ((SolverParameter const *)arg1)->getName();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverParameter_getDescription(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverParameter *arg1 = (SolverParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverParameter_getDescription" "', argument " "1"" of type '" "SolverParameter const *""'"); 
  }
  arg1 = reinterpret_cast< SolverParameter * >(argp1);
  {
    try {
      result = ((SolverParameter const *)arg1)->getDescription();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverParameter_getLabel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverParameter *arg1 = (SolverParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverParameter_getLabel" "', argument " "1"" of type '" "SolverParameter const *""'"); 
  }
  arg1 = reinterpret_cast< SolverParameter * >(argp1);
  {
    try {
      result = ((SolverParameter const *)arg1)->getLabel();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverParameter_getNumber(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverParameter *arg1 = (SolverParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverParameter_getNumber" "', argument " "1"" of type '" "SolverParameter const *""'"); 
  }
  arg1 = reinterpret_cast< SolverParameter * >(argp1);
  {
    try {
      result = (int *) &((SolverParameter const *)arg1)->getNumber();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverParameter_getPage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverParameter *arg1 = (SolverParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverParameter_getPage" "', argument " "1"" of type '" "SolverParameter const *""'"); 
  }
  arg1 = reinterpret_cast< SolverParameter * >(argp1);
  {
    try {
      result = (int *) &((SolverParameter const *)arg1)->getPage();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverParameter_isInt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverParameter *arg1 = (SolverParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverParameter_isInt" "', argument " "1"" of type '" "SolverParameter const *""'"); 
  }
  arg1 = reinterpret_cast< SolverParameter * >(argp1);
  {
    try {
      result = (bool)((SolverParameter const *)arg1)->isInt();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverParameter_isBool(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverParameter *arg1 = (SolverParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverParameter_isBool" "', argument " "1"" of type '" "SolverParameter const *""'"); 
  }
  arg1 = reinterpret_cast< SolverParameter * >(argp1);
  {
    try {
      result = (bool)((SolverParameter const *)arg1)->isBool();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverParameter_isStr(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverParameter *arg1 = (SolverParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverParameter_isStr" "', argument " "1"" of type '" "SolverParameter const *""'"); 
  }
  arg1 = reinterpret_cast< SolverParameter * >(argp1);
  {
    try {
      result = (bool)((SolverParameter const *)arg1)->isStr();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverParameter_isReal(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverParameter *arg1 = (SolverParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverParameter_isReal" "', argument " "1"" of type '" "SolverParameter const *""'"); 
  }
  arg1 = reinterpret_cast< SolverParameter * >(argp1);
  {
    try {
      result = (bool)((SolverParameter const *)arg1)->isReal();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverParameter_getIntValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverParameter *arg1 = (SolverParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverParameter_getIntValue" "', argument " "1"" of type '" "SolverParameter const *""'"); 
  }
  arg1 = reinterpret_cast< SolverParameter * >(argp1);
  {
    try {
      result = (int *) &((SolverParameter const *)arg1)->getIntValue();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverParameter_getIntLowerBound(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverParameter *arg1 = (SolverParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverParameter_getIntLowerBound" "', argument " "1"" of type '" "SolverParameter const *""'"); 
  }
  arg1 = reinterpret_cast< SolverParameter * >(argp1);
  {
    try {
      result = (int *) &((SolverParameter const *)arg1)->getIntLowerBound();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverParameter_getIntUpperBound(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverParameter *arg1 = (SolverParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverParameter_getIntUpperBound" "', argument " "1"" of type '" "SolverParameter const *""'"); 
  }
  arg1 = reinterpret_cast< SolverParameter * >(argp1);
  {
    try {
      result = (int *) &((SolverParameter const *)arg1)->getIntUpperBound();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverParameter_setIntValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverParameter *arg1 = (SolverParameter *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SolverParameter_setIntValue", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverParameter_setIntValue" "', argument " "1"" of type '" "SolverParameter *""'"); 
  }
  arg1 = reinterpret_cast< SolverParameter * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SolverParameter_setIntValue" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->setIntValue((int const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverParameter_getBoolValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverParameter *arg1 = (SolverParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverParameter_getBoolValue" "', argument " "1"" of type '" "SolverParameter const *""'"); 
  }
  arg1 = reinterpret_cast< SolverParameter * >(argp1);
  {
    try {
      result = (bool)((SolverParameter const *)arg1)->getBoolValue();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverParameter_setBoolValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverParameter *arg1 = (SolverParameter *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SolverParameter_setBoolValue", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverParameter_setBoolValue" "', argument " "1"" of type '" "SolverParameter *""'"); 
  }
  arg1 = reinterpret_cast< SolverParameter * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SolverParameter_setBoolValue" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->setBoolValue((bool const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverParameter_getStrValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverParameter *arg1 = (SolverParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverParameter_getStrValue" "', argument " "1"" of type '" "SolverParameter const *""'"); 
  }
  arg1 = reinterpret_cast< SolverParameter * >(argp1);
  {
    try {
      result = ((SolverParameter const *)arg1)->getStrValue();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverParameter_getStrOptions(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverParameter *arg1 = (SolverParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverParameter_getStrOptions" "', argument " "1"" of type '" "SolverParameter const *""'"); 
  }
  arg1 = reinterpret_cast< SolverParameter * >(argp1);
  {
    try {
      result = ((SolverParameter const *)arg1)->getStrOptions();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverParameter_setStrValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverParameter *arg1 = (SolverParameter *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SolverParameter_setStrValue", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverParameter_setStrValue" "', argument " "1"" of type '" "SolverParameter *""'"); 
  }
  arg1 = reinterpret_cast< SolverParameter * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SolverParameter_setStrValue" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SolverParameter_setStrValue" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->setStrValue((std::string const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverParameter_setStrOption(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverParameter *arg1 = (SolverParameter *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SolverParameter_setStrOption", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverParameter_setStrOption" "', argument " "1"" of type '" "SolverParameter *""'"); 
  }
  arg1 = reinterpret_cast< SolverParameter * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SolverParameter_setStrOption" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->setStrOption((int const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverParameter_getRealValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverParameter *arg1 = (SolverParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverParameter_getRealValue" "', argument " "1"" of type '" "SolverParameter const *""'"); 
  }
  arg1 = reinterpret_cast< SolverParameter * >(argp1);
  {
    try {
      result = (double *) &((SolverParameter const *)arg1)->getRealValue();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverParameter_getRealLowerBound(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverParameter *arg1 = (SolverParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverParameter_getRealLowerBound" "', argument " "1"" of type '" "SolverParameter const *""'"); 
  }
  arg1 = reinterpret_cast< SolverParameter * >(argp1);
  {
    try {
      result = (double *) &((SolverParameter const *)arg1)->getRealLowerBound();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverParameter_getRealUpperBound(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverParameter *arg1 = (SolverParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverParameter_getRealUpperBound" "', argument " "1"" of type '" "SolverParameter const *""'"); 
  }
  arg1 = reinterpret_cast< SolverParameter * >(argp1);
  {
    try {
      result = (double *) &((SolverParameter const *)arg1)->getRealUpperBound();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverParameter_setRealValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverParameter *arg1 = (SolverParameter *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SolverParameter_setRealValue", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverParameter_setRealValue" "', argument " "1"" of type '" "SolverParameter *""'"); 
  }
  arg1 = reinterpret_cast< SolverParameter * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SolverParameter_setRealValue" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->setRealValue((double const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverParameter_isBounded(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverParameter *arg1 = (SolverParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverParameter_isBounded" "', argument " "1"" of type '" "SolverParameter const *""'"); 
  }
  arg1 = reinterpret_cast< SolverParameter * >(argp1);
  {
    try {
      result = (bool)((SolverParameter const *)arg1)->isBounded();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverParameter_toString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverParameter *arg1 = (SolverParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverParameter_toString" "', argument " "1"" of type '" "SolverParameter const *""'"); 
  }
  arg1 = reinterpret_cast< SolverParameter * >(argp1);
  {
    try {
      result = ((SolverParameter const *)arg1)->toString();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverParameter_setValueValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverParameter *arg1 = (SolverParameter *) 0 ;
  Value *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SolverParameter_setValueValue", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverParameter_setValueValue" "', argument " "1"" of type '" "SolverParameter *""'"); 
  }
  arg1 = reinterpret_cast< SolverParameter * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Value,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SolverParameter_setValueValue" "', argument " "2"" of type '" "Value const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SolverParameter_setValueValue" "', argument " "2"" of type '" "Value const &""'"); 
  }
  arg2 = reinterpret_cast< Value * >(argp2);
  {
    try {
      (arg1)->setValueValue((Value const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SolverParameter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverParameter *arg1 = (SolverParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverParameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SolverParameter" "', argument " "1"" of type '" "SolverParameter *""'"); 
  }
  arg1 = reinterpret_cast< SolverParameter * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SolverParameter_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SolverParameter, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SolverParameter_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_IncidencePointVector_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< IncidencePoint > *arg1 = (std::vector< IncidencePoint > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_IncidencePoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidencePointVector_iterator" "', argument " "1"" of type '" "std::vector< IncidencePoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< IncidencePoint > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_vector_Sl_IncidencePoint_Sg__iterator(arg1,arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidencePointVector___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< IncidencePoint > *arg1 = (std::vector< IncidencePoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_IncidencePoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidencePointVector___nonzero__" "', argument " "1"" of type '" "std::vector< IncidencePoint > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< IncidencePoint > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_IncidencePoint_Sg____nonzero__((std::vector< IncidencePoint > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidencePointVector___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< IncidencePoint > *arg1 = (std::vector< IncidencePoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_IncidencePoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidencePointVector___bool__" "', argument " "1"" of type '" "std::vector< IncidencePoint > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< IncidencePoint > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_IncidencePoint_Sg____bool__((std::vector< IncidencePoint > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidencePointVector___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< IncidencePoint > *arg1 = (std::vector< IncidencePoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< IncidencePoint >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_IncidencePoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidencePointVector___len__" "', argument " "1"" of type '" "std::vector< IncidencePoint > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< IncidencePoint > * >(argp1);
  {
    try {
      result = std_vector_Sl_IncidencePoint_Sg____len__((std::vector< IncidencePoint > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidencePointVector___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< IncidencePoint > *arg1 = (std::vector< IncidencePoint > *) 0 ;
  std::vector< IncidencePoint >::difference_type arg2 ;
  std::vector< IncidencePoint >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< IncidencePoint,std::allocator< IncidencePoint > > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IncidencePointVector___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_IncidencePoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidencePointVector___getslice__" "', argument " "1"" of type '" "std::vector< IncidencePoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< IncidencePoint > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IncidencePointVector___getslice__" "', argument " "2"" of type '" "std::vector< IncidencePoint >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< IncidencePoint >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IncidencePointVector___getslice__" "', argument " "3"" of type '" "std::vector< IncidencePoint >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< IncidencePoint >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< IncidencePoint,std::allocator< IncidencePoint > > *)std_vector_Sl_IncidencePoint_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_IncidencePoint_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidencePointVector___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< IncidencePoint > *arg1 = (std::vector< IncidencePoint > *) 0 ;
  std::vector< IncidencePoint >::difference_type arg2 ;
  std::vector< IncidencePoint >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_IncidencePoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidencePointVector___setslice__" "', argument " "1"" of type '" "std::vector< IncidencePoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< IncidencePoint > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IncidencePointVector___setslice__" "', argument " "2"" of type '" "std::vector< IncidencePoint >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< IncidencePoint >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IncidencePointVector___setslice__" "', argument " "3"" of type '" "std::vector< IncidencePoint >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< IncidencePoint >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_IncidencePoint_Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidencePointVector___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< IncidencePoint > *arg1 = (std::vector< IncidencePoint > *) 0 ;
  std::vector< IncidencePoint >::difference_type arg2 ;
  std::vector< IncidencePoint >::difference_type arg3 ;
  std::vector< IncidencePoint,std::allocator< IncidencePoint > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_IncidencePoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidencePointVector___setslice__" "', argument " "1"" of type '" "std::vector< IncidencePoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< IncidencePoint > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IncidencePointVector___setslice__" "', argument " "2"" of type '" "std::vector< IncidencePoint >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< IncidencePoint >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IncidencePointVector___setslice__" "', argument " "3"" of type '" "std::vector< IncidencePoint >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< IncidencePoint >::difference_type >(val3);
  {
    std::vector< IncidencePoint,std::allocator< IncidencePoint > > *ptr = (std::vector< IncidencePoint,std::allocator< IncidencePoint > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IncidencePointVector___setslice__" "', argument " "4"" of type '" "std::vector< IncidencePoint,std::allocator< IncidencePoint > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IncidencePointVector___setslice__" "', argument " "4"" of type '" "std::vector< IncidencePoint,std::allocator< IncidencePoint > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_IncidencePoint_Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< IncidencePoint,std::allocator< IncidencePoint > > const &)*arg4);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidencePointVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "IncidencePointVector___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    PyObject *retobj = _wrap_IncidencePointVector___setslice____SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_IncidencePointVector___setslice____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'IncidencePointVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< IncidencePoint >::__setslice__(std::vector< IncidencePoint >::difference_type,std::vector< IncidencePoint >::difference_type)\n"
    "    std::vector< IncidencePoint >::__setslice__(std::vector< IncidencePoint >::difference_type,std::vector< IncidencePoint >::difference_type,std::vector< IncidencePoint,std::allocator< IncidencePoint > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IncidencePointVector___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< IncidencePoint > *arg1 = (std::vector< IncidencePoint > *) 0 ;
  std::vector< IncidencePoint >::difference_type arg2 ;
  std::vector< IncidencePoint >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IncidencePointVector___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_IncidencePoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidencePointVector___delslice__" "', argument " "1"" of type '" "std::vector< IncidencePoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< IncidencePoint > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IncidencePointVector___delslice__" "', argument " "2"" of type '" "std::vector< IncidencePoint >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< IncidencePoint >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IncidencePointVector___delslice__" "', argument " "3"" of type '" "std::vector< IncidencePoint >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< IncidencePoint >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_IncidencePoint_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidencePointVector___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< IncidencePoint > *arg1 = (std::vector< IncidencePoint > *) 0 ;
  std::vector< IncidencePoint >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_IncidencePoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidencePointVector___delitem__" "', argument " "1"" of type '" "std::vector< IncidencePoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< IncidencePoint > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IncidencePointVector___delitem__" "', argument " "2"" of type '" "std::vector< IncidencePoint >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< IncidencePoint >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_IncidencePoint_Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidencePointVector___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< IncidencePoint > *arg1 = (std::vector< IncidencePoint > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< IncidencePoint,std::allocator< IncidencePoint > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_IncidencePoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidencePointVector___getitem__" "', argument " "1"" of type '" "std::vector< IncidencePoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< IncidencePoint > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IncidencePointVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        result = (std::vector< IncidencePoint,std::allocator< IncidencePoint > > *)std_vector_Sl_IncidencePoint_Sg____getitem____SWIG_0(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_IncidencePoint_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidencePointVector___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< IncidencePoint > *arg1 = (std::vector< IncidencePoint > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< IncidencePoint,std::allocator< IncidencePoint > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_IncidencePoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidencePointVector___setitem__" "', argument " "1"" of type '" "std::vector< IncidencePoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< IncidencePoint > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IncidencePointVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector< IncidencePoint,std::allocator< IncidencePoint > > *ptr = (std::vector< IncidencePoint,std::allocator< IncidencePoint > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IncidencePointVector___setitem__" "', argument " "3"" of type '" "std::vector< IncidencePoint,std::allocator< IncidencePoint > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IncidencePointVector___setitem__" "', argument " "3"" of type '" "std::vector< IncidencePoint,std::allocator< IncidencePoint > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_IncidencePoint_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< IncidencePoint,std::allocator< IncidencePoint > > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidencePointVector___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< IncidencePoint > *arg1 = (std::vector< IncidencePoint > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_IncidencePoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidencePointVector___setitem__" "', argument " "1"" of type '" "std::vector< IncidencePoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< IncidencePoint > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IncidencePointVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        std_vector_Sl_IncidencePoint_Sg____setitem____SWIG_1(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidencePointVector___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< IncidencePoint > *arg1 = (std::vector< IncidencePoint > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_IncidencePoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidencePointVector___delitem__" "', argument " "1"" of type '" "std::vector< IncidencePoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< IncidencePoint > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IncidencePointVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        std_vector_Sl_IncidencePoint_Sg____delitem____SWIG_1(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidencePointVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "IncidencePointVector___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_1;
    return _wrap_IncidencePointVector___delitem____SWIG_1(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_IncidencePointVector___delitem____SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'IncidencePointVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< IncidencePoint >::__delitem__(std::vector< IncidencePoint >::difference_type)\n"
    "    std::vector< IncidencePoint >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IncidencePointVector___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< IncidencePoint > *arg1 = (std::vector< IncidencePoint > *) 0 ;
  std::vector< IncidencePoint >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< IncidencePoint >::value_type *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_IncidencePoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidencePointVector___getitem__" "', argument " "1"" of type '" "std::vector< IncidencePoint > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< IncidencePoint > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IncidencePointVector___getitem__" "', argument " "2"" of type '" "std::vector< IncidencePoint >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< IncidencePoint >::difference_type >(val2);
  {
    try {
      try {
        result = (std::vector< IncidencePoint >::value_type *) &std_vector_Sl_IncidencePoint_Sg____getitem____SWIG_1((std::vector< IncidencePoint > const *)arg1,SWIG_STD_MOVE(arg2));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IncidencePoint, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< IncidencePoint >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidencePointVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "IncidencePointVector___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_1;
    return _wrap_IncidencePointVector___getitem____SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_IncidencePointVector___getitem____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'IncidencePointVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< IncidencePoint >::__getitem__(PySliceObject *)\n"
    "    std::vector< IncidencePoint >::__getitem__(std::vector< IncidencePoint >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IncidencePointVector___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< IncidencePoint > *arg1 = (std::vector< IncidencePoint > *) 0 ;
  std::vector< IncidencePoint >::difference_type arg2 ;
  std::vector< IncidencePoint >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_IncidencePoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidencePointVector___setitem__" "', argument " "1"" of type '" "std::vector< IncidencePoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< IncidencePoint > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IncidencePointVector___setitem__" "', argument " "2"" of type '" "std::vector< IncidencePoint >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< IncidencePoint >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_IncidencePoint,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IncidencePointVector___setitem__" "', argument " "3"" of type '" "std::vector< IncidencePoint >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IncidencePointVector___setitem__" "', argument " "3"" of type '" "std::vector< IncidencePoint >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< IncidencePoint >::value_type * >(argp3);
  {
    try {
      try {
        std_vector_Sl_IncidencePoint_Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(IncidencePoint const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidencePointVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "IncidencePointVector___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_IncidencePointVector___setitem____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_2;
    {
      int res = swig::asptr(argv[2], (std::vector< IncidencePoint,std::allocator< IncidencePoint > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_IncidencePointVector___setitem____SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_IncidencePointVector___setitem____SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'IncidencePointVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< IncidencePoint >::__setitem__(PySliceObject *,std::vector< IncidencePoint,std::allocator< IncidencePoint > > const &)\n"
    "    std::vector< IncidencePoint >::__setitem__(PySliceObject *)\n"
    "    std::vector< IncidencePoint >::__setitem__(std::vector< IncidencePoint >::difference_type,std::vector< IncidencePoint >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IncidencePointVector_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< IncidencePoint > *arg1 = (std::vector< IncidencePoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< IncidencePoint >::value_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_IncidencePoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidencePointVector_pop" "', argument " "1"" of type '" "std::vector< IncidencePoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< IncidencePoint > * >(argp1);
  {
    try {
      try {
        result = std_vector_Sl_IncidencePoint_Sg__pop(arg1);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< IncidencePoint >::value_type(result)), SWIGTYPE_p_IncidencePoint, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidencePointVector_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< IncidencePoint > *arg1 = (std::vector< IncidencePoint > *) 0 ;
  std::vector< IncidencePoint >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IncidencePointVector_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_IncidencePoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidencePointVector_append" "', argument " "1"" of type '" "std::vector< IncidencePoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< IncidencePoint > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_IncidencePoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IncidencePointVector_append" "', argument " "2"" of type '" "std::vector< IncidencePoint >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IncidencePointVector_append" "', argument " "2"" of type '" "std::vector< IncidencePoint >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< IncidencePoint >::value_type * >(argp2);
  {
    try {
      std_vector_Sl_IncidencePoint_Sg__append(arg1,(IncidencePoint const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IncidencePointVector__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< IncidencePoint > *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (std::vector< IncidencePoint > *)new std::vector< IncidencePoint >();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_IncidencePoint_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IncidencePointVector__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< IncidencePoint > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< IncidencePoint > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< IncidencePoint,std::allocator< IncidencePoint > > *ptr = (std::vector< IncidencePoint,std::allocator< IncidencePoint > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IncidencePointVector" "', argument " "1"" of type '" "std::vector< IncidencePoint > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IncidencePointVector" "', argument " "1"" of type '" "std::vector< IncidencePoint > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< IncidencePoint > *)new std::vector< IncidencePoint >((std::vector< IncidencePoint > const &)*arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_IncidencePoint_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidencePointVector_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< IncidencePoint > *arg1 = (std::vector< IncidencePoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_IncidencePoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidencePointVector_empty" "', argument " "1"" of type '" "std::vector< IncidencePoint > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< IncidencePoint > * >(argp1);
  {
    try {
      result = (bool)((std::vector< IncidencePoint > const *)arg1)->empty();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidencePointVector_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< IncidencePoint > *arg1 = (std::vector< IncidencePoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< IncidencePoint >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_IncidencePoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidencePointVector_size" "', argument " "1"" of type '" "std::vector< IncidencePoint > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< IncidencePoint > * >(argp1);
  {
    try {
      result = ((std::vector< IncidencePoint > const *)arg1)->size();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidencePointVector_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< IncidencePoint > *arg1 = (std::vector< IncidencePoint > *) 0 ;
  std::vector< IncidencePoint > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IncidencePointVector_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_IncidencePoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidencePointVector_swap" "', argument " "1"" of type '" "std::vector< IncidencePoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< IncidencePoint > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_IncidencePoint_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IncidencePointVector_swap" "', argument " "2"" of type '" "std::vector< IncidencePoint > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IncidencePointVector_swap" "', argument " "2"" of type '" "std::vector< IncidencePoint > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< IncidencePoint > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidencePointVector_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< IncidencePoint > *arg1 = (std::vector< IncidencePoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< IncidencePoint >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_IncidencePoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidencePointVector_begin" "', argument " "1"" of type '" "std::vector< IncidencePoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< IncidencePoint > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< IncidencePoint >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidencePointVector_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< IncidencePoint > *arg1 = (std::vector< IncidencePoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< IncidencePoint >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_IncidencePoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidencePointVector_end" "', argument " "1"" of type '" "std::vector< IncidencePoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< IncidencePoint > * >(argp1);
  {
    try {
      result = (arg1)->end();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< IncidencePoint >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidencePointVector_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< IncidencePoint > *arg1 = (std::vector< IncidencePoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< IncidencePoint >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_IncidencePoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidencePointVector_rbegin" "', argument " "1"" of type '" "std::vector< IncidencePoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< IncidencePoint > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< IncidencePoint >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidencePointVector_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< IncidencePoint > *arg1 = (std::vector< IncidencePoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< IncidencePoint >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_IncidencePoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidencePointVector_rend" "', argument " "1"" of type '" "std::vector< IncidencePoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< IncidencePoint > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< IncidencePoint >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidencePointVector_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< IncidencePoint > *arg1 = (std::vector< IncidencePoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_IncidencePoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidencePointVector_clear" "', argument " "1"" of type '" "std::vector< IncidencePoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< IncidencePoint > * >(argp1);
  {
    try {
      (arg1)->clear();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidencePointVector_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< IncidencePoint > *arg1 = (std::vector< IncidencePoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< IncidencePoint > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_IncidencePoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidencePointVector_get_allocator" "', argument " "1"" of type '" "std::vector< IncidencePoint > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< IncidencePoint > * >(argp1);
  {
    try {
      result = ((std::vector< IncidencePoint > const *)arg1)->get_allocator();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< IncidencePoint >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_IncidencePoint_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IncidencePointVector__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< IncidencePoint >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< IncidencePoint > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IncidencePointVector" "', argument " "1"" of type '" "std::vector< IncidencePoint >::size_type""'");
  } 
  arg1 = static_cast< std::vector< IncidencePoint >::size_type >(val1);
  {
    try {
      result = (std::vector< IncidencePoint > *)new std::vector< IncidencePoint >(arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_IncidencePoint_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidencePointVector_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< IncidencePoint > *arg1 = (std::vector< IncidencePoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_IncidencePoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidencePointVector_pop_back" "', argument " "1"" of type '" "std::vector< IncidencePoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< IncidencePoint > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidencePointVector_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< IncidencePoint > *arg1 = (std::vector< IncidencePoint > *) 0 ;
  std::vector< IncidencePoint >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_IncidencePoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidencePointVector_resize" "', argument " "1"" of type '" "std::vector< IncidencePoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< IncidencePoint > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IncidencePointVector_resize" "', argument " "2"" of type '" "std::vector< IncidencePoint >::size_type""'");
  } 
  arg2 = static_cast< std::vector< IncidencePoint >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidencePointVector_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< IncidencePoint > *arg1 = (std::vector< IncidencePoint > *) 0 ;
  std::vector< IncidencePoint >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< IncidencePoint >::iterator result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_IncidencePoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidencePointVector_erase" "', argument " "1"" of type '" "std::vector< IncidencePoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< IncidencePoint > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IncidencePointVector_erase" "', argument " "2"" of type '" "std::vector< IncidencePoint >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< IncidencePoint >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< IncidencePoint >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IncidencePointVector_erase" "', argument " "2"" of type '" "std::vector< IncidencePoint >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_IncidencePoint_Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< IncidencePoint >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidencePointVector_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< IncidencePoint > *arg1 = (std::vector< IncidencePoint > *) 0 ;
  std::vector< IncidencePoint >::iterator arg2 ;
  std::vector< IncidencePoint >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< IncidencePoint >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_IncidencePoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidencePointVector_erase" "', argument " "1"" of type '" "std::vector< IncidencePoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< IncidencePoint > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IncidencePointVector_erase" "', argument " "2"" of type '" "std::vector< IncidencePoint >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< IncidencePoint >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< IncidencePoint >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IncidencePointVector_erase" "', argument " "2"" of type '" "std::vector< IncidencePoint >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IncidencePointVector_erase" "', argument " "3"" of type '" "std::vector< IncidencePoint >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< IncidencePoint >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< IncidencePoint >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IncidencePointVector_erase" "', argument " "3"" of type '" "std::vector< IncidencePoint >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_IncidencePoint_Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< IncidencePoint >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidencePointVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "IncidencePointVector_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_IncidencePointVector_erase__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_IncidencePointVector_erase__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'IncidencePointVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< IncidencePoint >::erase(std::vector< IncidencePoint >::iterator)\n"
    "    std::vector< IncidencePoint >::erase(std::vector< IncidencePoint >::iterator,std::vector< IncidencePoint >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_IncidencePointVector__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< IncidencePoint >::size_type arg1 ;
  std::vector< IncidencePoint >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< IncidencePoint > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IncidencePointVector" "', argument " "1"" of type '" "std::vector< IncidencePoint >::size_type""'");
  } 
  arg1 = static_cast< std::vector< IncidencePoint >::size_type >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_IncidencePoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_IncidencePointVector" "', argument " "2"" of type '" "std::vector< IncidencePoint >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IncidencePointVector" "', argument " "2"" of type '" "std::vector< IncidencePoint >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< IncidencePoint >::value_type * >(argp2);
  {
    try {
      result = (std::vector< IncidencePoint > *)new std::vector< IncidencePoint >(arg1,(std::vector< IncidencePoint >::value_type const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_IncidencePoint_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IncidencePointVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_IncidencePointVector", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    PyObject *retobj = _wrap_new_IncidencePointVector__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 1) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[0], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_new_IncidencePointVector__SWIG_2(self, argc, argv);
  }
check_2:
  
  if (argc == 1) {
    PyObject *retobj = _wrap_new_IncidencePointVector__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_new_IncidencePointVector__SWIG_3(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_IncidencePointVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< IncidencePoint >::vector()\n"
    "    std::vector< IncidencePoint >::vector(std::vector< IncidencePoint > const &)\n"
    "    std::vector< IncidencePoint >::vector(std::vector< IncidencePoint >::size_type)\n"
    "    std::vector< IncidencePoint >::vector(std::vector< IncidencePoint >::size_type,std::vector< IncidencePoint >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IncidencePointVector_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< IncidencePoint > *arg1 = (std::vector< IncidencePoint > *) 0 ;
  std::vector< IncidencePoint >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IncidencePointVector_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_IncidencePoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidencePointVector_push_back" "', argument " "1"" of type '" "std::vector< IncidencePoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< IncidencePoint > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_IncidencePoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IncidencePointVector_push_back" "', argument " "2"" of type '" "std::vector< IncidencePoint >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IncidencePointVector_push_back" "', argument " "2"" of type '" "std::vector< IncidencePoint >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< IncidencePoint >::value_type * >(argp2);
  {
    try {
      (arg1)->push_back((std::vector< IncidencePoint >::value_type const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidencePointVector_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< IncidencePoint > *arg1 = (std::vector< IncidencePoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< IncidencePoint >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_IncidencePoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidencePointVector_front" "', argument " "1"" of type '" "std::vector< IncidencePoint > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< IncidencePoint > * >(argp1);
  {
    try {
      result = (std::vector< IncidencePoint >::value_type *) &((std::vector< IncidencePoint > const *)arg1)->front();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IncidencePoint, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< IncidencePoint >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidencePointVector_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< IncidencePoint > *arg1 = (std::vector< IncidencePoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< IncidencePoint >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_IncidencePoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidencePointVector_back" "', argument " "1"" of type '" "std::vector< IncidencePoint > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< IncidencePoint > * >(argp1);
  {
    try {
      result = (std::vector< IncidencePoint >::value_type *) &((std::vector< IncidencePoint > const *)arg1)->back();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IncidencePoint, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< IncidencePoint >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidencePointVector_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< IncidencePoint > *arg1 = (std::vector< IncidencePoint > *) 0 ;
  std::vector< IncidencePoint >::size_type arg2 ;
  std::vector< IncidencePoint >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IncidencePointVector_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_IncidencePoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidencePointVector_assign" "', argument " "1"" of type '" "std::vector< IncidencePoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< IncidencePoint > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IncidencePointVector_assign" "', argument " "2"" of type '" "std::vector< IncidencePoint >::size_type""'");
  } 
  arg2 = static_cast< std::vector< IncidencePoint >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_IncidencePoint,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IncidencePointVector_assign" "', argument " "3"" of type '" "std::vector< IncidencePoint >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IncidencePointVector_assign" "', argument " "3"" of type '" "std::vector< IncidencePoint >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< IncidencePoint >::value_type * >(argp3);
  {
    try {
      (arg1)->assign(arg2,(std::vector< IncidencePoint >::value_type const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidencePointVector_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< IncidencePoint > *arg1 = (std::vector< IncidencePoint > *) 0 ;
  std::vector< IncidencePoint >::size_type arg2 ;
  std::vector< IncidencePoint >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_IncidencePoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidencePointVector_resize" "', argument " "1"" of type '" "std::vector< IncidencePoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< IncidencePoint > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IncidencePointVector_resize" "', argument " "2"" of type '" "std::vector< IncidencePoint >::size_type""'");
  } 
  arg2 = static_cast< std::vector< IncidencePoint >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_IncidencePoint,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IncidencePointVector_resize" "', argument " "3"" of type '" "std::vector< IncidencePoint >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IncidencePointVector_resize" "', argument " "3"" of type '" "std::vector< IncidencePoint >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< IncidencePoint >::value_type * >(argp3);
  {
    try {
      (arg1)->resize(arg2,(std::vector< IncidencePoint >::value_type const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidencePointVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "IncidencePointVector_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_IncidencePointVector_resize__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_IncidencePointVector_resize__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'IncidencePointVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< IncidencePoint >::resize(std::vector< IncidencePoint >::size_type)\n"
    "    std::vector< IncidencePoint >::resize(std::vector< IncidencePoint >::size_type,std::vector< IncidencePoint >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IncidencePointVector_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< IncidencePoint > *arg1 = (std::vector< IncidencePoint > *) 0 ;
  std::vector< IncidencePoint >::iterator arg2 ;
  std::vector< IncidencePoint >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::vector< IncidencePoint >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_IncidencePoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidencePointVector_insert" "', argument " "1"" of type '" "std::vector< IncidencePoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< IncidencePoint > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IncidencePointVector_insert" "', argument " "2"" of type '" "std::vector< IncidencePoint >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< IncidencePoint >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< IncidencePoint >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IncidencePointVector_insert" "', argument " "2"" of type '" "std::vector< IncidencePoint >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_IncidencePoint,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IncidencePointVector_insert" "', argument " "3"" of type '" "std::vector< IncidencePoint >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IncidencePointVector_insert" "', argument " "3"" of type '" "std::vector< IncidencePoint >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< IncidencePoint >::value_type * >(argp3);
  {
    try {
      result = std_vector_Sl_IncidencePoint_Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(IncidencePoint const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< IncidencePoint >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidencePointVector_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< IncidencePoint > *arg1 = (std::vector< IncidencePoint > *) 0 ;
  std::vector< IncidencePoint >::iterator arg2 ;
  std::vector< IncidencePoint >::size_type arg3 ;
  std::vector< IncidencePoint >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_IncidencePoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidencePointVector_insert" "', argument " "1"" of type '" "std::vector< IncidencePoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< IncidencePoint > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IncidencePointVector_insert" "', argument " "2"" of type '" "std::vector< IncidencePoint >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< IncidencePoint >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< IncidencePoint >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IncidencePointVector_insert" "', argument " "2"" of type '" "std::vector< IncidencePoint >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IncidencePointVector_insert" "', argument " "3"" of type '" "std::vector< IncidencePoint >::size_type""'");
  } 
  arg3 = static_cast< std::vector< IncidencePoint >::size_type >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_IncidencePoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IncidencePointVector_insert" "', argument " "4"" of type '" "std::vector< IncidencePoint >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IncidencePointVector_insert" "', argument " "4"" of type '" "std::vector< IncidencePoint >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< IncidencePoint >::value_type * >(argp4);
  {
    try {
      std_vector_Sl_IncidencePoint_Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(IncidencePoint const &)*arg4);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidencePointVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "IncidencePointVector_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    PyObject *retobj = _wrap_IncidencePointVector_insert__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_IncidencePointVector_insert__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'IncidencePointVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< IncidencePoint >::insert(std::vector< IncidencePoint >::iterator,std::vector< IncidencePoint >::value_type const &)\n"
    "    std::vector< IncidencePoint >::insert(std::vector< IncidencePoint >::iterator,std::vector< IncidencePoint >::size_type,std::vector< IncidencePoint >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IncidencePointVector_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< IncidencePoint > *arg1 = (std::vector< IncidencePoint > *) 0 ;
  std::vector< IncidencePoint >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IncidencePointVector_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_IncidencePoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidencePointVector_reserve" "', argument " "1"" of type '" "std::vector< IncidencePoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< IncidencePoint > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IncidencePointVector_reserve" "', argument " "2"" of type '" "std::vector< IncidencePoint >::size_type""'");
  } 
  arg2 = static_cast< std::vector< IncidencePoint >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidencePointVector_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< IncidencePoint > *arg1 = (std::vector< IncidencePoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< IncidencePoint >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_IncidencePoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidencePointVector_capacity" "', argument " "1"" of type '" "std::vector< IncidencePoint > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< IncidencePoint > * >(argp1);
  {
    try {
      result = ((std::vector< IncidencePoint > const *)arg1)->capacity();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IncidencePointVector(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< IncidencePoint > *arg1 = (std::vector< IncidencePoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_IncidencePoint_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IncidencePointVector" "', argument " "1"" of type '" "std::vector< IncidencePoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< IncidencePoint > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IncidencePointVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_IncidencePoint_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *IncidencePointVector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_IncidencePoint__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int *arg1 = 0 ;
  int *arg2 = 0 ;
  IncidencePointType *arg3 = 0 ;
  int temp1 ;
  int val1 ;
  int ecode1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 ;
  IncidencePointType temp3 ;
  IncidencePoint *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IncidencePoint" "', argument " "1"" of type '" "int""'");
  } 
  temp1 = static_cast< int >(val1);
  arg1 = &temp1;
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IncidencePoint" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_int (swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_IncidencePoint" "', argument " "3"" of type '" "IncidencePointType const &""'");
  } else {
    temp3 = static_cast< IncidencePointType >(val3);
    arg3 = &temp3;
  }
  {
    try {
      result = (IncidencePoint *)new IncidencePoint((int const &)*arg1,(int const &)*arg2,(IncidencePointType const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IncidencePoint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IncidencePoint__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  IncidencePoint *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  IncidencePoint *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_IncidencePoint,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IncidencePoint" "', argument " "1"" of type '" "IncidencePoint const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IncidencePoint" "', argument " "1"" of type '" "IncidencePoint const &""'"); 
  }
  arg1 = reinterpret_cast< IncidencePoint * >(argp1);
  {
    try {
      result = (IncidencePoint *)new IncidencePoint((IncidencePoint const &)*arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IncidencePoint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IncidencePoint__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  IncidencePoint *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (IncidencePoint *)new IncidencePoint();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IncidencePoint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IncidencePoint(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_IncidencePoint", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    PyObject *retobj = _wrap_new_IncidencePoint__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 1) {
    PyObject *retobj = _wrap_new_IncidencePoint__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_new_IncidencePoint__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_IncidencePoint'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IncidencePoint::IncidencePoint(int const &,int const &,IncidencePointType const &)\n"
    "    IncidencePoint::IncidencePoint(IncidencePoint const &)\n"
    "    IncidencePoint::IncidencePoint()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IncidencePoint_row_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  IncidencePoint *arg1 = (IncidencePoint *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IncidencePoint_row_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IncidencePoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidencePoint_row_set" "', argument " "1"" of type '" "IncidencePoint *""'"); 
  }
  arg1 = reinterpret_cast< IncidencePoint * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IncidencePoint_row_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->row = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidencePoint_row_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  IncidencePoint *arg1 = (IncidencePoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IncidencePoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidencePoint_row_get" "', argument " "1"" of type '" "IncidencePoint *""'"); 
  }
  arg1 = reinterpret_cast< IncidencePoint * >(argp1);
  result = (int) ((arg1)->row);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidencePoint_col_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  IncidencePoint *arg1 = (IncidencePoint *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IncidencePoint_col_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IncidencePoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidencePoint_col_set" "', argument " "1"" of type '" "IncidencePoint *""'"); 
  }
  arg1 = reinterpret_cast< IncidencePoint * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IncidencePoint_col_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->col = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidencePoint_col_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  IncidencePoint *arg1 = (IncidencePoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IncidencePoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidencePoint_col_get" "', argument " "1"" of type '" "IncidencePoint *""'"); 
  }
  arg1 = reinterpret_cast< IncidencePoint * >(argp1);
  result = (int) ((arg1)->col);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidencePoint_type_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  IncidencePoint *arg1 = (IncidencePoint *) 0 ;
  IncidencePointType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IncidencePoint_type_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IncidencePoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidencePoint_type_set" "', argument " "1"" of type '" "IncidencePoint *""'"); 
  }
  arg1 = reinterpret_cast< IncidencePoint * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IncidencePoint_type_set" "', argument " "2"" of type '" "IncidencePointType""'");
  } 
  arg2 = static_cast< IncidencePointType >(val2);
  if (arg1) (arg1)->type = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidencePoint_type_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  IncidencePoint *arg1 = (IncidencePoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  IncidencePointType result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IncidencePoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidencePoint_type_get" "', argument " "1"" of type '" "IncidencePoint *""'"); 
  }
  arg1 = reinterpret_cast< IncidencePoint * >(argp1);
  result = (IncidencePointType) ((arg1)->type);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IncidencePoint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  IncidencePoint *arg1 = (IncidencePoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IncidencePoint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IncidencePoint" "', argument " "1"" of type '" "IncidencePoint *""'"); 
  }
  arg1 = reinterpret_cast< IncidencePoint * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IncidencePoint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IncidencePoint, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *IncidencePoint_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_IncidenceMatrix(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Simulation *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  IncidenceMatrix *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Simulation,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IncidenceMatrix" "', argument " "1"" of type '" "Simulation &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IncidenceMatrix" "', argument " "1"" of type '" "Simulation &""'"); 
  }
  arg1 = reinterpret_cast< Simulation * >(argp1);
  {
    try {
      result = (IncidenceMatrix *)new IncidenceMatrix(*arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IncidenceMatrix, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IncidenceMatrix(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  IncidenceMatrix *arg1 = (IncidenceMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IncidenceMatrix, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IncidenceMatrix" "', argument " "1"" of type '" "IncidenceMatrix *""'"); 
  }
  arg1 = reinterpret_cast< IncidenceMatrix * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidenceMatrix_getIncidenceData(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  IncidenceMatrix *arg1 = (IncidenceMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< IncidencePoint,std::allocator< IncidencePoint > > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IncidenceMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidenceMatrix_getIncidenceData" "', argument " "1"" of type '" "IncidenceMatrix *""'"); 
  }
  arg1 = reinterpret_cast< IncidenceMatrix * >(argp1);
  {
    try {
      result = (std::vector< IncidencePoint,std::allocator< IncidencePoint > > *) &(arg1)->getIncidenceData();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< IncidencePoint,std::allocator< IncidencePoint > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidenceMatrix_getNumRows(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  IncidenceMatrix *arg1 = (IncidenceMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IncidenceMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidenceMatrix_getNumRows" "', argument " "1"" of type '" "IncidenceMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< IncidenceMatrix * >(argp1);
  {
    try {
      result = (int *) &((IncidenceMatrix const *)arg1)->getNumRows();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidenceMatrix_getNumCols(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  IncidenceMatrix *arg1 = (IncidenceMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IncidenceMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidenceMatrix_getNumCols" "', argument " "1"" of type '" "IncidenceMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< IncidenceMatrix * >(argp1);
  {
    try {
      result = (int *) &((IncidenceMatrix const *)arg1)->getNumCols();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidenceMatrix_getVariable(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  IncidenceMatrix *arg1 = (IncidenceMatrix *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  Variable result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IncidenceMatrix_getVariable", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IncidenceMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidenceMatrix_getVariable" "', argument " "1"" of type '" "IncidenceMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< IncidenceMatrix * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IncidenceMatrix_getVariable" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      result = ((IncidenceMatrix const *)arg1)->getVariable((int const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new Variable(result)), SWIGTYPE_p_Variable, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidenceMatrix_getRelation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  IncidenceMatrix *arg1 = (IncidenceMatrix *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  SwigValueWrapper< Relation > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IncidenceMatrix_getRelation", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IncidenceMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidenceMatrix_getRelation" "', argument " "1"" of type '" "IncidenceMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< IncidenceMatrix * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IncidenceMatrix_getRelation" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      result = ((IncidenceMatrix const *)arg1)->getRelation((int const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new Relation(result)), SWIGTYPE_p_Relation, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidenceMatrix_getBlockRow(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  IncidenceMatrix *arg1 = (IncidenceMatrix *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IncidenceMatrix_getBlockRow", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IncidenceMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidenceMatrix_getBlockRow" "', argument " "1"" of type '" "IncidenceMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< IncidenceMatrix * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IncidenceMatrix_getBlockRow" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      result = (int)((IncidenceMatrix const *)arg1)->getBlockRow((int const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidenceMatrix_getBlockVars(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  IncidenceMatrix *arg1 = (IncidenceMatrix *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::vector< Variable,std::allocator< Variable > > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IncidenceMatrix_getBlockVars", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IncidenceMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidenceMatrix_getBlockVars" "', argument " "1"" of type '" "IncidenceMatrix *""'"); 
  }
  arg1 = reinterpret_cast< IncidenceMatrix * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IncidenceMatrix_getBlockVars" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      result = (arg1)->getBlockVars((int const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< Variable,std::allocator< Variable > >(result)), SWIGTYPE_p_std__vectorT_Variable_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidenceMatrix_getBlockRels(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  IncidenceMatrix *arg1 = (IncidenceMatrix *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::vector< Relation,std::allocator< Relation > > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IncidenceMatrix_getBlockRels", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IncidenceMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidenceMatrix_getBlockRels" "', argument " "1"" of type '" "IncidenceMatrix *""'"); 
  }
  arg1 = reinterpret_cast< IncidenceMatrix * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IncidenceMatrix_getBlockRels" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      result = (arg1)->getBlockRels((int const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< Relation,std::allocator< Relation > >(result)), SWIGTYPE_p_std__vectorT_Relation_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidenceMatrix_getBlockLocation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  IncidenceMatrix *arg1 = (IncidenceMatrix *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::vector< int,std::allocator< int > > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IncidenceMatrix_getBlockLocation", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IncidenceMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidenceMatrix_getBlockLocation" "', argument " "1"" of type '" "IncidenceMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< IncidenceMatrix * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IncidenceMatrix_getBlockLocation" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      result = ((IncidenceMatrix const *)arg1)->getBlockLocation((int const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidenceMatrix_getBlockStatus(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  IncidenceMatrix *arg1 = (IncidenceMatrix *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  BlockStatusType result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IncidenceMatrix_getBlockStatus", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IncidenceMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidenceMatrix_getBlockStatus" "', argument " "1"" of type '" "IncidenceMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< IncidenceMatrix * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IncidenceMatrix_getBlockStatus" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      result = (BlockStatusType)((IncidenceMatrix const *)arg1)->getBlockStatus((int const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidenceMatrix_getNumBlocks(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  IncidenceMatrix *arg1 = (IncidenceMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IncidenceMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidenceMatrix_getNumBlocks" "', argument " "1"" of type '" "IncidenceMatrix *""'"); 
  }
  arg1 = reinterpret_cast< IncidenceMatrix * >(argp1);
  {
    try {
      result = (int)(arg1)->getNumBlocks();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IncidenceMatrix_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IncidenceMatrix, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *IncidenceMatrix_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Variable__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  Variable *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (Variable *)new Variable();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Variable, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Variable__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Variable *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Variable *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Variable,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Variable" "', argument " "1"" of type '" "Variable const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Variable" "', argument " "1"" of type '" "Variable const &""'"); 
  }
  arg1 = reinterpret_cast< Variable * >(argp1);
  {
    try {
      result = (Variable *)new Variable((Variable const &)*arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Variable, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Variable__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Simulation *arg1 = (Simulation *) 0 ;
  var_variable *arg2 = (var_variable *) 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Variable *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], SWIG_as_voidptrptr(&arg1), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Variable" "', argument " "1"" of type '" "Simulation *""'");
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_var_variable, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Variable" "', argument " "2"" of type '" "var_variable *""'"); 
  }
  arg2 = reinterpret_cast< var_variable * >(argp2);
  {
    try {
      result = (Variable *)new Variable(arg1,arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Variable, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Variable(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_Variable", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    PyObject *retobj = _wrap_new_Variable__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 1) {
    PyObject *retobj = _wrap_new_Variable__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_new_Variable__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Variable'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Variable::Variable()\n"
    "    Variable::Variable(Variable const &)\n"
    "    Variable::Variable(Simulation *,var_variable *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Variable_getName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Variable *arg1 = (Variable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Variable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variable_getName" "', argument " "1"" of type '" "Variable const *""'"); 
  }
  arg1 = reinterpret_cast< Variable * >(argp1);
  {
    try {
      result = ((Variable const *)arg1)->getName();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variable_getValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Variable *arg1 = (Variable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Variable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variable_getValue" "', argument " "1"" of type '" "Variable const *""'"); 
  }
  arg1 = reinterpret_cast< Variable * >(argp1);
  {
    try {
      result = (double)((Variable const *)arg1)->getValue();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variable_getNominal(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Variable *arg1 = (Variable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Variable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variable_getNominal" "', argument " "1"" of type '" "Variable const *""'"); 
  }
  arg1 = reinterpret_cast< Variable * >(argp1);
  {
    try {
      result = (double)((Variable const *)arg1)->getNominal();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variable_getUpperBound(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Variable *arg1 = (Variable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Variable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variable_getUpperBound" "', argument " "1"" of type '" "Variable const *""'"); 
  }
  arg1 = reinterpret_cast< Variable * >(argp1);
  {
    try {
      result = (double)((Variable const *)arg1)->getUpperBound();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variable_getLowerBound(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Variable *arg1 = (Variable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Variable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variable_getLowerBound" "', argument " "1"" of type '" "Variable const *""'"); 
  }
  arg1 = reinterpret_cast< Variable * >(argp1);
  {
    try {
      result = (double)((Variable const *)arg1)->getLowerBound();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variable_getIncidentRelations(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Variable *arg1 = (Variable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Relation,std::allocator< Relation > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Variable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variable_getIncidentRelations" "', argument " "1"" of type '" "Variable const *""'"); 
  }
  arg1 = reinterpret_cast< Variable * >(argp1);
  {
    try {
      result = ((Variable const *)arg1)->getIncidentRelations();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< Relation,std::allocator< Relation > >(result)), SWIGTYPE_p_std__vectorT_Relation_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variable_getNumIncidentRelations(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Variable *arg1 = (Variable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Variable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variable_getNumIncidentRelations" "', argument " "1"" of type '" "Variable const *""'"); 
  }
  arg1 = reinterpret_cast< Variable * >(argp1);
  {
    try {
      result = (int)((Variable const *)arg1)->getNumIncidentRelations();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variable_getInstance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Variable *arg1 = (Variable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< Instanc > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Variable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variable_getInstance" "', argument " "1"" of type '" "Variable *""'"); 
  }
  arg1 = reinterpret_cast< Variable * >(argp1);
  {
    try {
      result = (arg1)->getInstance();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new Instanc(result)), SWIGTYPE_p_Instanc, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Variable(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Variable *arg1 = (Variable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Variable, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Variable" "', argument " "1"" of type '" "Variable *""'"); 
  }
  arg1 = reinterpret_cast< Variable * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Variable_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Variable, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Variable_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Relation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Relation *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Relation *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Relation,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Relation" "', argument " "1"" of type '" "Relation const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Relation" "', argument " "1"" of type '" "Relation const &""'"); 
  }
  arg1 = reinterpret_cast< Relation * >(argp1);
  {
    try {
      result = (Relation *)new Relation((Relation const &)*arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Relation, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Relation_getName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Relation *arg1 = (Relation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Relation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Relation_getName" "', argument " "1"" of type '" "Relation *""'"); 
  }
  arg1 = reinterpret_cast< Relation * >(argp1);
  {
    try {
      result = (arg1)->getName();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Relation_getResidual(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Relation *arg1 = (Relation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Relation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Relation_getResidual" "', argument " "1"" of type '" "Relation const *""'"); 
  }
  arg1 = reinterpret_cast< Relation * >(argp1);
  {
    try {
      result = (double)((Relation const *)arg1)->getResidual();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Relation_getIncidentVariables(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Relation *arg1 = (Relation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Variable,std::allocator< Variable > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Relation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Relation_getIncidentVariables" "', argument " "1"" of type '" "Relation const *""'"); 
  }
  arg1 = reinterpret_cast< Relation * >(argp1);
  {
    try {
      result = ((Relation const *)arg1)->getIncidentVariables();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< Variable,std::allocator< Variable > >(result)), SWIGTYPE_p_std__vectorT_Variable_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Relation_getNumIncidentVariables(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Relation *arg1 = (Relation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Relation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Relation_getNumIncidentVariables" "', argument " "1"" of type '" "Relation const *""'"); 
  }
  arg1 = reinterpret_cast< Relation * >(argp1);
  {
    try {
      result = (int)((Relation const *)arg1)->getNumIncidentVariables();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Relation_getInstance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Relation *arg1 = (Relation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< Instanc > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Relation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Relation_getInstance" "', argument " "1"" of type '" "Relation const *""'"); 
  }
  arg1 = reinterpret_cast< Relation * >(argp1);
  {
    try {
      result = ((Relation const *)arg1)->getInstance();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new Instanc(result)), SWIGTYPE_p_Instanc, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Relation_getRelationAsString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Relation *arg1 = (Relation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Relation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Relation_getRelationAsString" "', argument " "1"" of type '" "Relation const *""'"); 
  }
  arg1 = reinterpret_cast< Relation * >(argp1);
  {
    try {
      result = ((Relation const *)arg1)->getRelationAsString();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Relation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Relation *arg1 = (Relation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Relation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Relation" "', argument " "1"" of type '" "Relation *""'"); 
  }
  arg1 = reinterpret_cast< Relation * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Relation_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Relation, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Relation_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_VariableVector_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Variable > *arg1 = (std::vector< Variable > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Variable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableVector_iterator" "', argument " "1"" of type '" "std::vector< Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Variable > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_vector_Sl_Variable_Sg__iterator(arg1,arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableVector___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Variable > *arg1 = (std::vector< Variable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Variable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableVector___nonzero__" "', argument " "1"" of type '" "std::vector< Variable > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Variable > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_Variable_Sg____nonzero__((std::vector< Variable > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableVector___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Variable > *arg1 = (std::vector< Variable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Variable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableVector___bool__" "', argument " "1"" of type '" "std::vector< Variable > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Variable > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_Variable_Sg____bool__((std::vector< Variable > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableVector___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Variable > *arg1 = (std::vector< Variable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Variable >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Variable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableVector___len__" "', argument " "1"" of type '" "std::vector< Variable > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Variable > * >(argp1);
  {
    try {
      result = std_vector_Sl_Variable_Sg____len__((std::vector< Variable > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableVector___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Variable > *arg1 = (std::vector< Variable > *) 0 ;
  std::vector< Variable >::difference_type arg2 ;
  std::vector< Variable >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< Variable,std::allocator< Variable > > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "VariableVector___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Variable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableVector___getslice__" "', argument " "1"" of type '" "std::vector< Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Variable > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableVector___getslice__" "', argument " "2"" of type '" "std::vector< Variable >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Variable >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VariableVector___getslice__" "', argument " "3"" of type '" "std::vector< Variable >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Variable >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< Variable,std::allocator< Variable > > *)std_vector_Sl_Variable_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Variable_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableVector___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Variable > *arg1 = (std::vector< Variable > *) 0 ;
  std::vector< Variable >::difference_type arg2 ;
  std::vector< Variable >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Variable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableVector___setslice__" "', argument " "1"" of type '" "std::vector< Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Variable > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableVector___setslice__" "', argument " "2"" of type '" "std::vector< Variable >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Variable >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VariableVector___setslice__" "', argument " "3"" of type '" "std::vector< Variable >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Variable >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_Variable_Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableVector___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Variable > *arg1 = (std::vector< Variable > *) 0 ;
  std::vector< Variable >::difference_type arg2 ;
  std::vector< Variable >::difference_type arg3 ;
  std::vector< Variable,std::allocator< Variable > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Variable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableVector___setslice__" "', argument " "1"" of type '" "std::vector< Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Variable > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableVector___setslice__" "', argument " "2"" of type '" "std::vector< Variable >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Variable >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VariableVector___setslice__" "', argument " "3"" of type '" "std::vector< Variable >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Variable >::difference_type >(val3);
  {
    std::vector< Variable,std::allocator< Variable > > *ptr = (std::vector< Variable,std::allocator< Variable > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VariableVector___setslice__" "', argument " "4"" of type '" "std::vector< Variable,std::allocator< Variable > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VariableVector___setslice__" "', argument " "4"" of type '" "std::vector< Variable,std::allocator< Variable > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_Variable_Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< Variable,std::allocator< Variable > > const &)*arg4);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VariableVector___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    PyObject *retobj = _wrap_VariableVector___setslice____SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_VariableVector___setslice____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VariableVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Variable >::__setslice__(std::vector< Variable >::difference_type,std::vector< Variable >::difference_type)\n"
    "    std::vector< Variable >::__setslice__(std::vector< Variable >::difference_type,std::vector< Variable >::difference_type,std::vector< Variable,std::allocator< Variable > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VariableVector___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Variable > *arg1 = (std::vector< Variable > *) 0 ;
  std::vector< Variable >::difference_type arg2 ;
  std::vector< Variable >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "VariableVector___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Variable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableVector___delslice__" "', argument " "1"" of type '" "std::vector< Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Variable > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableVector___delslice__" "', argument " "2"" of type '" "std::vector< Variable >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Variable >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VariableVector___delslice__" "', argument " "3"" of type '" "std::vector< Variable >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Variable >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_Variable_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableVector___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Variable > *arg1 = (std::vector< Variable > *) 0 ;
  std::vector< Variable >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Variable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableVector___delitem__" "', argument " "1"" of type '" "std::vector< Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Variable > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableVector___delitem__" "', argument " "2"" of type '" "std::vector< Variable >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Variable >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_Variable_Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableVector___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Variable > *arg1 = (std::vector< Variable > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< Variable,std::allocator< Variable > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Variable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableVector___getitem__" "', argument " "1"" of type '" "std::vector< Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Variable > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VariableVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        result = (std::vector< Variable,std::allocator< Variable > > *)std_vector_Sl_Variable_Sg____getitem____SWIG_0(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Variable_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableVector___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Variable > *arg1 = (std::vector< Variable > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< Variable,std::allocator< Variable > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Variable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableVector___setitem__" "', argument " "1"" of type '" "std::vector< Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Variable > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VariableVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector< Variable,std::allocator< Variable > > *ptr = (std::vector< Variable,std::allocator< Variable > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VariableVector___setitem__" "', argument " "3"" of type '" "std::vector< Variable,std::allocator< Variable > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VariableVector___setitem__" "', argument " "3"" of type '" "std::vector< Variable,std::allocator< Variable > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_Variable_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< Variable,std::allocator< Variable > > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableVector___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Variable > *arg1 = (std::vector< Variable > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Variable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableVector___setitem__" "', argument " "1"" of type '" "std::vector< Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Variable > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VariableVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        std_vector_Sl_Variable_Sg____setitem____SWIG_1(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableVector___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Variable > *arg1 = (std::vector< Variable > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Variable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableVector___delitem__" "', argument " "1"" of type '" "std::vector< Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Variable > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VariableVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        std_vector_Sl_Variable_Sg____delitem____SWIG_1(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VariableVector___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_1;
    return _wrap_VariableVector___delitem____SWIG_1(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_VariableVector___delitem____SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VariableVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Variable >::__delitem__(std::vector< Variable >::difference_type)\n"
    "    std::vector< Variable >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VariableVector___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Variable > *arg1 = (std::vector< Variable > *) 0 ;
  std::vector< Variable >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< Variable >::value_type *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Variable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableVector___getitem__" "', argument " "1"" of type '" "std::vector< Variable > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Variable > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableVector___getitem__" "', argument " "2"" of type '" "std::vector< Variable >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Variable >::difference_type >(val2);
  {
    try {
      try {
        result = (std::vector< Variable >::value_type *) &std_vector_Sl_Variable_Sg____getitem____SWIG_1((std::vector< Variable > const *)arg1,SWIG_STD_MOVE(arg2));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Variable, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Variable >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VariableVector___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_1;
    return _wrap_VariableVector___getitem____SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_VariableVector___getitem____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VariableVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Variable >::__getitem__(PySliceObject *)\n"
    "    std::vector< Variable >::__getitem__(std::vector< Variable >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VariableVector___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Variable > *arg1 = (std::vector< Variable > *) 0 ;
  std::vector< Variable >::difference_type arg2 ;
  std::vector< Variable >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Variable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableVector___setitem__" "', argument " "1"" of type '" "std::vector< Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Variable > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableVector___setitem__" "', argument " "2"" of type '" "std::vector< Variable >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Variable >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Variable,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VariableVector___setitem__" "', argument " "3"" of type '" "std::vector< Variable >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VariableVector___setitem__" "', argument " "3"" of type '" "std::vector< Variable >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Variable >::value_type * >(argp3);
  {
    try {
      try {
        std_vector_Sl_Variable_Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(Variable const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VariableVector___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_VariableVector___setitem____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_2;
    {
      int res = swig::asptr(argv[2], (std::vector< Variable,std::allocator< Variable > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_VariableVector___setitem____SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_VariableVector___setitem____SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VariableVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Variable >::__setitem__(PySliceObject *,std::vector< Variable,std::allocator< Variable > > const &)\n"
    "    std::vector< Variable >::__setitem__(PySliceObject *)\n"
    "    std::vector< Variable >::__setitem__(std::vector< Variable >::difference_type,std::vector< Variable >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VariableVector_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Variable > *arg1 = (std::vector< Variable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Variable >::value_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Variable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableVector_pop" "', argument " "1"" of type '" "std::vector< Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Variable > * >(argp1);
  {
    try {
      try {
        result = std_vector_Sl_Variable_Sg__pop(arg1);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< Variable >::value_type(result)), SWIGTYPE_p_Variable, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableVector_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Variable > *arg1 = (std::vector< Variable > *) 0 ;
  std::vector< Variable >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "VariableVector_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Variable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableVector_append" "', argument " "1"" of type '" "std::vector< Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Variable > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Variable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableVector_append" "', argument " "2"" of type '" "std::vector< Variable >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VariableVector_append" "', argument " "2"" of type '" "std::vector< Variable >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Variable >::value_type * >(argp2);
  {
    try {
      std_vector_Sl_Variable_Sg__append(arg1,(Variable const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VariableVector__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< Variable > *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (std::vector< Variable > *)new std::vector< Variable >();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Variable_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VariableVector__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Variable > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< Variable > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< Variable,std::allocator< Variable > > *ptr = (std::vector< Variable,std::allocator< Variable > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VariableVector" "', argument " "1"" of type '" "std::vector< Variable > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VariableVector" "', argument " "1"" of type '" "std::vector< Variable > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< Variable > *)new std::vector< Variable >((std::vector< Variable > const &)*arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Variable_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableVector_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Variable > *arg1 = (std::vector< Variable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Variable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableVector_empty" "', argument " "1"" of type '" "std::vector< Variable > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Variable > * >(argp1);
  {
    try {
      result = (bool)((std::vector< Variable > const *)arg1)->empty();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableVector_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Variable > *arg1 = (std::vector< Variable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Variable >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Variable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableVector_size" "', argument " "1"" of type '" "std::vector< Variable > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Variable > * >(argp1);
  {
    try {
      result = ((std::vector< Variable > const *)arg1)->size();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableVector_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Variable > *arg1 = (std::vector< Variable > *) 0 ;
  std::vector< Variable > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "VariableVector_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Variable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableVector_swap" "', argument " "1"" of type '" "std::vector< Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Variable > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_Variable_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableVector_swap" "', argument " "2"" of type '" "std::vector< Variable > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VariableVector_swap" "', argument " "2"" of type '" "std::vector< Variable > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Variable > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableVector_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Variable > *arg1 = (std::vector< Variable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Variable >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Variable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableVector_begin" "', argument " "1"" of type '" "std::vector< Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Variable > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Variable >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableVector_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Variable > *arg1 = (std::vector< Variable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Variable >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Variable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableVector_end" "', argument " "1"" of type '" "std::vector< Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Variable > * >(argp1);
  {
    try {
      result = (arg1)->end();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Variable >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableVector_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Variable > *arg1 = (std::vector< Variable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Variable >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Variable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableVector_rbegin" "', argument " "1"" of type '" "std::vector< Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Variable > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Variable >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableVector_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Variable > *arg1 = (std::vector< Variable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Variable >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Variable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableVector_rend" "', argument " "1"" of type '" "std::vector< Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Variable > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Variable >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableVector_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Variable > *arg1 = (std::vector< Variable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Variable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableVector_clear" "', argument " "1"" of type '" "std::vector< Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Variable > * >(argp1);
  {
    try {
      (arg1)->clear();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableVector_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Variable > *arg1 = (std::vector< Variable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< Variable > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Variable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableVector_get_allocator" "', argument " "1"" of type '" "std::vector< Variable > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Variable > * >(argp1);
  {
    try {
      result = ((std::vector< Variable > const *)arg1)->get_allocator();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< Variable >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_Variable_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VariableVector__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Variable >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< Variable > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VariableVector" "', argument " "1"" of type '" "std::vector< Variable >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Variable >::size_type >(val1);
  {
    try {
      result = (std::vector< Variable > *)new std::vector< Variable >(arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Variable_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableVector_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Variable > *arg1 = (std::vector< Variable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Variable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableVector_pop_back" "', argument " "1"" of type '" "std::vector< Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Variable > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableVector_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Variable > *arg1 = (std::vector< Variable > *) 0 ;
  std::vector< Variable >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Variable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableVector_resize" "', argument " "1"" of type '" "std::vector< Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Variable > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableVector_resize" "', argument " "2"" of type '" "std::vector< Variable >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Variable >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableVector_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Variable > *arg1 = (std::vector< Variable > *) 0 ;
  std::vector< Variable >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< Variable >::iterator result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Variable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableVector_erase" "', argument " "1"" of type '" "std::vector< Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Variable > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VariableVector_erase" "', argument " "2"" of type '" "std::vector< Variable >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Variable >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Variable >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VariableVector_erase" "', argument " "2"" of type '" "std::vector< Variable >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_Variable_Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Variable >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableVector_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Variable > *arg1 = (std::vector< Variable > *) 0 ;
  std::vector< Variable >::iterator arg2 ;
  std::vector< Variable >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< Variable >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Variable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableVector_erase" "', argument " "1"" of type '" "std::vector< Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Variable > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VariableVector_erase" "', argument " "2"" of type '" "std::vector< Variable >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Variable >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Variable >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VariableVector_erase" "', argument " "2"" of type '" "std::vector< Variable >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VariableVector_erase" "', argument " "3"" of type '" "std::vector< Variable >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Variable >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Variable >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VariableVector_erase" "', argument " "3"" of type '" "std::vector< Variable >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_Variable_Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Variable >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VariableVector_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_VariableVector_erase__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_VariableVector_erase__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VariableVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Variable >::erase(std::vector< Variable >::iterator)\n"
    "    std::vector< Variable >::erase(std::vector< Variable >::iterator,std::vector< Variable >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_VariableVector__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Variable >::size_type arg1 ;
  std::vector< Variable >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< Variable > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VariableVector" "', argument " "1"" of type '" "std::vector< Variable >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Variable >::size_type >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Variable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VariableVector" "', argument " "2"" of type '" "std::vector< Variable >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VariableVector" "', argument " "2"" of type '" "std::vector< Variable >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Variable >::value_type * >(argp2);
  {
    try {
      result = (std::vector< Variable > *)new std::vector< Variable >(arg1,(std::vector< Variable >::value_type const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Variable_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VariableVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_VariableVector", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    PyObject *retobj = _wrap_new_VariableVector__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 1) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[0], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_new_VariableVector__SWIG_2(self, argc, argv);
  }
check_2:
  
  if (argc == 1) {
    PyObject *retobj = _wrap_new_VariableVector__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_new_VariableVector__SWIG_3(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_VariableVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Variable >::vector()\n"
    "    std::vector< Variable >::vector(std::vector< Variable > const &)\n"
    "    std::vector< Variable >::vector(std::vector< Variable >::size_type)\n"
    "    std::vector< Variable >::vector(std::vector< Variable >::size_type,std::vector< Variable >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VariableVector_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Variable > *arg1 = (std::vector< Variable > *) 0 ;
  std::vector< Variable >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "VariableVector_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Variable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableVector_push_back" "', argument " "1"" of type '" "std::vector< Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Variable > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Variable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableVector_push_back" "', argument " "2"" of type '" "std::vector< Variable >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VariableVector_push_back" "', argument " "2"" of type '" "std::vector< Variable >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Variable >::value_type * >(argp2);
  {
    try {
      (arg1)->push_back((std::vector< Variable >::value_type const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableVector_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Variable > *arg1 = (std::vector< Variable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Variable >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Variable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableVector_front" "', argument " "1"" of type '" "std::vector< Variable > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Variable > * >(argp1);
  {
    try {
      result = (std::vector< Variable >::value_type *) &((std::vector< Variable > const *)arg1)->front();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Variable, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Variable >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableVector_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Variable > *arg1 = (std::vector< Variable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Variable >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Variable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableVector_back" "', argument " "1"" of type '" "std::vector< Variable > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Variable > * >(argp1);
  {
    try {
      result = (std::vector< Variable >::value_type *) &((std::vector< Variable > const *)arg1)->back();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Variable, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Variable >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableVector_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Variable > *arg1 = (std::vector< Variable > *) 0 ;
  std::vector< Variable >::size_type arg2 ;
  std::vector< Variable >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "VariableVector_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Variable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableVector_assign" "', argument " "1"" of type '" "std::vector< Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Variable > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableVector_assign" "', argument " "2"" of type '" "std::vector< Variable >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Variable >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Variable,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VariableVector_assign" "', argument " "3"" of type '" "std::vector< Variable >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VariableVector_assign" "', argument " "3"" of type '" "std::vector< Variable >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Variable >::value_type * >(argp3);
  {
    try {
      (arg1)->assign(arg2,(std::vector< Variable >::value_type const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableVector_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Variable > *arg1 = (std::vector< Variable > *) 0 ;
  std::vector< Variable >::size_type arg2 ;
  std::vector< Variable >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Variable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableVector_resize" "', argument " "1"" of type '" "std::vector< Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Variable > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableVector_resize" "', argument " "2"" of type '" "std::vector< Variable >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Variable >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Variable,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VariableVector_resize" "', argument " "3"" of type '" "std::vector< Variable >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VariableVector_resize" "', argument " "3"" of type '" "std::vector< Variable >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Variable >::value_type * >(argp3);
  {
    try {
      (arg1)->resize(arg2,(std::vector< Variable >::value_type const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VariableVector_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_VariableVector_resize__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_VariableVector_resize__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VariableVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Variable >::resize(std::vector< Variable >::size_type)\n"
    "    std::vector< Variable >::resize(std::vector< Variable >::size_type,std::vector< Variable >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VariableVector_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Variable > *arg1 = (std::vector< Variable > *) 0 ;
  std::vector< Variable >::iterator arg2 ;
  std::vector< Variable >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::vector< Variable >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Variable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableVector_insert" "', argument " "1"" of type '" "std::vector< Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Variable > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VariableVector_insert" "', argument " "2"" of type '" "std::vector< Variable >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Variable >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Variable >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VariableVector_insert" "', argument " "2"" of type '" "std::vector< Variable >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Variable,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VariableVector_insert" "', argument " "3"" of type '" "std::vector< Variable >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VariableVector_insert" "', argument " "3"" of type '" "std::vector< Variable >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Variable >::value_type * >(argp3);
  {
    try {
      result = std_vector_Sl_Variable_Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(Variable const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Variable >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableVector_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Variable > *arg1 = (std::vector< Variable > *) 0 ;
  std::vector< Variable >::iterator arg2 ;
  std::vector< Variable >::size_type arg3 ;
  std::vector< Variable >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Variable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableVector_insert" "', argument " "1"" of type '" "std::vector< Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Variable > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VariableVector_insert" "', argument " "2"" of type '" "std::vector< Variable >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Variable >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Variable >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VariableVector_insert" "', argument " "2"" of type '" "std::vector< Variable >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VariableVector_insert" "', argument " "3"" of type '" "std::vector< Variable >::size_type""'");
  } 
  arg3 = static_cast< std::vector< Variable >::size_type >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_Variable,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VariableVector_insert" "', argument " "4"" of type '" "std::vector< Variable >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VariableVector_insert" "', argument " "4"" of type '" "std::vector< Variable >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< Variable >::value_type * >(argp4);
  {
    try {
      std_vector_Sl_Variable_Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(Variable const &)*arg4);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VariableVector_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    PyObject *retobj = _wrap_VariableVector_insert__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_VariableVector_insert__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VariableVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Variable >::insert(std::vector< Variable >::iterator,std::vector< Variable >::value_type const &)\n"
    "    std::vector< Variable >::insert(std::vector< Variable >::iterator,std::vector< Variable >::size_type,std::vector< Variable >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VariableVector_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Variable > *arg1 = (std::vector< Variable > *) 0 ;
  std::vector< Variable >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "VariableVector_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Variable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableVector_reserve" "', argument " "1"" of type '" "std::vector< Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Variable > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableVector_reserve" "', argument " "2"" of type '" "std::vector< Variable >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Variable >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableVector_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Variable > *arg1 = (std::vector< Variable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Variable >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Variable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableVector_capacity" "', argument " "1"" of type '" "std::vector< Variable > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Variable > * >(argp1);
  {
    try {
      result = ((std::vector< Variable > const *)arg1)->capacity();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VariableVector(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Variable > *arg1 = (std::vector< Variable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Variable_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VariableVector" "', argument " "1"" of type '" "std::vector< Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Variable > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VariableVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_Variable_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *VariableVector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_RelationVector_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Relation > *arg1 = (std::vector< Relation > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Relation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelationVector_iterator" "', argument " "1"" of type '" "std::vector< Relation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Relation > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_vector_Sl_Relation_Sg__iterator(arg1,arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelationVector___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Relation > *arg1 = (std::vector< Relation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Relation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelationVector___nonzero__" "', argument " "1"" of type '" "std::vector< Relation > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Relation > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_Relation_Sg____nonzero__((std::vector< Relation > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelationVector___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Relation > *arg1 = (std::vector< Relation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Relation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelationVector___bool__" "', argument " "1"" of type '" "std::vector< Relation > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Relation > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_Relation_Sg____bool__((std::vector< Relation > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelationVector___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Relation > *arg1 = (std::vector< Relation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Relation >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Relation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelationVector___len__" "', argument " "1"" of type '" "std::vector< Relation > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Relation > * >(argp1);
  {
    try {
      result = std_vector_Sl_Relation_Sg____len__((std::vector< Relation > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelationVector___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Relation > *arg1 = (std::vector< Relation > *) 0 ;
  std::vector< Relation >::difference_type arg2 ;
  std::vector< Relation >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< Relation,std::allocator< Relation > > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "RelationVector___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Relation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelationVector___getslice__" "', argument " "1"" of type '" "std::vector< Relation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Relation > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RelationVector___getslice__" "', argument " "2"" of type '" "std::vector< Relation >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Relation >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RelationVector___getslice__" "', argument " "3"" of type '" "std::vector< Relation >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Relation >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< Relation,std::allocator< Relation > > *)std_vector_Sl_Relation_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Relation_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelationVector___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Relation > *arg1 = (std::vector< Relation > *) 0 ;
  std::vector< Relation >::difference_type arg2 ;
  std::vector< Relation >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Relation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelationVector___setslice__" "', argument " "1"" of type '" "std::vector< Relation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Relation > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RelationVector___setslice__" "', argument " "2"" of type '" "std::vector< Relation >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Relation >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RelationVector___setslice__" "', argument " "3"" of type '" "std::vector< Relation >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Relation >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_Relation_Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelationVector___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Relation > *arg1 = (std::vector< Relation > *) 0 ;
  std::vector< Relation >::difference_type arg2 ;
  std::vector< Relation >::difference_type arg3 ;
  std::vector< Relation,std::allocator< Relation > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Relation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelationVector___setslice__" "', argument " "1"" of type '" "std::vector< Relation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Relation > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RelationVector___setslice__" "', argument " "2"" of type '" "std::vector< Relation >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Relation >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RelationVector___setslice__" "', argument " "3"" of type '" "std::vector< Relation >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Relation >::difference_type >(val3);
  {
    std::vector< Relation,std::allocator< Relation > > *ptr = (std::vector< Relation,std::allocator< Relation > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RelationVector___setslice__" "', argument " "4"" of type '" "std::vector< Relation,std::allocator< Relation > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RelationVector___setslice__" "', argument " "4"" of type '" "std::vector< Relation,std::allocator< Relation > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_Relation_Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< Relation,std::allocator< Relation > > const &)*arg4);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelationVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RelationVector___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    PyObject *retobj = _wrap_RelationVector___setslice____SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_RelationVector___setslice____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RelationVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Relation >::__setslice__(std::vector< Relation >::difference_type,std::vector< Relation >::difference_type)\n"
    "    std::vector< Relation >::__setslice__(std::vector< Relation >::difference_type,std::vector< Relation >::difference_type,std::vector< Relation,std::allocator< Relation > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RelationVector___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Relation > *arg1 = (std::vector< Relation > *) 0 ;
  std::vector< Relation >::difference_type arg2 ;
  std::vector< Relation >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "RelationVector___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Relation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelationVector___delslice__" "', argument " "1"" of type '" "std::vector< Relation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Relation > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RelationVector___delslice__" "', argument " "2"" of type '" "std::vector< Relation >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Relation >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RelationVector___delslice__" "', argument " "3"" of type '" "std::vector< Relation >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Relation >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_Relation_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelationVector___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Relation > *arg1 = (std::vector< Relation > *) 0 ;
  std::vector< Relation >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Relation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelationVector___delitem__" "', argument " "1"" of type '" "std::vector< Relation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Relation > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RelationVector___delitem__" "', argument " "2"" of type '" "std::vector< Relation >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Relation >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_Relation_Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelationVector___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Relation > *arg1 = (std::vector< Relation > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< Relation,std::allocator< Relation > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Relation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelationVector___getitem__" "', argument " "1"" of type '" "std::vector< Relation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Relation > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RelationVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        result = (std::vector< Relation,std::allocator< Relation > > *)std_vector_Sl_Relation_Sg____getitem____SWIG_0(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Relation_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelationVector___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Relation > *arg1 = (std::vector< Relation > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< Relation,std::allocator< Relation > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Relation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelationVector___setitem__" "', argument " "1"" of type '" "std::vector< Relation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Relation > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RelationVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector< Relation,std::allocator< Relation > > *ptr = (std::vector< Relation,std::allocator< Relation > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RelationVector___setitem__" "', argument " "3"" of type '" "std::vector< Relation,std::allocator< Relation > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RelationVector___setitem__" "', argument " "3"" of type '" "std::vector< Relation,std::allocator< Relation > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_Relation_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< Relation,std::allocator< Relation > > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelationVector___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Relation > *arg1 = (std::vector< Relation > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Relation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelationVector___setitem__" "', argument " "1"" of type '" "std::vector< Relation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Relation > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RelationVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        std_vector_Sl_Relation_Sg____setitem____SWIG_1(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelationVector___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Relation > *arg1 = (std::vector< Relation > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Relation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelationVector___delitem__" "', argument " "1"" of type '" "std::vector< Relation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Relation > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RelationVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        std_vector_Sl_Relation_Sg____delitem____SWIG_1(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelationVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RelationVector___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_1;
    return _wrap_RelationVector___delitem____SWIG_1(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_RelationVector___delitem____SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RelationVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Relation >::__delitem__(std::vector< Relation >::difference_type)\n"
    "    std::vector< Relation >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RelationVector___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Relation > *arg1 = (std::vector< Relation > *) 0 ;
  std::vector< Relation >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< Relation >::value_type *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Relation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelationVector___getitem__" "', argument " "1"" of type '" "std::vector< Relation > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Relation > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RelationVector___getitem__" "', argument " "2"" of type '" "std::vector< Relation >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Relation >::difference_type >(val2);
  {
    try {
      try {
        result = (std::vector< Relation >::value_type *) &std_vector_Sl_Relation_Sg____getitem____SWIG_1((std::vector< Relation > const *)arg1,SWIG_STD_MOVE(arg2));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Relation, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Relation >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelationVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RelationVector___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_1;
    return _wrap_RelationVector___getitem____SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_RelationVector___getitem____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RelationVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Relation >::__getitem__(PySliceObject *)\n"
    "    std::vector< Relation >::__getitem__(std::vector< Relation >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RelationVector___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Relation > *arg1 = (std::vector< Relation > *) 0 ;
  std::vector< Relation >::difference_type arg2 ;
  std::vector< Relation >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Relation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelationVector___setitem__" "', argument " "1"" of type '" "std::vector< Relation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Relation > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RelationVector___setitem__" "', argument " "2"" of type '" "std::vector< Relation >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Relation >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Relation,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RelationVector___setitem__" "', argument " "3"" of type '" "std::vector< Relation >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RelationVector___setitem__" "', argument " "3"" of type '" "std::vector< Relation >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Relation >::value_type * >(argp3);
  {
    try {
      try {
        std_vector_Sl_Relation_Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(Relation const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelationVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RelationVector___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_RelationVector___setitem____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_2;
    {
      int res = swig::asptr(argv[2], (std::vector< Relation,std::allocator< Relation > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_RelationVector___setitem____SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_RelationVector___setitem____SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RelationVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Relation >::__setitem__(PySliceObject *,std::vector< Relation,std::allocator< Relation > > const &)\n"
    "    std::vector< Relation >::__setitem__(PySliceObject *)\n"
    "    std::vector< Relation >::__setitem__(std::vector< Relation >::difference_type,std::vector< Relation >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RelationVector_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Relation > *arg1 = (std::vector< Relation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< Relation > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Relation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelationVector_pop" "', argument " "1"" of type '" "std::vector< Relation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Relation > * >(argp1);
  {
    try {
      try {
        result = std_vector_Sl_Relation_Sg__pop(arg1);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< Relation >::value_type(result)), SWIGTYPE_p_Relation, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelationVector_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Relation > *arg1 = (std::vector< Relation > *) 0 ;
  std::vector< Relation >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "RelationVector_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Relation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelationVector_append" "', argument " "1"" of type '" "std::vector< Relation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Relation > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Relation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RelationVector_append" "', argument " "2"" of type '" "std::vector< Relation >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RelationVector_append" "', argument " "2"" of type '" "std::vector< Relation >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Relation >::value_type * >(argp2);
  {
    try {
      std_vector_Sl_Relation_Sg__append(arg1,(Relation const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RelationVector__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< Relation > *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (std::vector< Relation > *)new std::vector< Relation >();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Relation_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RelationVector__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Relation > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< Relation > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< Relation,std::allocator< Relation > > *ptr = (std::vector< Relation,std::allocator< Relation > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RelationVector" "', argument " "1"" of type '" "std::vector< Relation > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RelationVector" "', argument " "1"" of type '" "std::vector< Relation > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< Relation > *)new std::vector< Relation >((std::vector< Relation > const &)*arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Relation_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelationVector_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Relation > *arg1 = (std::vector< Relation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Relation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelationVector_empty" "', argument " "1"" of type '" "std::vector< Relation > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Relation > * >(argp1);
  {
    try {
      result = (bool)((std::vector< Relation > const *)arg1)->empty();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelationVector_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Relation > *arg1 = (std::vector< Relation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Relation >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Relation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelationVector_size" "', argument " "1"" of type '" "std::vector< Relation > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Relation > * >(argp1);
  {
    try {
      result = ((std::vector< Relation > const *)arg1)->size();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelationVector_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Relation > *arg1 = (std::vector< Relation > *) 0 ;
  std::vector< Relation > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "RelationVector_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Relation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelationVector_swap" "', argument " "1"" of type '" "std::vector< Relation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Relation > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_Relation_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RelationVector_swap" "', argument " "2"" of type '" "std::vector< Relation > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RelationVector_swap" "', argument " "2"" of type '" "std::vector< Relation > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Relation > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelationVector_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Relation > *arg1 = (std::vector< Relation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Relation >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Relation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelationVector_begin" "', argument " "1"" of type '" "std::vector< Relation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Relation > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Relation >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelationVector_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Relation > *arg1 = (std::vector< Relation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Relation >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Relation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelationVector_end" "', argument " "1"" of type '" "std::vector< Relation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Relation > * >(argp1);
  {
    try {
      result = (arg1)->end();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Relation >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelationVector_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Relation > *arg1 = (std::vector< Relation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Relation >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Relation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelationVector_rbegin" "', argument " "1"" of type '" "std::vector< Relation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Relation > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Relation >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelationVector_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Relation > *arg1 = (std::vector< Relation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Relation >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Relation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelationVector_rend" "', argument " "1"" of type '" "std::vector< Relation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Relation > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Relation >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelationVector_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Relation > *arg1 = (std::vector< Relation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Relation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelationVector_clear" "', argument " "1"" of type '" "std::vector< Relation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Relation > * >(argp1);
  {
    try {
      (arg1)->clear();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelationVector_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Relation > *arg1 = (std::vector< Relation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< Relation > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Relation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelationVector_get_allocator" "', argument " "1"" of type '" "std::vector< Relation > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Relation > * >(argp1);
  {
    try {
      result = ((std::vector< Relation > const *)arg1)->get_allocator();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< Relation >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_Relation_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RelationVector__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Relation >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< Relation > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RelationVector" "', argument " "1"" of type '" "std::vector< Relation >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Relation >::size_type >(val1);
  {
    try {
      result = (std::vector< Relation > *)new std::vector< Relation >(arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Relation_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelationVector_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Relation > *arg1 = (std::vector< Relation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Relation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelationVector_pop_back" "', argument " "1"" of type '" "std::vector< Relation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Relation > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelationVector_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Relation > *arg1 = (std::vector< Relation > *) 0 ;
  std::vector< Relation >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Relation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelationVector_resize" "', argument " "1"" of type '" "std::vector< Relation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Relation > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RelationVector_resize" "', argument " "2"" of type '" "std::vector< Relation >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Relation >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelationVector_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Relation > *arg1 = (std::vector< Relation > *) 0 ;
  std::vector< Relation >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< Relation >::iterator result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Relation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelationVector_erase" "', argument " "1"" of type '" "std::vector< Relation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Relation > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RelationVector_erase" "', argument " "2"" of type '" "std::vector< Relation >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Relation >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Relation >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RelationVector_erase" "', argument " "2"" of type '" "std::vector< Relation >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_Relation_Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Relation >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelationVector_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Relation > *arg1 = (std::vector< Relation > *) 0 ;
  std::vector< Relation >::iterator arg2 ;
  std::vector< Relation >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< Relation >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Relation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelationVector_erase" "', argument " "1"" of type '" "std::vector< Relation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Relation > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RelationVector_erase" "', argument " "2"" of type '" "std::vector< Relation >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Relation >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Relation >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RelationVector_erase" "', argument " "2"" of type '" "std::vector< Relation >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RelationVector_erase" "', argument " "3"" of type '" "std::vector< Relation >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Relation >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Relation >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RelationVector_erase" "', argument " "3"" of type '" "std::vector< Relation >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_Relation_Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Relation >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelationVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RelationVector_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_RelationVector_erase__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_RelationVector_erase__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RelationVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Relation >::erase(std::vector< Relation >::iterator)\n"
    "    std::vector< Relation >::erase(std::vector< Relation >::iterator,std::vector< Relation >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_RelationVector__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Relation >::size_type arg1 ;
  std::vector< Relation >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< Relation > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RelationVector" "', argument " "1"" of type '" "std::vector< Relation >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Relation >::size_type >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Relation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_RelationVector" "', argument " "2"" of type '" "std::vector< Relation >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RelationVector" "', argument " "2"" of type '" "std::vector< Relation >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Relation >::value_type * >(argp2);
  {
    try {
      result = (std::vector< Relation > *)new std::vector< Relation >(arg1,(std::vector< Relation >::value_type const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Relation_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RelationVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_RelationVector", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    PyObject *retobj = _wrap_new_RelationVector__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 1) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[0], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_new_RelationVector__SWIG_2(self, argc, argv);
  }
check_2:
  
  if (argc == 1) {
    PyObject *retobj = _wrap_new_RelationVector__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_new_RelationVector__SWIG_3(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_RelationVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Relation >::vector()\n"
    "    std::vector< Relation >::vector(std::vector< Relation > const &)\n"
    "    std::vector< Relation >::vector(std::vector< Relation >::size_type)\n"
    "    std::vector< Relation >::vector(std::vector< Relation >::size_type,std::vector< Relation >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RelationVector_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Relation > *arg1 = (std::vector< Relation > *) 0 ;
  std::vector< Relation >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "RelationVector_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Relation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelationVector_push_back" "', argument " "1"" of type '" "std::vector< Relation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Relation > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Relation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RelationVector_push_back" "', argument " "2"" of type '" "std::vector< Relation >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RelationVector_push_back" "', argument " "2"" of type '" "std::vector< Relation >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Relation >::value_type * >(argp2);
  {
    try {
      (arg1)->push_back((std::vector< Relation >::value_type const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelationVector_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Relation > *arg1 = (std::vector< Relation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Relation >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Relation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelationVector_front" "', argument " "1"" of type '" "std::vector< Relation > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Relation > * >(argp1);
  {
    try {
      result = (std::vector< Relation >::value_type *) &((std::vector< Relation > const *)arg1)->front();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Relation, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Relation >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelationVector_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Relation > *arg1 = (std::vector< Relation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Relation >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Relation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelationVector_back" "', argument " "1"" of type '" "std::vector< Relation > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Relation > * >(argp1);
  {
    try {
      result = (std::vector< Relation >::value_type *) &((std::vector< Relation > const *)arg1)->back();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Relation, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Relation >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelationVector_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Relation > *arg1 = (std::vector< Relation > *) 0 ;
  std::vector< Relation >::size_type arg2 ;
  std::vector< Relation >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "RelationVector_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Relation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelationVector_assign" "', argument " "1"" of type '" "std::vector< Relation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Relation > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RelationVector_assign" "', argument " "2"" of type '" "std::vector< Relation >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Relation >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Relation,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RelationVector_assign" "', argument " "3"" of type '" "std::vector< Relation >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RelationVector_assign" "', argument " "3"" of type '" "std::vector< Relation >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Relation >::value_type * >(argp3);
  {
    try {
      (arg1)->assign(arg2,(std::vector< Relation >::value_type const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelationVector_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Relation > *arg1 = (std::vector< Relation > *) 0 ;
  std::vector< Relation >::size_type arg2 ;
  std::vector< Relation >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Relation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelationVector_resize" "', argument " "1"" of type '" "std::vector< Relation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Relation > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RelationVector_resize" "', argument " "2"" of type '" "std::vector< Relation >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Relation >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Relation,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RelationVector_resize" "', argument " "3"" of type '" "std::vector< Relation >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RelationVector_resize" "', argument " "3"" of type '" "std::vector< Relation >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Relation >::value_type * >(argp3);
  {
    try {
      (arg1)->resize(arg2,(std::vector< Relation >::value_type const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelationVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RelationVector_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_RelationVector_resize__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_RelationVector_resize__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RelationVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Relation >::resize(std::vector< Relation >::size_type)\n"
    "    std::vector< Relation >::resize(std::vector< Relation >::size_type,std::vector< Relation >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RelationVector_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Relation > *arg1 = (std::vector< Relation > *) 0 ;
  std::vector< Relation >::iterator arg2 ;
  std::vector< Relation >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::vector< Relation >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Relation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelationVector_insert" "', argument " "1"" of type '" "std::vector< Relation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Relation > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RelationVector_insert" "', argument " "2"" of type '" "std::vector< Relation >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Relation >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Relation >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RelationVector_insert" "', argument " "2"" of type '" "std::vector< Relation >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Relation,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RelationVector_insert" "', argument " "3"" of type '" "std::vector< Relation >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RelationVector_insert" "', argument " "3"" of type '" "std::vector< Relation >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Relation >::value_type * >(argp3);
  {
    try {
      result = std_vector_Sl_Relation_Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(Relation const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Relation >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelationVector_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Relation > *arg1 = (std::vector< Relation > *) 0 ;
  std::vector< Relation >::iterator arg2 ;
  std::vector< Relation >::size_type arg3 ;
  std::vector< Relation >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Relation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelationVector_insert" "', argument " "1"" of type '" "std::vector< Relation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Relation > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RelationVector_insert" "', argument " "2"" of type '" "std::vector< Relation >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Relation >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Relation >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RelationVector_insert" "', argument " "2"" of type '" "std::vector< Relation >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RelationVector_insert" "', argument " "3"" of type '" "std::vector< Relation >::size_type""'");
  } 
  arg3 = static_cast< std::vector< Relation >::size_type >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_Relation,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RelationVector_insert" "', argument " "4"" of type '" "std::vector< Relation >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RelationVector_insert" "', argument " "4"" of type '" "std::vector< Relation >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< Relation >::value_type * >(argp4);
  {
    try {
      std_vector_Sl_Relation_Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(Relation const &)*arg4);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelationVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RelationVector_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    PyObject *retobj = _wrap_RelationVector_insert__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_RelationVector_insert__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RelationVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Relation >::insert(std::vector< Relation >::iterator,std::vector< Relation >::value_type const &)\n"
    "    std::vector< Relation >::insert(std::vector< Relation >::iterator,std::vector< Relation >::size_type,std::vector< Relation >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RelationVector_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Relation > *arg1 = (std::vector< Relation > *) 0 ;
  std::vector< Relation >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "RelationVector_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Relation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelationVector_reserve" "', argument " "1"" of type '" "std::vector< Relation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Relation > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RelationVector_reserve" "', argument " "2"" of type '" "std::vector< Relation >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Relation >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelationVector_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Relation > *arg1 = (std::vector< Relation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Relation >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Relation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelationVector_capacity" "', argument " "1"" of type '" "std::vector< Relation > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Relation > * >(argp1);
  {
    try {
      result = ((std::vector< Relation > const *)arg1)->capacity();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RelationVector(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Relation > *arg1 = (std::vector< Relation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Relation_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RelationVector" "', argument " "1"" of type '" "std::vector< Relation > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Relation > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RelationVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_Relation_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *RelationVector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_SolverVector_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Solver > *arg1 = (std::vector< Solver > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Solver_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverVector_iterator" "', argument " "1"" of type '" "std::vector< Solver > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Solver > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_vector_Sl_Solver_Sg__iterator(arg1,arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverVector___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Solver > *arg1 = (std::vector< Solver > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Solver_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverVector___nonzero__" "', argument " "1"" of type '" "std::vector< Solver > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Solver > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_Solver_Sg____nonzero__((std::vector< Solver > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverVector___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Solver > *arg1 = (std::vector< Solver > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Solver_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverVector___bool__" "', argument " "1"" of type '" "std::vector< Solver > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Solver > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_Solver_Sg____bool__((std::vector< Solver > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverVector___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Solver > *arg1 = (std::vector< Solver > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Solver >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Solver_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverVector___len__" "', argument " "1"" of type '" "std::vector< Solver > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Solver > * >(argp1);
  {
    try {
      result = std_vector_Sl_Solver_Sg____len__((std::vector< Solver > const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverVector___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Solver > *arg1 = (std::vector< Solver > *) 0 ;
  std::vector< Solver >::difference_type arg2 ;
  std::vector< Solver >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< Solver,std::allocator< Solver > > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SolverVector___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Solver_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverVector___getslice__" "', argument " "1"" of type '" "std::vector< Solver > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Solver > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SolverVector___getslice__" "', argument " "2"" of type '" "std::vector< Solver >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Solver >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SolverVector___getslice__" "', argument " "3"" of type '" "std::vector< Solver >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Solver >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< Solver,std::allocator< Solver > > *)std_vector_Sl_Solver_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Solver_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverVector___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Solver > *arg1 = (std::vector< Solver > *) 0 ;
  std::vector< Solver >::difference_type arg2 ;
  std::vector< Solver >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Solver_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverVector___setslice__" "', argument " "1"" of type '" "std::vector< Solver > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Solver > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SolverVector___setslice__" "', argument " "2"" of type '" "std::vector< Solver >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Solver >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SolverVector___setslice__" "', argument " "3"" of type '" "std::vector< Solver >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Solver >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_Solver_Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverVector___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Solver > *arg1 = (std::vector< Solver > *) 0 ;
  std::vector< Solver >::difference_type arg2 ;
  std::vector< Solver >::difference_type arg3 ;
  std::vector< Solver,std::allocator< Solver > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Solver_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverVector___setslice__" "', argument " "1"" of type '" "std::vector< Solver > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Solver > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SolverVector___setslice__" "', argument " "2"" of type '" "std::vector< Solver >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Solver >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SolverVector___setslice__" "', argument " "3"" of type '" "std::vector< Solver >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Solver >::difference_type >(val3);
  {
    std::vector< Solver,std::allocator< Solver > > *ptr = (std::vector< Solver,std::allocator< Solver > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SolverVector___setslice__" "', argument " "4"" of type '" "std::vector< Solver,std::allocator< Solver > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SolverVector___setslice__" "', argument " "4"" of type '" "std::vector< Solver,std::allocator< Solver > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_Solver_Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< Solver,std::allocator< Solver > > const &)*arg4);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SolverVector___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    PyObject *retobj = _wrap_SolverVector___setslice____SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_SolverVector___setslice____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SolverVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Solver >::__setslice__(std::vector< Solver >::difference_type,std::vector< Solver >::difference_type)\n"
    "    std::vector< Solver >::__setslice__(std::vector< Solver >::difference_type,std::vector< Solver >::difference_type,std::vector< Solver,std::allocator< Solver > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SolverVector___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Solver > *arg1 = (std::vector< Solver > *) 0 ;
  std::vector< Solver >::difference_type arg2 ;
  std::vector< Solver >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SolverVector___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Solver_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverVector___delslice__" "', argument " "1"" of type '" "std::vector< Solver > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Solver > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SolverVector___delslice__" "', argument " "2"" of type '" "std::vector< Solver >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Solver >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SolverVector___delslice__" "', argument " "3"" of type '" "std::vector< Solver >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Solver >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_Solver_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverVector___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Solver > *arg1 = (std::vector< Solver > *) 0 ;
  std::vector< Solver >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Solver_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverVector___delitem__" "', argument " "1"" of type '" "std::vector< Solver > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Solver > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SolverVector___delitem__" "', argument " "2"" of type '" "std::vector< Solver >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Solver >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_Solver_Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverVector___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Solver > *arg1 = (std::vector< Solver > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< Solver,std::allocator< Solver > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Solver_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverVector___getitem__" "', argument " "1"" of type '" "std::vector< Solver > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Solver > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SolverVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        result = (std::vector< Solver,std::allocator< Solver > > *)std_vector_Sl_Solver_Sg____getitem____SWIG_0(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Solver_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverVector___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Solver > *arg1 = (std::vector< Solver > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< Solver,std::allocator< Solver > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Solver_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverVector___setitem__" "', argument " "1"" of type '" "std::vector< Solver > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Solver > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SolverVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector< Solver,std::allocator< Solver > > *ptr = (std::vector< Solver,std::allocator< Solver > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SolverVector___setitem__" "', argument " "3"" of type '" "std::vector< Solver,std::allocator< Solver > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SolverVector___setitem__" "', argument " "3"" of type '" "std::vector< Solver,std::allocator< Solver > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_Solver_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< Solver,std::allocator< Solver > > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverVector___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Solver > *arg1 = (std::vector< Solver > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Solver_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverVector___setitem__" "', argument " "1"" of type '" "std::vector< Solver > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Solver > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SolverVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        std_vector_Sl_Solver_Sg____setitem____SWIG_1(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverVector___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Solver > *arg1 = (std::vector< Solver > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Solver_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverVector___delitem__" "', argument " "1"" of type '" "std::vector< Solver > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Solver > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SolverVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    try {
      try {
        std_vector_Sl_Solver_Sg____delitem____SWIG_1(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      } catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SolverVector___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_1;
    return _wrap_SolverVector___delitem____SWIG_1(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_SolverVector___delitem____SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SolverVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Solver >::__delitem__(std::vector< Solver >::difference_type)\n"
    "    std::vector< Solver >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SolverVector___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Solver > *arg1 = (std::vector< Solver > *) 0 ;
  std::vector< Solver >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< Solver >::value_type *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Solver_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverVector___getitem__" "', argument " "1"" of type '" "std::vector< Solver > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Solver > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SolverVector___getitem__" "', argument " "2"" of type '" "std::vector< Solver >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Solver >::difference_type >(val2);
  {
    try {
      try {
        result = (std::vector< Solver >::value_type *) &std_vector_Sl_Solver_Sg____getitem____SWIG_1((std::vector< Solver > const *)arg1,SWIG_STD_MOVE(arg2));
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Solver, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Solver >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SolverVector___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_1;
    return _wrap_SolverVector___getitem____SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_SolverVector___getitem____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SolverVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Solver >::__getitem__(PySliceObject *)\n"
    "    std::vector< Solver >::__getitem__(std::vector< Solver >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SolverVector___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Solver > *arg1 = (std::vector< Solver > *) 0 ;
  std::vector< Solver >::difference_type arg2 ;
  std::vector< Solver >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Solver_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverVector___setitem__" "', argument " "1"" of type '" "std::vector< Solver > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Solver > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SolverVector___setitem__" "', argument " "2"" of type '" "std::vector< Solver >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Solver >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Solver,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SolverVector___setitem__" "', argument " "3"" of type '" "std::vector< Solver >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SolverVector___setitem__" "', argument " "3"" of type '" "std::vector< Solver >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Solver >::value_type * >(argp3);
  {
    try {
      try {
        std_vector_Sl_Solver_Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(Solver const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SolverVector___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_SolverVector___setitem____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_2;
    {
      int res = swig::asptr(argv[2], (std::vector< Solver,std::allocator< Solver > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_SolverVector___setitem____SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_SolverVector___setitem____SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SolverVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Solver >::__setitem__(PySliceObject *,std::vector< Solver,std::allocator< Solver > > const &)\n"
    "    std::vector< Solver >::__setitem__(PySliceObject *)\n"
    "    std::vector< Solver >::__setitem__(std::vector< Solver >::difference_type,std::vector< Solver >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SolverVector_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Solver > *arg1 = (std::vector< Solver > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Solver >::value_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Solver_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverVector_pop" "', argument " "1"" of type '" "std::vector< Solver > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Solver > * >(argp1);
  {
    try {
      try {
        result = std_vector_Sl_Solver_Sg__pop(arg1);
      } catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< Solver >::value_type(result)), SWIGTYPE_p_Solver, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverVector_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Solver > *arg1 = (std::vector< Solver > *) 0 ;
  std::vector< Solver >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SolverVector_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Solver_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverVector_append" "', argument " "1"" of type '" "std::vector< Solver > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Solver > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Solver,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SolverVector_append" "', argument " "2"" of type '" "std::vector< Solver >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SolverVector_append" "', argument " "2"" of type '" "std::vector< Solver >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Solver >::value_type * >(argp2);
  {
    try {
      std_vector_Sl_Solver_Sg__append(arg1,(Solver const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SolverVector__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< Solver > *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (std::vector< Solver > *)new std::vector< Solver >();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Solver_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SolverVector__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Solver > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< Solver > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< Solver,std::allocator< Solver > > *ptr = (std::vector< Solver,std::allocator< Solver > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SolverVector" "', argument " "1"" of type '" "std::vector< Solver > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SolverVector" "', argument " "1"" of type '" "std::vector< Solver > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< Solver > *)new std::vector< Solver >((std::vector< Solver > const &)*arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Solver_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverVector_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Solver > *arg1 = (std::vector< Solver > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Solver_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverVector_empty" "', argument " "1"" of type '" "std::vector< Solver > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Solver > * >(argp1);
  {
    try {
      result = (bool)((std::vector< Solver > const *)arg1)->empty();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverVector_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Solver > *arg1 = (std::vector< Solver > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Solver >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Solver_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverVector_size" "', argument " "1"" of type '" "std::vector< Solver > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Solver > * >(argp1);
  {
    try {
      result = ((std::vector< Solver > const *)arg1)->size();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverVector_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Solver > *arg1 = (std::vector< Solver > *) 0 ;
  std::vector< Solver > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SolverVector_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Solver_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverVector_swap" "', argument " "1"" of type '" "std::vector< Solver > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Solver > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_Solver_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SolverVector_swap" "', argument " "2"" of type '" "std::vector< Solver > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SolverVector_swap" "', argument " "2"" of type '" "std::vector< Solver > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Solver > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverVector_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Solver > *arg1 = (std::vector< Solver > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Solver >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Solver_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverVector_begin" "', argument " "1"" of type '" "std::vector< Solver > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Solver > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Solver >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverVector_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Solver > *arg1 = (std::vector< Solver > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Solver >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Solver_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverVector_end" "', argument " "1"" of type '" "std::vector< Solver > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Solver > * >(argp1);
  {
    try {
      result = (arg1)->end();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Solver >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverVector_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Solver > *arg1 = (std::vector< Solver > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Solver >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Solver_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverVector_rbegin" "', argument " "1"" of type '" "std::vector< Solver > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Solver > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Solver >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverVector_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Solver > *arg1 = (std::vector< Solver > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Solver >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Solver_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverVector_rend" "', argument " "1"" of type '" "std::vector< Solver > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Solver > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Solver >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverVector_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Solver > *arg1 = (std::vector< Solver > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Solver_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverVector_clear" "', argument " "1"" of type '" "std::vector< Solver > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Solver > * >(argp1);
  {
    try {
      (arg1)->clear();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverVector_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Solver > *arg1 = (std::vector< Solver > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< Solver > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Solver_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverVector_get_allocator" "', argument " "1"" of type '" "std::vector< Solver > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Solver > * >(argp1);
  {
    try {
      result = ((std::vector< Solver > const *)arg1)->get_allocator();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< Solver >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_Solver_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SolverVector__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Solver >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< Solver > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SolverVector" "', argument " "1"" of type '" "std::vector< Solver >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Solver >::size_type >(val1);
  {
    try {
      result = (std::vector< Solver > *)new std::vector< Solver >(arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Solver_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverVector_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Solver > *arg1 = (std::vector< Solver > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Solver_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverVector_pop_back" "', argument " "1"" of type '" "std::vector< Solver > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Solver > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverVector_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Solver > *arg1 = (std::vector< Solver > *) 0 ;
  std::vector< Solver >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Solver_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverVector_resize" "', argument " "1"" of type '" "std::vector< Solver > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Solver > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SolverVector_resize" "', argument " "2"" of type '" "std::vector< Solver >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Solver >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverVector_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Solver > *arg1 = (std::vector< Solver > *) 0 ;
  std::vector< Solver >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< Solver >::iterator result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Solver_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverVector_erase" "', argument " "1"" of type '" "std::vector< Solver > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Solver > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SolverVector_erase" "', argument " "2"" of type '" "std::vector< Solver >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Solver >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Solver >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SolverVector_erase" "', argument " "2"" of type '" "std::vector< Solver >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_Solver_Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Solver >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverVector_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Solver > *arg1 = (std::vector< Solver > *) 0 ;
  std::vector< Solver >::iterator arg2 ;
  std::vector< Solver >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< Solver >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Solver_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverVector_erase" "', argument " "1"" of type '" "std::vector< Solver > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Solver > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SolverVector_erase" "', argument " "2"" of type '" "std::vector< Solver >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Solver >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Solver >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SolverVector_erase" "', argument " "2"" of type '" "std::vector< Solver >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SolverVector_erase" "', argument " "3"" of type '" "std::vector< Solver >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Solver >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Solver >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SolverVector_erase" "', argument " "3"" of type '" "std::vector< Solver >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_Solver_Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Solver >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SolverVector_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_SolverVector_erase__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_SolverVector_erase__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SolverVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Solver >::erase(std::vector< Solver >::iterator)\n"
    "    std::vector< Solver >::erase(std::vector< Solver >::iterator,std::vector< Solver >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_SolverVector__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Solver >::size_type arg1 ;
  std::vector< Solver >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< Solver > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SolverVector" "', argument " "1"" of type '" "std::vector< Solver >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Solver >::size_type >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Solver,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SolverVector" "', argument " "2"" of type '" "std::vector< Solver >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SolverVector" "', argument " "2"" of type '" "std::vector< Solver >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Solver >::value_type * >(argp2);
  {
    try {
      result = (std::vector< Solver > *)new std::vector< Solver >(arg1,(std::vector< Solver >::value_type const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Solver_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SolverVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_SolverVector", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    PyObject *retobj = _wrap_new_SolverVector__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 1) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[0], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_new_SolverVector__SWIG_2(self, argc, argv);
  }
check_2:
  
  if (argc == 1) {
    PyObject *retobj = _wrap_new_SolverVector__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_new_SolverVector__SWIG_3(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_SolverVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Solver >::vector()\n"
    "    std::vector< Solver >::vector(std::vector< Solver > const &)\n"
    "    std::vector< Solver >::vector(std::vector< Solver >::size_type)\n"
    "    std::vector< Solver >::vector(std::vector< Solver >::size_type,std::vector< Solver >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SolverVector_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Solver > *arg1 = (std::vector< Solver > *) 0 ;
  std::vector< Solver >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SolverVector_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Solver_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverVector_push_back" "', argument " "1"" of type '" "std::vector< Solver > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Solver > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Solver,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SolverVector_push_back" "', argument " "2"" of type '" "std::vector< Solver >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SolverVector_push_back" "', argument " "2"" of type '" "std::vector< Solver >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Solver >::value_type * >(argp2);
  {
    try {
      (arg1)->push_back((std::vector< Solver >::value_type const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverVector_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Solver > *arg1 = (std::vector< Solver > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Solver >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Solver_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverVector_front" "', argument " "1"" of type '" "std::vector< Solver > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Solver > * >(argp1);
  {
    try {
      result = (std::vector< Solver >::value_type *) &((std::vector< Solver > const *)arg1)->front();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Solver, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Solver >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverVector_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Solver > *arg1 = (std::vector< Solver > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Solver >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Solver_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverVector_back" "', argument " "1"" of type '" "std::vector< Solver > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Solver > * >(argp1);
  {
    try {
      result = (std::vector< Solver >::value_type *) &((std::vector< Solver > const *)arg1)->back();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Solver, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< Solver >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverVector_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Solver > *arg1 = (std::vector< Solver > *) 0 ;
  std::vector< Solver >::size_type arg2 ;
  std::vector< Solver >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SolverVector_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Solver_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverVector_assign" "', argument " "1"" of type '" "std::vector< Solver > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Solver > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SolverVector_assign" "', argument " "2"" of type '" "std::vector< Solver >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Solver >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Solver,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SolverVector_assign" "', argument " "3"" of type '" "std::vector< Solver >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SolverVector_assign" "', argument " "3"" of type '" "std::vector< Solver >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Solver >::value_type * >(argp3);
  {
    try {
      (arg1)->assign(arg2,(std::vector< Solver >::value_type const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverVector_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Solver > *arg1 = (std::vector< Solver > *) 0 ;
  std::vector< Solver >::size_type arg2 ;
  std::vector< Solver >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Solver_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverVector_resize" "', argument " "1"" of type '" "std::vector< Solver > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Solver > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SolverVector_resize" "', argument " "2"" of type '" "std::vector< Solver >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Solver >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Solver,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SolverVector_resize" "', argument " "3"" of type '" "std::vector< Solver >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SolverVector_resize" "', argument " "3"" of type '" "std::vector< Solver >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Solver >::value_type * >(argp3);
  {
    try {
      (arg1)->resize(arg2,(std::vector< Solver >::value_type const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SolverVector_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_SolverVector_resize__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_SolverVector_resize__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SolverVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Solver >::resize(std::vector< Solver >::size_type)\n"
    "    std::vector< Solver >::resize(std::vector< Solver >::size_type,std::vector< Solver >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SolverVector_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Solver > *arg1 = (std::vector< Solver > *) 0 ;
  std::vector< Solver >::iterator arg2 ;
  std::vector< Solver >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::vector< Solver >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Solver_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverVector_insert" "', argument " "1"" of type '" "std::vector< Solver > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Solver > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SolverVector_insert" "', argument " "2"" of type '" "std::vector< Solver >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Solver >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Solver >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SolverVector_insert" "', argument " "2"" of type '" "std::vector< Solver >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Solver,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SolverVector_insert" "', argument " "3"" of type '" "std::vector< Solver >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SolverVector_insert" "', argument " "3"" of type '" "std::vector< Solver >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Solver >::value_type * >(argp3);
  {
    try {
      result = std_vector_Sl_Solver_Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(Solver const &)*arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Solver >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverVector_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< Solver > *arg1 = (std::vector< Solver > *) 0 ;
  std::vector< Solver >::iterator arg2 ;
  std::vector< Solver >::size_type arg3 ;
  std::vector< Solver >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Solver_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverVector_insert" "', argument " "1"" of type '" "std::vector< Solver > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Solver > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SolverVector_insert" "', argument " "2"" of type '" "std::vector< Solver >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Solver >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Solver >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SolverVector_insert" "', argument " "2"" of type '" "std::vector< Solver >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SolverVector_insert" "', argument " "3"" of type '" "std::vector< Solver >::size_type""'");
  } 
  arg3 = static_cast< std::vector< Solver >::size_type >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_Solver,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SolverVector_insert" "', argument " "4"" of type '" "std::vector< Solver >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SolverVector_insert" "', argument " "4"" of type '" "std::vector< Solver >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< Solver >::value_type * >(argp4);
  {
    try {
      std_vector_Sl_Solver_Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(Solver const &)*arg4);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SolverVector_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    PyObject *retobj = _wrap_SolverVector_insert__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_SolverVector_insert__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SolverVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Solver >::insert(std::vector< Solver >::iterator,std::vector< Solver >::value_type const &)\n"
    "    std::vector< Solver >::insert(std::vector< Solver >::iterator,std::vector< Solver >::size_type,std::vector< Solver >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SolverVector_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Solver > *arg1 = (std::vector< Solver > *) 0 ;
  std::vector< Solver >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SolverVector_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Solver_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverVector_reserve" "', argument " "1"" of type '" "std::vector< Solver > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Solver > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SolverVector_reserve" "', argument " "2"" of type '" "std::vector< Solver >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Solver >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverVector_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Solver > *arg1 = (std::vector< Solver > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Solver >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Solver_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverVector_capacity" "', argument " "1"" of type '" "std::vector< Solver > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Solver > * >(argp1);
  {
    try {
      result = ((std::vector< Solver > const *)arg1)->capacity();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SolverVector(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Solver > *arg1 = (std::vector< Solver > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_Solver_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SolverVector" "', argument " "1"" of type '" "std::vector< Solver > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Solver > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SolverVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_Solver_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SolverVector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_SolverStatus__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  SolverStatus *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (SolverStatus *)new SolverStatus();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SolverStatus, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SolverStatus__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  SolverStatus *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SolverStatus *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_SolverStatus,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SolverStatus" "', argument " "1"" of type '" "SolverStatus const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SolverStatus" "', argument " "1"" of type '" "SolverStatus const &""'"); 
  }
  arg1 = reinterpret_cast< SolverStatus * >(argp1);
  {
    try {
      result = (SolverStatus *)new SolverStatus((SolverStatus const &)*arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SolverStatus, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SolverStatus(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_SolverStatus", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    PyObject *retobj = _wrap_new_SolverStatus__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 1) {
    PyObject *retobj = _wrap_new_SolverStatus__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_SolverStatus'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    SolverStatus::SolverStatus()\n"
    "    SolverStatus::SolverStatus(SolverStatus const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SolverStatus_getSimulationStatus(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverStatus *arg1 = (SolverStatus *) 0 ;
  Simulation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SolverStatus_getSimulationStatus", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverStatus_getSimulationStatus" "', argument " "1"" of type '" "SolverStatus *""'"); 
  }
  arg1 = reinterpret_cast< SolverStatus * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Simulation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SolverStatus_getSimulationStatus" "', argument " "2"" of type '" "Simulation &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SolverStatus_getSimulationStatus" "', argument " "2"" of type '" "Simulation &""'"); 
  }
  arg2 = reinterpret_cast< Simulation * >(argp2);
  {
    try {
      (arg1)->getSimulationStatus(*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverStatus_isOK(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverStatus *arg1 = (SolverStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverStatus_isOK" "', argument " "1"" of type '" "SolverStatus const *""'"); 
  }
  arg1 = reinterpret_cast< SolverStatus * >(argp1);
  {
    try {
      result = (bool)((SolverStatus const *)arg1)->isOK();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverStatus_isOverDefined(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverStatus *arg1 = (SolverStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverStatus_isOverDefined" "', argument " "1"" of type '" "SolverStatus const *""'"); 
  }
  arg1 = reinterpret_cast< SolverStatus * >(argp1);
  {
    try {
      result = (bool)((SolverStatus const *)arg1)->isOverDefined();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverStatus_isUnderDefined(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverStatus *arg1 = (SolverStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverStatus_isUnderDefined" "', argument " "1"" of type '" "SolverStatus const *""'"); 
  }
  arg1 = reinterpret_cast< SolverStatus * >(argp1);
  {
    try {
      result = (bool)((SolverStatus const *)arg1)->isUnderDefined();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverStatus_isStructurallySingular(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverStatus *arg1 = (SolverStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverStatus_isStructurallySingular" "', argument " "1"" of type '" "SolverStatus const *""'"); 
  }
  arg1 = reinterpret_cast< SolverStatus * >(argp1);
  {
    try {
      result = (bool)((SolverStatus const *)arg1)->isStructurallySingular();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverStatus_isInconsistent(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverStatus *arg1 = (SolverStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverStatus_isInconsistent" "', argument " "1"" of type '" "SolverStatus const *""'"); 
  }
  arg1 = reinterpret_cast< SolverStatus * >(argp1);
  {
    try {
      result = (bool)((SolverStatus const *)arg1)->isInconsistent();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverStatus_isReadyToSolve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverStatus *arg1 = (SolverStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverStatus_isReadyToSolve" "', argument " "1"" of type '" "SolverStatus const *""'"); 
  }
  arg1 = reinterpret_cast< SolverStatus * >(argp1);
  {
    try {
      result = (bool)((SolverStatus const *)arg1)->isReadyToSolve();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverStatus_isConverged(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverStatus *arg1 = (SolverStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverStatus_isConverged" "', argument " "1"" of type '" "SolverStatus const *""'"); 
  }
  arg1 = reinterpret_cast< SolverStatus * >(argp1);
  {
    try {
      result = (bool)((SolverStatus const *)arg1)->isConverged();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverStatus_isDiverged(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverStatus *arg1 = (SolverStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverStatus_isDiverged" "', argument " "1"" of type '" "SolverStatus const *""'"); 
  }
  arg1 = reinterpret_cast< SolverStatus * >(argp1);
  {
    try {
      result = (bool)((SolverStatus const *)arg1)->isDiverged();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverStatus_hasResidualCalculationErrors(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverStatus *arg1 = (SolverStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverStatus_hasResidualCalculationErrors" "', argument " "1"" of type '" "SolverStatus const *""'"); 
  }
  arg1 = reinterpret_cast< SolverStatus * >(argp1);
  {
    try {
      result = (bool)((SolverStatus const *)arg1)->hasResidualCalculationErrors();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverStatus_hasExceededIterationLimit(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverStatus *arg1 = (SolverStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverStatus_hasExceededIterationLimit" "', argument " "1"" of type '" "SolverStatus const *""'"); 
  }
  arg1 = reinterpret_cast< SolverStatus * >(argp1);
  {
    try {
      result = (bool)((SolverStatus const *)arg1)->hasExceededIterationLimit();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverStatus_hasExceededTimeLimit(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverStatus *arg1 = (SolverStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverStatus_hasExceededTimeLimit" "', argument " "1"" of type '" "SolverStatus const *""'"); 
  }
  arg1 = reinterpret_cast< SolverStatus * >(argp1);
  {
    try {
      result = (bool)((SolverStatus const *)arg1)->hasExceededTimeLimit();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverStatus_isInterrupted(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverStatus *arg1 = (SolverStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverStatus_isInterrupted" "', argument " "1"" of type '" "SolverStatus const *""'"); 
  }
  arg1 = reinterpret_cast< SolverStatus * >(argp1);
  {
    try {
      result = (bool)((SolverStatus const *)arg1)->isInterrupted();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverStatus_getIterationNum(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverStatus *arg1 = (SolverStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverStatus_getIterationNum" "', argument " "1"" of type '" "SolverStatus const *""'"); 
  }
  arg1 = reinterpret_cast< SolverStatus * >(argp1);
  {
    try {
      result = (int)((SolverStatus const *)arg1)->getIterationNum();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverStatus_getNumBlocks(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverStatus *arg1 = (SolverStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverStatus_getNumBlocks" "', argument " "1"" of type '" "SolverStatus const *""'"); 
  }
  arg1 = reinterpret_cast< SolverStatus * >(argp1);
  {
    try {
      result = (int)((SolverStatus const *)arg1)->getNumBlocks();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverStatus_getCurrentBlockNum(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverStatus *arg1 = (SolverStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverStatus_getCurrentBlockNum" "', argument " "1"" of type '" "SolverStatus const *""'"); 
  }
  arg1 = reinterpret_cast< SolverStatus * >(argp1);
  {
    try {
      result = (int)((SolverStatus const *)arg1)->getCurrentBlockNum();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverStatus_getCurrentBlockSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverStatus *arg1 = (SolverStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverStatus_getCurrentBlockSize" "', argument " "1"" of type '" "SolverStatus const *""'"); 
  }
  arg1 = reinterpret_cast< SolverStatus * >(argp1);
  {
    try {
      result = (int)((SolverStatus const *)arg1)->getCurrentBlockSize();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverStatus_getCurrentBlockIteration(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverStatus *arg1 = (SolverStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverStatus_getCurrentBlockIteration" "', argument " "1"" of type '" "SolverStatus const *""'"); 
  }
  arg1 = reinterpret_cast< SolverStatus * >(argp1);
  {
    try {
      result = (int)((SolverStatus const *)arg1)->getCurrentBlockIteration();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverStatus_getNumConverged(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverStatus *arg1 = (SolverStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverStatus_getNumConverged" "', argument " "1"" of type '" "SolverStatus const *""'"); 
  }
  arg1 = reinterpret_cast< SolverStatus * >(argp1);
  {
    try {
      result = (int)((SolverStatus const *)arg1)->getNumConverged();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverStatus_getNumJacobianEvals(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverStatus *arg1 = (SolverStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverStatus_getNumJacobianEvals" "', argument " "1"" of type '" "SolverStatus const *""'"); 
  }
  arg1 = reinterpret_cast< SolverStatus * >(argp1);
  {
    try {
      result = (int)((SolverStatus const *)arg1)->getNumJacobianEvals();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverStatus_getNumResidualEvals(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverStatus *arg1 = (SolverStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverStatus_getNumResidualEvals" "', argument " "1"" of type '" "SolverStatus const *""'"); 
  }
  arg1 = reinterpret_cast< SolverStatus * >(argp1);
  {
    try {
      result = (int)((SolverStatus const *)arg1)->getNumResidualEvals();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverStatus_getBlockResidualRMS(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverStatus *arg1 = (SolverStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverStatus_getBlockResidualRMS" "', argument " "1"" of type '" "SolverStatus const *""'"); 
  }
  arg1 = reinterpret_cast< SolverStatus * >(argp1);
  {
    try {
      result = (double)((SolverStatus const *)arg1)->getBlockResidualRMS();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SolverStatus(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverStatus *arg1 = (SolverStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverStatus, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SolverStatus" "', argument " "1"" of type '" "SolverStatus *""'"); 
  }
  arg1 = reinterpret_cast< SolverStatus * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SolverStatus_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SolverStatus, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SolverStatus_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_SolverReporter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  SolverReporter *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  arg1 = swig_obj[0];
  {
    try {
      if ( arg1 != Py_None ) {
        /* subclassed */
        result = (SolverReporter *)new SwigDirector_SolverReporter(arg1); 
      } else {
        result = (SolverReporter *)new SolverReporter(); 
      }
      
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SolverReporter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SolverReporter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverReporter *arg1 = (SolverReporter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverReporter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SolverReporter" "', argument " "1"" of type '" "SolverReporter *""'"); 
  }
  arg1 = reinterpret_cast< SolverReporter * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverReporter_report(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverReporter *arg1 = (SolverReporter *) 0 ;
  SolverStatus *arg2 = (SolverStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SolverReporter_report", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverReporter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverReporter_report" "', argument " "1"" of type '" "SolverReporter *""'"); 
  }
  arg1 = reinterpret_cast< SolverReporter * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_SolverStatus, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SolverReporter_report" "', argument " "2"" of type '" "SolverStatus *""'"); 
  }
  arg2 = reinterpret_cast< SolverStatus * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try {
        if (upcall) {
          result = (int)(arg1)->SolverReporter::report(arg2);
        } else {
          result = (int)(arg1)->report(arg2);
        }
      }
      catch (std::range_error &e) {
        SWIG_exception(SWIG_IndexError,e.what());
      }
      catch (std::runtime_error &e) {
        SWIG_exception(SWIG_RuntimeError,e.what());
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverReporter_finalise(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverReporter *arg1 = (SolverReporter *) 0 ;
  SolverStatus *arg2 = (SolverStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SolverReporter_finalise", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverReporter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverReporter_finalise" "', argument " "1"" of type '" "SolverReporter *""'"); 
  }
  arg1 = reinterpret_cast< SolverReporter * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_SolverStatus, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SolverReporter_finalise" "', argument " "2"" of type '" "SolverStatus *""'"); 
  }
  arg2 = reinterpret_cast< SolverStatus * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try {
        if (upcall) {
          (arg1)->SolverReporter::finalise(arg2);
        } else {
          (arg1)->finalise(arg2);
        }
      }
      catch (std::range_error &e) {
        SWIG_exception(SWIG_IndexError,e.what());
      }
      catch (std::runtime_error &e) {
        SWIG_exception(SWIG_RuntimeError,e.what());
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_SolverReporter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverReporter *arg1 = (SolverReporter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverReporter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_SolverReporter" "', argument " "1"" of type '" "SolverReporter *""'"); 
  }
  arg1 = reinterpret_cast< SolverReporter * >(argp1);
  {
    Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown();
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SolverReporter_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SolverReporter, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SolverReporter_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN int Swig_var_LSODE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable LSODE is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_LSODE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(LSODE));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_Integrator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Simulation *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Integrator *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Simulation,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Integrator" "', argument " "1"" of type '" "Simulation &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Integrator" "', argument " "1"" of type '" "Simulation &""'"); 
  }
  arg1 = reinterpret_cast< Simulation * >(argp1);
  {
    try {
      result = (Integrator *)new Integrator(*arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Integrator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Integrator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Integrator *arg1 = (Integrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Integrator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Integrator" "', argument " "1"" of type '" "Integrator *""'"); 
  }
  arg1 = reinterpret_cast< Integrator * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_getEngines(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string,std::allocator< std::string > > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Integrator_getEngines", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = Integrator::getEngines();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_setEngine(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Integrator *arg1 = (Integrator *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Integrator_setEngine", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_setEngine" "', argument " "1"" of type '" "Integrator *""'"); 
  }
  arg1 = reinterpret_cast< Integrator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Integrator_setEngine" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Integrator_setEngine" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->setEngine((std::string const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_getName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Integrator *arg1 = (Integrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_getName" "', argument " "1"" of type '" "Integrator const *""'"); 
  }
  arg1 = reinterpret_cast< Integrator * >(argp1);
  {
    try {
      result = ((Integrator const *)arg1)->getName();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_getParameters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Integrator *arg1 = (Integrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< SolverParameters > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_getParameters" "', argument " "1"" of type '" "Integrator const *""'"); 
  }
  arg1 = reinterpret_cast< Integrator * >(argp1);
  {
    try {
      result = ((Integrator const *)arg1)->getParameters();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new SolverParameters(result)), SWIGTYPE_p_SolverParameters, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_setParameters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Integrator *arg1 = (Integrator *) 0 ;
  SolverParameters *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Integrator_setParameters", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_setParameters" "', argument " "1"" of type '" "Integrator *""'"); 
  }
  arg1 = reinterpret_cast< Integrator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_SolverParameters,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Integrator_setParameters" "', argument " "2"" of type '" "SolverParameters const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Integrator_setParameters" "', argument " "2"" of type '" "SolverParameters const &""'"); 
  }
  arg2 = reinterpret_cast< SolverParameters * >(argp2);
  {
    try {
      (arg1)->setParameters((SolverParameters const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_setReporter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Integrator *arg1 = (Integrator *) 0 ;
  IntegratorReporterCxx *arg2 = (IntegratorReporterCxx *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Integrator_setReporter", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_setReporter" "', argument " "1"" of type '" "Integrator *""'"); 
  }
  arg1 = reinterpret_cast< Integrator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&arg2), SWIGTYPE_p_IntegratorReporterCxx, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Integrator_setReporter" "', argument " "2"" of type '" "IntegratorReporterCxx *""'");
  }
  {
    try {
      (arg1)->setReporter(arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_setMinSubStep(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Integrator *arg1 = (Integrator *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Integrator_setMinSubStep", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_setMinSubStep" "', argument " "1"" of type '" "Integrator *""'"); 
  }
  arg1 = reinterpret_cast< Integrator * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Integrator_setMinSubStep" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setMinSubStep(arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_setMaxSubStep(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Integrator *arg1 = (Integrator *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Integrator_setMaxSubStep", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_setMaxSubStep" "', argument " "1"" of type '" "Integrator *""'"); 
  }
  arg1 = reinterpret_cast< Integrator * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Integrator_setMaxSubStep" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setMaxSubStep(arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_setInitialSubStep(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Integrator *arg1 = (Integrator *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Integrator_setInitialSubStep", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_setInitialSubStep" "', argument " "1"" of type '" "Integrator *""'"); 
  }
  arg1 = reinterpret_cast< Integrator * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Integrator_setInitialSubStep" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setInitialSubStep(arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_setMaxSubSteps(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Integrator *arg1 = (Integrator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Integrator_setMaxSubSteps", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_setMaxSubSteps" "', argument " "1"" of type '" "Integrator *""'"); 
  }
  arg1 = reinterpret_cast< Integrator * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Integrator_setMaxSubSteps" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setMaxSubSteps(arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_setLinearTimesteps(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Integrator *arg1 = (Integrator *) 0 ;
  UnitsM arg2 ;
  double arg3 ;
  double arg4 ;
  unsigned long arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  unsigned long val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Integrator_setLinearTimesteps", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_setLinearTimesteps" "', argument " "1"" of type '" "Integrator *""'"); 
  }
  arg1 = reinterpret_cast< Integrator * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_UnitsM,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Integrator_setLinearTimesteps" "', argument " "2"" of type '" "UnitsM""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Integrator_setLinearTimesteps" "', argument " "2"" of type '" "UnitsM""'");
    } else {
      UnitsM * temp = reinterpret_cast< UnitsM * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Integrator_setLinearTimesteps" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Integrator_setLinearTimesteps" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_long(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Integrator_setLinearTimesteps" "', argument " "5"" of type '" "unsigned long""'");
  } 
  arg5 = static_cast< unsigned long >(val5);
  {
    try {
      (arg1)->setLinearTimesteps(arg2,arg3,arg4,arg5);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_setLogTimesteps(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Integrator *arg1 = (Integrator *) 0 ;
  UnitsM arg2 ;
  double arg3 ;
  double arg4 ;
  unsigned long arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  unsigned long val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Integrator_setLogTimesteps", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_setLogTimesteps" "', argument " "1"" of type '" "Integrator *""'"); 
  }
  arg1 = reinterpret_cast< Integrator * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_UnitsM,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Integrator_setLogTimesteps" "', argument " "2"" of type '" "UnitsM""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Integrator_setLogTimesteps" "', argument " "2"" of type '" "UnitsM""'");
    } else {
      UnitsM * temp = reinterpret_cast< UnitsM * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Integrator_setLogTimesteps" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Integrator_setLogTimesteps" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_long(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Integrator_setLogTimesteps" "', argument " "5"" of type '" "unsigned long""'");
  } 
  arg5 = static_cast< unsigned long >(val5);
  {
    try {
      (arg1)->setLogTimesteps(arg2,arg3,arg4,arg5);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_getCurrentObservations(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Integrator *arg1 = (Integrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double,std::allocator< double > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_getCurrentObservations" "', argument " "1"" of type '" "Integrator *""'"); 
  }
  arg1 = reinterpret_cast< Integrator * >(argp1);
  {
    try {
      result = (arg1)->getCurrentObservations();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_saveObservations(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Integrator *arg1 = (Integrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_saveObservations" "', argument " "1"" of type '" "Integrator *""'"); 
  }
  arg1 = reinterpret_cast< Integrator * >(argp1);
  {
    try {
      (arg1)->saveObservations();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_getObservations(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Integrator *arg1 = (Integrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_getObservations" "', argument " "1"" of type '" "Integrator *""'"); 
  }
  arg1 = reinterpret_cast< Integrator * >(argp1);
  {
    try {
      result = (arg1)->getObservations();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_getObservedVariable(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Integrator *arg1 = (Integrator *) 0 ;
  long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long temp2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  Variable result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Integrator_getObservedVariable", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_getObservedVariable" "', argument " "1"" of type '" "Integrator *""'"); 
  }
  arg1 = reinterpret_cast< Integrator * >(argp1);
  ecode2 = SWIG_AsVal_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Integrator_getObservedVariable" "', argument " "2"" of type '" "long""'");
  } 
  temp2 = static_cast< long >(val2);
  arg2 = &temp2;
  {
    try {
      result = (arg1)->getObservedVariable((long const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new Variable(result)), SWIGTYPE_p_Variable, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_getIndependentVariable(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Integrator *arg1 = (Integrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Variable result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_getIndependentVariable" "', argument " "1"" of type '" "Integrator *""'"); 
  }
  arg1 = reinterpret_cast< Integrator * >(argp1);
  {
    try {
      result = (arg1)->getIndependentVariable();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new Variable(result)), SWIGTYPE_p_Variable, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_findIndependentVar(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Integrator *arg1 = (Integrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_findIndependentVar" "', argument " "1"" of type '" "Integrator *""'"); 
  }
  arg1 = reinterpret_cast< Integrator * >(argp1);
  {
    try {
      (arg1)->findIndependentVar();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_analyse(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Integrator *arg1 = (Integrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_analyse" "', argument " "1"" of type '" "Integrator *""'"); 
  }
  arg1 = reinterpret_cast< Integrator * >(argp1);
  {
    try {
      (arg1)->analyse();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_solve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Integrator *arg1 = (Integrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_solve" "', argument " "1"" of type '" "Integrator *""'"); 
  }
  arg1 = reinterpret_cast< Integrator * >(argp1);
  {
    try {
      (arg1)->solve();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_writeMatrix(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Integrator *arg1 = (Integrator *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Integrator_writeMatrix", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_writeMatrix" "', argument " "1"" of type '" "Integrator const *""'"); 
  }
  arg1 = reinterpret_cast< Integrator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Integrator_writeMatrix" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Integrator_writeMatrix" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try {
      ((Integrator const *)arg1)->writeMatrix(arg2,(char const *)arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_writeDebug(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Integrator *arg1 = (Integrator *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Integrator_writeDebug", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_writeDebug" "', argument " "1"" of type '" "Integrator const *""'"); 
  }
  arg1 = reinterpret_cast< Integrator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Integrator_writeDebug" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      ((Integrator const *)arg1)->writeDebug(arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_getCurrentTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Integrator *arg1 = (Integrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_getCurrentTime" "', argument " "1"" of type '" "Integrator *""'"); 
  }
  arg1 = reinterpret_cast< Integrator * >(argp1);
  {
    try {
      result = (double)(arg1)->getCurrentTime();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_getCurrentStep(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Integrator *arg1 = (Integrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  long result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_getCurrentStep" "', argument " "1"" of type '" "Integrator *""'"); 
  }
  arg1 = reinterpret_cast< Integrator * >(argp1);
  {
    try {
      result = (long)(arg1)->getCurrentStep();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_getNumSteps(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Integrator *arg1 = (Integrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  long result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_getNumSteps" "', argument " "1"" of type '" "Integrator *""'"); 
  }
  arg1 = reinterpret_cast< Integrator * >(argp1);
  {
    try {
      result = (long)(arg1)->getNumSteps();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_getNumVars(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Integrator *arg1 = (Integrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_getNumVars" "', argument " "1"" of type '" "Integrator *""'"); 
  }
  arg1 = reinterpret_cast< Integrator * >(argp1);
  {
    try {
      result = (int)(arg1)->getNumVars();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_getNumObservedVars(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Integrator *arg1 = (Integrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integrator_getNumObservedVars" "', argument " "1"" of type '" "Integrator *""'"); 
  }
  arg1 = reinterpret_cast< Integrator * >(argp1);
  {
    try {
      result = (int)(arg1)->getNumObservedVars();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Integrator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Integrator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Integrator_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_IntegratorReporterCxx(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  Integrator *arg2 = (Integrator *) 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  IntegratorReporterCxx *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_IntegratorReporterCxx", 2, 2, swig_obj)) SWIG_fail;
  arg1 = swig_obj[0];
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Integrator, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_IntegratorReporterCxx" "', argument " "2"" of type '" "Integrator *""'"); 
  }
  arg2 = reinterpret_cast< Integrator * >(argp2);
  {
    try {
      if ( arg1 != Py_None ) {
        /* subclassed */
        result = (IntegratorReporterCxx *)new SwigDirector_IntegratorReporterCxx(arg1,arg2); 
      } else {
        result = (IntegratorReporterCxx *)new IntegratorReporterCxx(arg2); 
      }
      
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IntegratorReporterCxx, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IntegratorReporterCxx(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  IntegratorReporterCxx *arg1 = (IntegratorReporterCxx *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IntegratorReporterCxx, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IntegratorReporterCxx" "', argument " "1"" of type '" "IntegratorReporterCxx *""'"); 
  }
  arg1 = reinterpret_cast< IntegratorReporterCxx * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegratorReporterCxx_initOutput(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  IntegratorReporterCxx *arg1 = (IntegratorReporterCxx *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IntegratorReporterCxx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegratorReporterCxx_initOutput" "', argument " "1"" of type '" "IntegratorReporterCxx *""'"); 
  }
  arg1 = reinterpret_cast< IntegratorReporterCxx * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try {
        if (upcall) {
          result = (int)(arg1)->IntegratorReporterCxx::initOutput();
        } else {
          result = (int)(arg1)->initOutput();
        }
      }
      catch (std::range_error &e) {
        SWIG_exception(SWIG_IndexError,e.what());
      }
      catch (std::runtime_error &e) {
        SWIG_exception(SWIG_RuntimeError,e.what());
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegratorReporterCxx_closeOutput(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  IntegratorReporterCxx *arg1 = (IntegratorReporterCxx *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IntegratorReporterCxx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegratorReporterCxx_closeOutput" "', argument " "1"" of type '" "IntegratorReporterCxx *""'"); 
  }
  arg1 = reinterpret_cast< IntegratorReporterCxx * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try {
        if (upcall) {
          result = (int)(arg1)->IntegratorReporterCxx::closeOutput();
        } else {
          result = (int)(arg1)->closeOutput();
        }
      }
      catch (std::range_error &e) {
        SWIG_exception(SWIG_IndexError,e.what());
      }
      catch (std::runtime_error &e) {
        SWIG_exception(SWIG_RuntimeError,e.what());
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegratorReporterCxx_updateStatus(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  IntegratorReporterCxx *arg1 = (IntegratorReporterCxx *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IntegratorReporterCxx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegratorReporterCxx_updateStatus" "', argument " "1"" of type '" "IntegratorReporterCxx *""'"); 
  }
  arg1 = reinterpret_cast< IntegratorReporterCxx * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try {
        if (upcall) {
          result = (int)(arg1)->IntegratorReporterCxx::updateStatus();
        } else {
          result = (int)(arg1)->updateStatus();
        }
      }
      catch (std::range_error &e) {
        SWIG_exception(SWIG_IndexError,e.what());
      }
      catch (std::runtime_error &e) {
        SWIG_exception(SWIG_RuntimeError,e.what());
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegratorReporterCxx_recordObservedValues(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  IntegratorReporterCxx *arg1 = (IntegratorReporterCxx *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IntegratorReporterCxx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegratorReporterCxx_recordObservedValues" "', argument " "1"" of type '" "IntegratorReporterCxx *""'"); 
  }
  arg1 = reinterpret_cast< IntegratorReporterCxx * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try {
        if (upcall) {
          result = (int)(arg1)->IntegratorReporterCxx::recordObservedValues();
        } else {
          result = (int)(arg1)->recordObservedValues();
        }
      }
      catch (std::range_error &e) {
        SWIG_exception(SWIG_IndexError,e.what());
      }
      catch (std::runtime_error &e) {
        SWIG_exception(SWIG_RuntimeError,e.what());
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegratorReporterCxx_getIntegrator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  IntegratorReporterCxx *arg1 = (IntegratorReporterCxx *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Integrator *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IntegratorReporterCxx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegratorReporterCxx_getIntegrator" "', argument " "1"" of type '" "IntegratorReporterCxx *""'"); 
  }
  arg1 = reinterpret_cast< IntegratorReporterCxx * >(argp1);
  {
    try {
      result = (Integrator *)(arg1)->getIntegrator();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Integrator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_IntegratorReporterCxx(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  IntegratorReporterCxx *arg1 = (IntegratorReporterCxx *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IntegratorReporterCxx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_IntegratorReporterCxx" "', argument " "1"" of type '" "IntegratorReporterCxx *""'"); 
  }
  arg1 = reinterpret_cast< IntegratorReporterCxx * >(argp1);
  {
    Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown();
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IntegratorReporterCxx_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IntegratorReporterCxx, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *IntegratorReporterCxx_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_IntegratorReporterNull(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Integrator *arg1 = (Integrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  IntegratorReporterNull *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IntegratorReporterNull" "', argument " "1"" of type '" "Integrator *""'"); 
  }
  arg1 = reinterpret_cast< Integrator * >(argp1);
  {
    try {
      result = (IntegratorReporterNull *)new IntegratorReporterNull(arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IntegratorReporterNull, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IntegratorReporterNull(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  IntegratorReporterNull *arg1 = (IntegratorReporterNull *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IntegratorReporterNull, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IntegratorReporterNull" "', argument " "1"" of type '" "IntegratorReporterNull *""'"); 
  }
  arg1 = reinterpret_cast< IntegratorReporterNull * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IntegratorReporterNull_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IntegratorReporterNull, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *IntegratorReporterNull_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_IntegratorReporterConsole(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Integrator *arg1 = (Integrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  IntegratorReporterConsole *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Integrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IntegratorReporterConsole" "', argument " "1"" of type '" "Integrator *""'"); 
  }
  arg1 = reinterpret_cast< Integrator * >(argp1);
  {
    try {
      result = (IntegratorReporterConsole *)new IntegratorReporterConsole(arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IntegratorReporterConsole, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IntegratorReporterConsole(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  IntegratorReporterConsole *arg1 = (IntegratorReporterConsole *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IntegratorReporterConsole, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IntegratorReporterConsole" "', argument " "1"" of type '" "IntegratorReporterConsole *""'"); 
  }
  arg1 = reinterpret_cast< IntegratorReporterConsole * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IntegratorReporterConsole_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IntegratorReporterConsole, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *IntegratorReporterConsole_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_SolverHooks__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  SolverReporter *arg2 = (SolverReporter *) 0 ;
  int res2 = 0 ;
  SolverHooks *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  arg1 = swig_obj[0];
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&arg2), SWIGTYPE_p_SolverReporter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SolverHooks" "', argument " "2"" of type '" "SolverReporter *""'");
  }
  {
    try {
      if ( arg1 != Py_None ) {
        /* subclassed */
        result = (SolverHooks *)new SwigDirector_SolverHooks(arg1,arg2); 
      } else {
        result = (SolverHooks *)new SolverHooks(arg2); 
      }
      
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SolverHooks, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SolverHooks__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  SolverHooks *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  arg1 = swig_obj[0];
  {
    try {
      if ( arg1 != Py_None ) {
        /* subclassed */
        result = (SolverHooks *)new SwigDirector_SolverHooks(arg1); 
      } else {
        result = (SolverHooks *)new SolverHooks(); 
      }
      
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SolverHooks, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SolverHooks__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  SolverHooks *arg2 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  SolverHooks *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  arg1 = swig_obj[0];
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_SolverHooks,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SolverHooks" "', argument " "2"" of type '" "SolverHooks &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SolverHooks" "', argument " "2"" of type '" "SolverHooks &""'"); 
  }
  arg2 = reinterpret_cast< SolverHooks * >(argp2);
  {
    try {
      if ( arg1 != Py_None ) {
        /* subclassed */
        result = (SolverHooks *)new SwigDirector_SolverHooks(arg1,*arg2); 
      } else {
        result = (SolverHooks *)new SolverHooks(*arg2); 
      }
      
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SolverHooks, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SolverHooks(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_SolverHooks", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    PyObject *retobj = _wrap_new_SolverHooks__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_SolverReporter, 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_new_SolverHooks__SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_new_SolverHooks__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_SolverHooks'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    SolverHooks::SolverHooks(SolverReporter *)\n"
    "    SolverHooks::SolverHooks()\n"
    "    SolverHooks::SolverHooks(PyObject *,SolverHooks &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_SolverHooks(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverHooks *arg1 = (SolverHooks *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverHooks, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SolverHooks" "', argument " "1"" of type '" "SolverHooks *""'"); 
  }
  arg1 = reinterpret_cast< SolverHooks * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverHooks_setSolver(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverHooks *arg1 = (SolverHooks *) 0 ;
  char *arg2 = (char *) 0 ;
  Simulation *arg3 = (Simulation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SolverHooks_setSolver", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverHooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverHooks_setSolver" "', argument " "1"" of type '" "SolverHooks *""'"); 
  }
  arg1 = reinterpret_cast< SolverHooks * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SolverHooks_setSolver" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&arg3), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SolverHooks_setSolver" "', argument " "3"" of type '" "Simulation *""'");
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try {
        if (upcall) {
          result = (int)(arg1)->SolverHooks::setSolver((char const *)arg2,arg3);
        } else {
          result = (int)(arg1)->setSolver((char const *)arg2,arg3);
        }
      }
      catch (std::range_error &e) {
        SWIG_exception(SWIG_IndexError,e.what());
      }
      catch (std::runtime_error &e) {
        SWIG_exception(SWIG_RuntimeError,e.what());
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverHooks_setOption(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverHooks *arg1 = (SolverHooks *) 0 ;
  char *arg2 = (char *) 0 ;
  Value arg3 ;
  Simulation *arg4 = (Simulation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SolverHooks_setOption", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverHooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverHooks_setOption" "', argument " "1"" of type '" "SolverHooks *""'"); 
  }
  arg1 = reinterpret_cast< SolverHooks * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SolverHooks_setOption" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Value,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SolverHooks_setOption" "', argument " "3"" of type '" "Value""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SolverHooks_setOption" "', argument " "3"" of type '" "Value""'");
    } else {
      Value * temp = reinterpret_cast< Value * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  res4 = SWIG_ConvertPtr(swig_obj[3], SWIG_as_voidptrptr(&arg4), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SolverHooks_setOption" "', argument " "4"" of type '" "Simulation *""'");
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try {
        if (upcall) {
          result = (int)(arg1)->SolverHooks::setOption((char const *)arg2,arg3,arg4);
        } else {
          result = (int)(arg1)->setOption((char const *)arg2,arg3,arg4);
        }
      }
      catch (std::range_error &e) {
        SWIG_exception(SWIG_IndexError,e.what());
      }
      catch (std::runtime_error &e) {
        SWIG_exception(SWIG_RuntimeError,e.what());
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverHooks_doSolve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverHooks *arg1 = (SolverHooks *) 0 ;
  Instance *arg2 = (Instance *) 0 ;
  Simulation *arg3 = (Simulation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SolverHooks_doSolve", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverHooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverHooks_doSolve" "', argument " "1"" of type '" "SolverHooks *""'"); 
  }
  arg1 = reinterpret_cast< SolverHooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Instance, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SolverHooks_doSolve" "', argument " "2"" of type '" "Instance *""'"); 
  }
  arg2 = reinterpret_cast< Instance * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&arg3), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SolverHooks_doSolve" "', argument " "3"" of type '" "Simulation *""'");
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try {
        if (upcall) {
          result = (int)(arg1)->SolverHooks::doSolve(arg2,arg3);
        } else {
          result = (int)(arg1)->doSolve(arg2,arg3);
        }
      }
      catch (std::range_error &e) {
        SWIG_exception(SWIG_IndexError,e.what());
      }
      catch (std::runtime_error &e) {
        SWIG_exception(SWIG_RuntimeError,e.what());
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverHooks_getSolverReporter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverHooks *arg1 = (SolverHooks *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Swig::Director *director = 0;
  SolverReporter *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverHooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverHooks_getSolverReporter" "', argument " "1"" of type '" "SolverHooks *""'"); 
  }
  arg1 = reinterpret_cast< SolverHooks * >(argp1);
  {
    try {
      result = (SolverReporter *)(arg1)->getSolverReporter();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SolverReporter, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverHooks_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverHooks *arg1 = (SolverHooks *) 0 ;
  Simulation *arg2 = (Simulation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SolverHooks_assign", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverHooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverHooks_assign" "', argument " "1"" of type '" "SolverHooks *""'"); 
  }
  arg1 = reinterpret_cast< SolverHooks * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&arg2), SWIGTYPE_p_Simulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SolverHooks_assign" "', argument " "2"" of type '" "Simulation *""'");
  }
  {
    try {
      (arg1)->assign(arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_SolverHooks(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverHooks *arg1 = (SolverHooks *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverHooks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_SolverHooks" "', argument " "1"" of type '" "SolverHooks *""'"); 
  }
  arg1 = reinterpret_cast< SolverHooks * >(argp1);
  {
    Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown();
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SolverHooks_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SolverHooks, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SolverHooks_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_SolverHooksManager_Instance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverHooksManager *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SolverHooksManager_Instance", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (SolverHooksManager *)SolverHooksManager::Instance();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SolverHooksManager, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverHooksManager_setHooks(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverHooksManager *arg1 = (SolverHooksManager *) 0 ;
  SolverHooks *arg2 = (SolverHooks *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SolverHooksManager_setHooks", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverHooksManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverHooksManager_setHooks" "', argument " "1"" of type '" "SolverHooksManager *""'"); 
  }
  arg1 = reinterpret_cast< SolverHooksManager * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&arg2), SWIGTYPE_p_SolverHooks, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SolverHooksManager_setHooks" "', argument " "2"" of type '" "SolverHooks *""'");
  }
  {
    try {
      (arg1)->setHooks(arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverHooksManager_getHooks(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SolverHooksManager *arg1 = (SolverHooksManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Swig::Director *director = 0;
  SolverHooks *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SolverHooksManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverHooksManager_getHooks" "', argument " "1"" of type '" "SolverHooksManager *""'"); 
  }
  arg1 = reinterpret_cast< SolverHooksManager * >(argp1);
  {
    try {
      result = (SolverHooks *)(arg1)->getHooks();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SolverHooks, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SolverHooksManager_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SolverHooksManager, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ExtMethod__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  ExtMethod *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (ExtMethod *)new ExtMethod();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ExtMethod, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ExtMethod__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ExternalFunc *arg1 = (ExternalFunc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ExtMethod *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ExternalFunc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ExtMethod" "', argument " "1"" of type '" "ExternalFunc const *""'"); 
  }
  arg1 = reinterpret_cast< ExternalFunc * >(argp1);
  {
    try {
      result = (ExtMethod *)new ExtMethod((ExternalFunc const *)arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ExtMethod, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ExtMethod__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ExtMethod *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ExtMethod *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ExtMethod,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ExtMethod" "', argument " "1"" of type '" "ExtMethod const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ExtMethod" "', argument " "1"" of type '" "ExtMethod const &""'"); 
  }
  arg1 = reinterpret_cast< ExtMethod * >(argp1);
  {
    try {
      result = (ExtMethod *)new ExtMethod((ExtMethod const &)*arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ExtMethod, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ExtMethod(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_ExtMethod", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    PyObject *retobj = _wrap_new_ExtMethod__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ExternalFunc, 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_new_ExtMethod__SWIG_1(self, argc, argv);
  }
check_2:
  
  if (argc == 1) {
    PyObject *retobj = _wrap_new_ExtMethod__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_ExtMethod'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ExtMethod::ExtMethod()\n"
    "    ExtMethod::ExtMethod(ExternalFunc const *)\n"
    "    ExtMethod::ExtMethod(ExtMethod const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ExtMethod_getHelp(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ExtMethod *arg1 = (ExtMethod *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ExtMethod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtMethod_getHelp" "', argument " "1"" of type '" "ExtMethod const *""'"); 
  }
  arg1 = reinterpret_cast< ExtMethod * >(argp1);
  {
    try {
      result = (char *)((ExtMethod const *)arg1)->getHelp();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtMethod_getName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ExtMethod *arg1 = (ExtMethod *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ExtMethod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtMethod_getName" "', argument " "1"" of type '" "ExtMethod const *""'"); 
  }
  arg1 = reinterpret_cast< ExtMethod * >(argp1);
  {
    try {
      result = (char *)((ExtMethod const *)arg1)->getName();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtMethod_getNumInputs(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ExtMethod *arg1 = (ExtMethod *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned long result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ExtMethod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtMethod_getNumInputs" "', argument " "1"" of type '" "ExtMethod const *""'"); 
  }
  arg1 = reinterpret_cast< ExtMethod * >(argp1);
  {
    try {
      result = (unsigned long)((ExtMethod const *)arg1)->getNumInputs();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExtMethod_getNumOutputs(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ExtMethod *arg1 = (ExtMethod *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned long result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ExtMethod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtMethod_getNumOutputs" "', argument " "1"" of type '" "ExtMethod const *""'"); 
  }
  arg1 = reinterpret_cast< ExtMethod * >(argp1);
  {
    try {
      result = (unsigned long)((ExtMethod const *)arg1)->getNumOutputs();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ExtMethod(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ExtMethod *arg1 = (ExtMethod *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ExtMethod, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ExtMethod" "', argument " "1"" of type '" "ExtMethod *""'"); 
  }
  arg1 = reinterpret_cast< ExtMethod * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ExtMethod_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ExtMethod, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ExtMethod_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_AnnotationDatabase(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SymChar *arg1 = 0 ;
  PyObject *swig_obj[1] ;
  AnnotationDatabase *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    arg1 = new SymChar(PyUnicode_AsUTF8(swig_obj[0]));
  }
  {
    try {
      result = (AnnotationDatabase *)new AnnotationDatabase((SymChar const &)*arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AnnotationDatabase, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnotationDatabase_getNotes__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  AnnotationDatabase *arg1 = (AnnotationDatabase *) 0 ;
  Type *arg2 = 0 ;
  SymChar *arg3 = (SymChar *) 0 ;
  SymChar *arg4 = (SymChar *) 0 ;
  SymChar *arg5 = (SymChar *) 0 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  std::vector< Annotation,std::allocator< Annotation > > result;
  
  (void)self;
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AnnotationDatabase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnotationDatabase_getNotes" "', argument " "1"" of type '" "AnnotationDatabase *""'"); 
  }
  arg1 = reinterpret_cast< AnnotationDatabase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AnnotationDatabase_getNotes" "', argument " "2"" of type '" "Type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AnnotationDatabase_getNotes" "', argument " "2"" of type '" "Type const &""'"); 
  }
  arg2 = reinterpret_cast< Type * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_SymChar, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AnnotationDatabase_getNotes" "', argument " "3"" of type '" "SymChar const *""'"); 
  }
  arg3 = reinterpret_cast< SymChar * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_SymChar, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AnnotationDatabase_getNotes" "', argument " "4"" of type '" "SymChar const *""'"); 
  }
  arg4 = reinterpret_cast< SymChar * >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_SymChar, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "AnnotationDatabase_getNotes" "', argument " "5"" of type '" "SymChar const *""'"); 
  }
  arg5 = reinterpret_cast< SymChar * >(argp5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "AnnotationDatabase_getNotes" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try {
      result = (arg1)->getNotes((Type const &)*arg2,(SymChar const *)arg3,(SymChar const *)arg4,(SymChar const *)arg5,arg6);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< Annotation,std::allocator< Annotation > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnotationDatabase_getNotes__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  AnnotationDatabase *arg1 = (AnnotationDatabase *) 0 ;
  Type *arg2 = 0 ;
  SymChar *arg3 = (SymChar *) 0 ;
  SymChar *arg4 = (SymChar *) 0 ;
  SymChar *arg5 = (SymChar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  std::vector< Annotation,std::allocator< Annotation > > result;
  
  (void)self;
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AnnotationDatabase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnotationDatabase_getNotes" "', argument " "1"" of type '" "AnnotationDatabase *""'"); 
  }
  arg1 = reinterpret_cast< AnnotationDatabase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AnnotationDatabase_getNotes" "', argument " "2"" of type '" "Type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AnnotationDatabase_getNotes" "', argument " "2"" of type '" "Type const &""'"); 
  }
  arg2 = reinterpret_cast< Type * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_SymChar, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AnnotationDatabase_getNotes" "', argument " "3"" of type '" "SymChar const *""'"); 
  }
  arg3 = reinterpret_cast< SymChar * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_SymChar, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AnnotationDatabase_getNotes" "', argument " "4"" of type '" "SymChar const *""'"); 
  }
  arg4 = reinterpret_cast< SymChar * >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_SymChar, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "AnnotationDatabase_getNotes" "', argument " "5"" of type '" "SymChar const *""'"); 
  }
  arg5 = reinterpret_cast< SymChar * >(argp5);
  {
    try {
      result = (arg1)->getNotes((Type const &)*arg2,(SymChar const *)arg3,(SymChar const *)arg4,(SymChar const *)arg5);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< Annotation,std::allocator< Annotation > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnotationDatabase_getNotes__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  AnnotationDatabase *arg1 = (AnnotationDatabase *) 0 ;
  Type *arg2 = 0 ;
  SymChar *arg3 = (SymChar *) 0 ;
  SymChar *arg4 = (SymChar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  std::vector< Annotation,std::allocator< Annotation > > result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AnnotationDatabase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnotationDatabase_getNotes" "', argument " "1"" of type '" "AnnotationDatabase *""'"); 
  }
  arg1 = reinterpret_cast< AnnotationDatabase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AnnotationDatabase_getNotes" "', argument " "2"" of type '" "Type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AnnotationDatabase_getNotes" "', argument " "2"" of type '" "Type const &""'"); 
  }
  arg2 = reinterpret_cast< Type * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_SymChar, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AnnotationDatabase_getNotes" "', argument " "3"" of type '" "SymChar const *""'"); 
  }
  arg3 = reinterpret_cast< SymChar * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_SymChar, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AnnotationDatabase_getNotes" "', argument " "4"" of type '" "SymChar const *""'"); 
  }
  arg4 = reinterpret_cast< SymChar * >(argp4);
  {
    try {
      result = (arg1)->getNotes((Type const &)*arg2,(SymChar const *)arg3,(SymChar const *)arg4);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< Annotation,std::allocator< Annotation > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnotationDatabase_getNotes__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  AnnotationDatabase *arg1 = (AnnotationDatabase *) 0 ;
  Type *arg2 = 0 ;
  SymChar *arg3 = (SymChar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::vector< Annotation,std::allocator< Annotation > > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AnnotationDatabase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnotationDatabase_getNotes" "', argument " "1"" of type '" "AnnotationDatabase *""'"); 
  }
  arg1 = reinterpret_cast< AnnotationDatabase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AnnotationDatabase_getNotes" "', argument " "2"" of type '" "Type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AnnotationDatabase_getNotes" "', argument " "2"" of type '" "Type const &""'"); 
  }
  arg2 = reinterpret_cast< Type * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_SymChar, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AnnotationDatabase_getNotes" "', argument " "3"" of type '" "SymChar const *""'"); 
  }
  arg3 = reinterpret_cast< SymChar * >(argp3);
  {
    try {
      result = (arg1)->getNotes((Type const &)*arg2,(SymChar const *)arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< Annotation,std::allocator< Annotation > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnotationDatabase_getNotes__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  AnnotationDatabase *arg1 = (AnnotationDatabase *) 0 ;
  Type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< Annotation,std::allocator< Annotation > > result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AnnotationDatabase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnotationDatabase_getNotes" "', argument " "1"" of type '" "AnnotationDatabase *""'"); 
  }
  arg1 = reinterpret_cast< AnnotationDatabase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AnnotationDatabase_getNotes" "', argument " "2"" of type '" "Type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AnnotationDatabase_getNotes" "', argument " "2"" of type '" "Type const &""'"); 
  }
  arg2 = reinterpret_cast< Type * >(argp2);
  {
    try {
      result = (arg1)->getNotes((Type const &)*arg2);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< Annotation,std::allocator< Annotation > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnotationDatabase_getNotes(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "AnnotationDatabase_getNotes", 0, 6, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_AnnotationDatabase_getNotes__SWIG_4(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_AnnotationDatabase_getNotes__SWIG_3(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_AnnotationDatabase_getNotes__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 5) {
    PyObject *retobj = _wrap_AnnotationDatabase_getNotes__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 6) {
    PyObject *retobj = _wrap_AnnotationDatabase_getNotes__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'AnnotationDatabase_getNotes'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    AnnotationDatabase::getNotes(Type const &,SymChar const *,SymChar const *,SymChar const *,int const)\n"
    "    AnnotationDatabase::getNotes(Type const &,SymChar const *,SymChar const *,SymChar const *)\n"
    "    AnnotationDatabase::getNotes(Type const &,SymChar const *,SymChar const *)\n"
    "    AnnotationDatabase::getNotes(Type const &,SymChar const *)\n"
    "    AnnotationDatabase::getNotes(Type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_AnnotationDatabase_getTypeRefinedNotesLang(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  AnnotationDatabase *arg1 = (AnnotationDatabase *) 0 ;
  Type *arg2 = 0 ;
  SymChar *arg3 = (SymChar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< Annotation,std::allocator< Annotation > > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "AnnotationDatabase_getTypeRefinedNotesLang", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AnnotationDatabase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnotationDatabase_getTypeRefinedNotesLang" "', argument " "1"" of type '" "AnnotationDatabase *""'"); 
  }
  arg1 = reinterpret_cast< AnnotationDatabase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AnnotationDatabase_getTypeRefinedNotesLang" "', argument " "2"" of type '" "Type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AnnotationDatabase_getTypeRefinedNotesLang" "', argument " "2"" of type '" "Type const &""'"); 
  }
  arg2 = reinterpret_cast< Type * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_SymChar, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AnnotationDatabase_getTypeRefinedNotesLang" "', argument " "3"" of type '" "SymChar const *""'"); 
  }
  arg3 = reinterpret_cast< SymChar * >(argp3);
  {
    try {
      result = (arg1)->getTypeRefinedNotesLang((Type const &)*arg2,(SymChar const *)arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< Annotation,std::allocator< Annotation > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnotationDatabase_getNoteForVariable__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  AnnotationDatabase *arg1 = (AnnotationDatabase *) 0 ;
  Type *arg2 = 0 ;
  SymChar *arg3 = (SymChar *) 0 ;
  SymChar *arg4 = (SymChar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  char *result = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AnnotationDatabase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnotationDatabase_getNoteForVariable" "', argument " "1"" of type '" "AnnotationDatabase *""'"); 
  }
  arg1 = reinterpret_cast< AnnotationDatabase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AnnotationDatabase_getNoteForVariable" "', argument " "2"" of type '" "Type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AnnotationDatabase_getNoteForVariable" "', argument " "2"" of type '" "Type const &""'"); 
  }
  arg2 = reinterpret_cast< Type * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_SymChar, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AnnotationDatabase_getNoteForVariable" "', argument " "3"" of type '" "SymChar const *""'"); 
  }
  arg3 = reinterpret_cast< SymChar * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_SymChar, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AnnotationDatabase_getNoteForVariable" "', argument " "4"" of type '" "SymChar const *""'"); 
  }
  arg4 = reinterpret_cast< SymChar * >(argp4);
  {
    try {
      result = (char *)(arg1)->getNoteForVariable((Type const &)*arg2,(SymChar const *)arg3,(SymChar const *)arg4);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnotationDatabase_getNoteForVariable__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  AnnotationDatabase *arg1 = (AnnotationDatabase *) 0 ;
  Type *arg2 = 0 ;
  SymChar *arg3 = (SymChar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  char *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AnnotationDatabase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnotationDatabase_getNoteForVariable" "', argument " "1"" of type '" "AnnotationDatabase *""'"); 
  }
  arg1 = reinterpret_cast< AnnotationDatabase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AnnotationDatabase_getNoteForVariable" "', argument " "2"" of type '" "Type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AnnotationDatabase_getNoteForVariable" "', argument " "2"" of type '" "Type const &""'"); 
  }
  arg2 = reinterpret_cast< Type * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_SymChar, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AnnotationDatabase_getNoteForVariable" "', argument " "3"" of type '" "SymChar const *""'"); 
  }
  arg3 = reinterpret_cast< SymChar * >(argp3);
  {
    try {
      result = (char *)(arg1)->getNoteForVariable((Type const &)*arg2,(SymChar const *)arg3);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnotationDatabase_getNoteForVariable(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "AnnotationDatabase_getNoteForVariable", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    PyObject *retobj = _wrap_AnnotationDatabase_getNoteForVariable__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_AnnotationDatabase_getNoteForVariable__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'AnnotationDatabase_getNoteForVariable'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    AnnotationDatabase::getNoteForVariable(Type const &,SymChar const *,SymChar const *)\n"
    "    AnnotationDatabase::getNoteForVariable(Type const &,SymChar const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_AnnotationDatabase(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  AnnotationDatabase *arg1 = (AnnotationDatabase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AnnotationDatabase, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AnnotationDatabase" "', argument " "1"" of type '" "AnnotationDatabase *""'"); 
  }
  arg1 = reinterpret_cast< AnnotationDatabase * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AnnotationDatabase_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_AnnotationDatabase, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *AnnotationDatabase_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Plot(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Plot *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Plot *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Plot,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Plot" "', argument " "1"" of type '" "Plot const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Plot" "', argument " "1"" of type '" "Plot const &""'"); 
  }
  arg1 = reinterpret_cast< Plot * >(argp1);
  {
    try {
      result = (Plot *)new Plot((Plot const &)*arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Plot, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plot_getTitle(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Plot *arg1 = (Plot *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Plot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plot_getTitle" "', argument " "1"" of type '" "Plot const *""'"); 
  }
  arg1 = reinterpret_cast< Plot * >(argp1);
  {
    try {
      result = ((Plot const *)arg1)->getTitle();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plot_getXLabel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Plot *arg1 = (Plot *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Plot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plot_getXLabel" "', argument " "1"" of type '" "Plot const *""'"); 
  }
  arg1 = reinterpret_cast< Plot * >(argp1);
  {
    try {
      result = ((Plot const *)arg1)->getXLabel();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plot_getYLabel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Plot *arg1 = (Plot *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Plot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plot_getYLabel" "', argument " "1"" of type '" "Plot const *""'"); 
  }
  arg1 = reinterpret_cast< Plot * >(argp1);
  {
    try {
      result = ((Plot const *)arg1)->getYLabel();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plot_getLegendPosition(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Plot *arg1 = (Plot *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Plot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plot_getLegendPosition" "', argument " "1"" of type '" "Plot const *""'"); 
  }
  arg1 = reinterpret_cast< Plot * >(argp1);
  {
    try {
      result = (int)((Plot const *)arg1)->getLegendPosition();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plot_isXLog(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Plot *arg1 = (Plot *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Plot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plot_isXLog" "', argument " "1"" of type '" "Plot const *""'"); 
  }
  arg1 = reinterpret_cast< Plot * >(argp1);
  {
    try {
      result = (bool)((Plot const *)arg1)->isXLog();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plot_isYLog(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Plot *arg1 = (Plot *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Plot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plot_isYLog" "', argument " "1"" of type '" "Plot const *""'"); 
  }
  arg1 = reinterpret_cast< Plot * >(argp1);
  {
    try {
      result = (bool)((Plot const *)arg1)->isYLog();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plot_getXLow(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Plot *arg1 = (Plot *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Plot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plot_getXLow" "', argument " "1"" of type '" "Plot const *""'"); 
  }
  arg1 = reinterpret_cast< Plot * >(argp1);
  {
    try {
      result = (double)((Plot const *)arg1)->getXLow();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plot_getXHigh(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Plot *arg1 = (Plot *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Plot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plot_getXHigh" "', argument " "1"" of type '" "Plot const *""'"); 
  }
  arg1 = reinterpret_cast< Plot * >(argp1);
  {
    try {
      result = (double)((Plot const *)arg1)->getXHigh();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plot_getYLow(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Plot *arg1 = (Plot *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Plot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plot_getYLow" "', argument " "1"" of type '" "Plot const *""'"); 
  }
  arg1 = reinterpret_cast< Plot * >(argp1);
  {
    try {
      result = (double)((Plot const *)arg1)->getYLow();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plot_getYHigh(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Plot *arg1 = (Plot *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Plot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plot_getYHigh" "', argument " "1"" of type '" "Plot const *""'"); 
  }
  arg1 = reinterpret_cast< Plot * >(argp1);
  {
    try {
      result = (double)((Plot const *)arg1)->getYHigh();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plot_curves_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Plot *arg1 = (Plot *) 0 ;
  std::vector< Curve,std::allocator< Curve > > *arg2 = (std::vector< Curve,std::allocator< Curve > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Plot_curves_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Plot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plot_curves_set" "', argument " "1"" of type '" "Plot *""'"); 
  }
  arg1 = reinterpret_cast< Plot * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_Curve_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Plot_curves_set" "', argument " "2"" of type '" "std::vector< Curve,std::allocator< Curve > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Curve,std::allocator< Curve > > * >(argp2);
  if (arg1) (arg1)->curves = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plot_curves_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Plot *arg1 = (Plot *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Curve,std::allocator< Curve > > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Plot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plot_curves_get" "', argument " "1"" of type '" "Plot *""'"); 
  }
  arg1 = reinterpret_cast< Plot * >(argp1);
  result = (std::vector< Curve,std::allocator< Curve > > *)& ((arg1)->curves);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Curve_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Plot(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Plot *arg1 = (Plot *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Plot, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Plot" "', argument " "1"" of type '" "Plot *""'"); 
  }
  arg1 = reinterpret_cast< Plot * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Plot_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Plot, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Plot_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Curve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Curve *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Curve *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Curve,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Curve" "', argument " "1"" of type '" "Curve const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Curve" "', argument " "1"" of type '" "Curve const &""'"); 
  }
  arg1 = reinterpret_cast< Curve * >(argp1);
  {
    try {
      result = (Curve *)new Curve((Curve const &)*arg1);
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Curve, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Curve_x_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Curve *arg1 = (Curve *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = (std::vector< double,std::allocator< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Curve_x_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Curve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Curve_x_set" "', argument " "1"" of type '" "Curve *""'"); 
  }
  arg1 = reinterpret_cast< Curve * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Curve_x_set" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  if (arg1) (arg1)->x = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Curve_x_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Curve *arg1 = (Curve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Curve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Curve_x_get" "', argument " "1"" of type '" "Curve *""'"); 
  }
  arg1 = reinterpret_cast< Curve * >(argp1);
  result = (std::vector< double,std::allocator< double > > *)& ((arg1)->x);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Curve_y_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Curve *arg1 = (Curve *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = (std::vector< double,std::allocator< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Curve_y_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Curve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Curve_y_set" "', argument " "1"" of type '" "Curve *""'"); 
  }
  arg1 = reinterpret_cast< Curve * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Curve_y_set" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  if (arg1) (arg1)->y = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Curve_y_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Curve *arg1 = (Curve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Curve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Curve_y_get" "', argument " "1"" of type '" "Curve *""'"); 
  }
  arg1 = reinterpret_cast< Curve * >(argp1);
  result = (std::vector< double,std::allocator< double > > *)& ((arg1)->y);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Curve_getLegend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Curve *arg1 = (Curve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Curve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Curve_getLegend" "', argument " "1"" of type '" "Curve const *""'"); 
  }
  arg1 = reinterpret_cast< Curve * >(argp1);
  {
    try {
      result = ((Curve const *)arg1)->getLegend();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Curve_getFormat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Curve *arg1 = (Curve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Curve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Curve_getFormat" "', argument " "1"" of type '" "Curve const *""'"); 
  }
  arg1 = reinterpret_cast< Curve * >(argp1);
  {
    try {
      result = ((Curve const *)arg1)->getFormat();
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Curve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Curve *arg1 = (Curve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Curve, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Curve" "', argument " "1"" of type '" "Curve *""'"); 
  }
  arg1 = reinterpret_cast< Curve * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (std::range_error &e) {
      SWIG_exception(SWIG_IndexError,e.what());
    }
    catch (std::runtime_error &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Curve_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Curve, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Curve_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

static PyMethodDef SwigMethods[] = {
	 { "SWIG_PyInstanceMethod_New", SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { "SWIG_PyStaticMethod_New", SWIG_PyStaticMethod_New, METH_O, NULL},
	 { "delete_SwigPyIterator", _wrap_delete_SwigPyIterator, METH_O, NULL},
	 { "SwigPyIterator_value", _wrap_SwigPyIterator_value, METH_O, NULL},
	 { "SwigPyIterator_incr", _wrap_SwigPyIterator_incr, METH_VARARGS, NULL},
	 { "SwigPyIterator_decr", _wrap_SwigPyIterator_decr, METH_VARARGS, NULL},
	 { "SwigPyIterator_distance", _wrap_SwigPyIterator_distance, METH_VARARGS, NULL},
	 { "SwigPyIterator_equal", _wrap_SwigPyIterator_equal, METH_VARARGS, NULL},
	 { "SwigPyIterator_copy", _wrap_SwigPyIterator_copy, METH_O, NULL},
	 { "SwigPyIterator_next", _wrap_SwigPyIterator_next, METH_O, NULL},
	 { "SwigPyIterator___next__", _wrap_SwigPyIterator___next__, METH_O, NULL},
	 { "SwigPyIterator_previous", _wrap_SwigPyIterator_previous, METH_O, NULL},
	 { "SwigPyIterator_advance", _wrap_SwigPyIterator_advance, METH_VARARGS, NULL},
	 { "SwigPyIterator___eq__", _wrap_SwigPyIterator___eq__, METH_VARARGS, NULL},
	 { "SwigPyIterator___ne__", _wrap_SwigPyIterator___ne__, METH_VARARGS, NULL},
	 { "SwigPyIterator___iadd__", _wrap_SwigPyIterator___iadd__, METH_VARARGS, NULL},
	 { "SwigPyIterator___isub__", _wrap_SwigPyIterator___isub__, METH_VARARGS, NULL},
	 { "SwigPyIterator___add__", _wrap_SwigPyIterator___add__, METH_VARARGS, NULL},
	 { "SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, NULL},
	 { "SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_O, NULL},
	 { "ModuleVector_iterator", _wrap_ModuleVector_iterator, METH_O, NULL},
	 { "ModuleVector___nonzero__", _wrap_ModuleVector___nonzero__, METH_O, NULL},
	 { "ModuleVector___bool__", _wrap_ModuleVector___bool__, METH_O, NULL},
	 { "ModuleVector___len__", _wrap_ModuleVector___len__, METH_O, NULL},
	 { "ModuleVector___getslice__", _wrap_ModuleVector___getslice__, METH_VARARGS, NULL},
	 { "ModuleVector___setslice__", _wrap_ModuleVector___setslice__, METH_VARARGS, NULL},
	 { "ModuleVector___delslice__", _wrap_ModuleVector___delslice__, METH_VARARGS, NULL},
	 { "ModuleVector___delitem__", _wrap_ModuleVector___delitem__, METH_VARARGS, NULL},
	 { "ModuleVector___getitem__", _wrap_ModuleVector___getitem__, METH_VARARGS, NULL},
	 { "ModuleVector___setitem__", _wrap_ModuleVector___setitem__, METH_VARARGS, NULL},
	 { "ModuleVector_pop", _wrap_ModuleVector_pop, METH_O, NULL},
	 { "ModuleVector_append", _wrap_ModuleVector_append, METH_VARARGS, NULL},
	 { "ModuleVector_empty", _wrap_ModuleVector_empty, METH_O, NULL},
	 { "ModuleVector_size", _wrap_ModuleVector_size, METH_O, NULL},
	 { "ModuleVector_swap", _wrap_ModuleVector_swap, METH_VARARGS, NULL},
	 { "ModuleVector_begin", _wrap_ModuleVector_begin, METH_O, NULL},
	 { "ModuleVector_end", _wrap_ModuleVector_end, METH_O, NULL},
	 { "ModuleVector_rbegin", _wrap_ModuleVector_rbegin, METH_O, NULL},
	 { "ModuleVector_rend", _wrap_ModuleVector_rend, METH_O, NULL},
	 { "ModuleVector_clear", _wrap_ModuleVector_clear, METH_O, NULL},
	 { "ModuleVector_get_allocator", _wrap_ModuleVector_get_allocator, METH_O, NULL},
	 { "ModuleVector_pop_back", _wrap_ModuleVector_pop_back, METH_O, NULL},
	 { "ModuleVector_erase", _wrap_ModuleVector_erase, METH_VARARGS, NULL},
	 { "new_ModuleVector", _wrap_new_ModuleVector, METH_VARARGS, NULL},
	 { "ModuleVector_push_back", _wrap_ModuleVector_push_back, METH_VARARGS, NULL},
	 { "ModuleVector_front", _wrap_ModuleVector_front, METH_O, NULL},
	 { "ModuleVector_back", _wrap_ModuleVector_back, METH_O, NULL},
	 { "ModuleVector_assign", _wrap_ModuleVector_assign, METH_VARARGS, NULL},
	 { "ModuleVector_resize", _wrap_ModuleVector_resize, METH_VARARGS, NULL},
	 { "ModuleVector_insert", _wrap_ModuleVector_insert, METH_VARARGS, NULL},
	 { "ModuleVector_reserve", _wrap_ModuleVector_reserve, METH_VARARGS, NULL},
	 { "ModuleVector_capacity", _wrap_ModuleVector_capacity, METH_O, NULL},
	 { "delete_ModuleVector", _wrap_delete_ModuleVector, METH_O, NULL},
	 { "ModuleVector_swigregister", ModuleVector_swigregister, METH_O, NULL},
	 { "ModuleVector_swiginit", ModuleVector_swiginit, METH_VARARGS, NULL},
	 { "TypeVector_iterator", _wrap_TypeVector_iterator, METH_O, NULL},
	 { "TypeVector___nonzero__", _wrap_TypeVector___nonzero__, METH_O, NULL},
	 { "TypeVector___bool__", _wrap_TypeVector___bool__, METH_O, NULL},
	 { "TypeVector___len__", _wrap_TypeVector___len__, METH_O, NULL},
	 { "TypeVector___getslice__", _wrap_TypeVector___getslice__, METH_VARARGS, NULL},
	 { "TypeVector___setslice__", _wrap_TypeVector___setslice__, METH_VARARGS, NULL},
	 { "TypeVector___delslice__", _wrap_TypeVector___delslice__, METH_VARARGS, NULL},
	 { "TypeVector___delitem__", _wrap_TypeVector___delitem__, METH_VARARGS, NULL},
	 { "TypeVector___getitem__", _wrap_TypeVector___getitem__, METH_VARARGS, NULL},
	 { "TypeVector___setitem__", _wrap_TypeVector___setitem__, METH_VARARGS, NULL},
	 { "TypeVector_pop", _wrap_TypeVector_pop, METH_O, NULL},
	 { "TypeVector_append", _wrap_TypeVector_append, METH_VARARGS, NULL},
	 { "TypeVector_empty", _wrap_TypeVector_empty, METH_O, NULL},
	 { "TypeVector_size", _wrap_TypeVector_size, METH_O, NULL},
	 { "TypeVector_swap", _wrap_TypeVector_swap, METH_VARARGS, NULL},
	 { "TypeVector_begin", _wrap_TypeVector_begin, METH_O, NULL},
	 { "TypeVector_end", _wrap_TypeVector_end, METH_O, NULL},
	 { "TypeVector_rbegin", _wrap_TypeVector_rbegin, METH_O, NULL},
	 { "TypeVector_rend", _wrap_TypeVector_rend, METH_O, NULL},
	 { "TypeVector_clear", _wrap_TypeVector_clear, METH_O, NULL},
	 { "TypeVector_get_allocator", _wrap_TypeVector_get_allocator, METH_O, NULL},
	 { "TypeVector_pop_back", _wrap_TypeVector_pop_back, METH_O, NULL},
	 { "TypeVector_erase", _wrap_TypeVector_erase, METH_VARARGS, NULL},
	 { "new_TypeVector", _wrap_new_TypeVector, METH_VARARGS, NULL},
	 { "TypeVector_push_back", _wrap_TypeVector_push_back, METH_VARARGS, NULL},
	 { "TypeVector_front", _wrap_TypeVector_front, METH_O, NULL},
	 { "TypeVector_back", _wrap_TypeVector_back, METH_O, NULL},
	 { "TypeVector_assign", _wrap_TypeVector_assign, METH_VARARGS, NULL},
	 { "TypeVector_resize", _wrap_TypeVector_resize, METH_VARARGS, NULL},
	 { "TypeVector_insert", _wrap_TypeVector_insert, METH_VARARGS, NULL},
	 { "TypeVector_reserve", _wrap_TypeVector_reserve, METH_VARARGS, NULL},
	 { "TypeVector_capacity", _wrap_TypeVector_capacity, METH_O, NULL},
	 { "delete_TypeVector", _wrap_delete_TypeVector, METH_O, NULL},
	 { "TypeVector_swigregister", TypeVector_swigregister, METH_O, NULL},
	 { "TypeVector_swiginit", TypeVector_swiginit, METH_VARARGS, NULL},
	 { "MethodVector_iterator", _wrap_MethodVector_iterator, METH_O, NULL},
	 { "MethodVector___nonzero__", _wrap_MethodVector___nonzero__, METH_O, NULL},
	 { "MethodVector___bool__", _wrap_MethodVector___bool__, METH_O, NULL},
	 { "MethodVector___len__", _wrap_MethodVector___len__, METH_O, NULL},
	 { "MethodVector___getslice__", _wrap_MethodVector___getslice__, METH_VARARGS, NULL},
	 { "MethodVector___setslice__", _wrap_MethodVector___setslice__, METH_VARARGS, NULL},
	 { "MethodVector___delslice__", _wrap_MethodVector___delslice__, METH_VARARGS, NULL},
	 { "MethodVector___delitem__", _wrap_MethodVector___delitem__, METH_VARARGS, NULL},
	 { "MethodVector___getitem__", _wrap_MethodVector___getitem__, METH_VARARGS, NULL},
	 { "MethodVector___setitem__", _wrap_MethodVector___setitem__, METH_VARARGS, NULL},
	 { "MethodVector_pop", _wrap_MethodVector_pop, METH_O, NULL},
	 { "MethodVector_append", _wrap_MethodVector_append, METH_VARARGS, NULL},
	 { "MethodVector_empty", _wrap_MethodVector_empty, METH_O, NULL},
	 { "MethodVector_size", _wrap_MethodVector_size, METH_O, NULL},
	 { "MethodVector_swap", _wrap_MethodVector_swap, METH_VARARGS, NULL},
	 { "MethodVector_begin", _wrap_MethodVector_begin, METH_O, NULL},
	 { "MethodVector_end", _wrap_MethodVector_end, METH_O, NULL},
	 { "MethodVector_rbegin", _wrap_MethodVector_rbegin, METH_O, NULL},
	 { "MethodVector_rend", _wrap_MethodVector_rend, METH_O, NULL},
	 { "MethodVector_clear", _wrap_MethodVector_clear, METH_O, NULL},
	 { "MethodVector_get_allocator", _wrap_MethodVector_get_allocator, METH_O, NULL},
	 { "MethodVector_pop_back", _wrap_MethodVector_pop_back, METH_O, NULL},
	 { "MethodVector_erase", _wrap_MethodVector_erase, METH_VARARGS, NULL},
	 { "new_MethodVector", _wrap_new_MethodVector, METH_VARARGS, NULL},
	 { "MethodVector_push_back", _wrap_MethodVector_push_back, METH_VARARGS, NULL},
	 { "MethodVector_front", _wrap_MethodVector_front, METH_O, NULL},
	 { "MethodVector_back", _wrap_MethodVector_back, METH_O, NULL},
	 { "MethodVector_assign", _wrap_MethodVector_assign, METH_VARARGS, NULL},
	 { "MethodVector_resize", _wrap_MethodVector_resize, METH_VARARGS, NULL},
	 { "MethodVector_insert", _wrap_MethodVector_insert, METH_VARARGS, NULL},
	 { "MethodVector_reserve", _wrap_MethodVector_reserve, METH_VARARGS, NULL},
	 { "MethodVector_capacity", _wrap_MethodVector_capacity, METH_O, NULL},
	 { "delete_MethodVector", _wrap_delete_MethodVector, METH_O, NULL},
	 { "MethodVector_swigregister", MethodVector_swigregister, METH_O, NULL},
	 { "MethodVector_swiginit", MethodVector_swiginit, METH_VARARGS, NULL},
	 { "InstancVector_iterator", _wrap_InstancVector_iterator, METH_O, NULL},
	 { "InstancVector___nonzero__", _wrap_InstancVector___nonzero__, METH_O, NULL},
	 { "InstancVector___bool__", _wrap_InstancVector___bool__, METH_O, NULL},
	 { "InstancVector___len__", _wrap_InstancVector___len__, METH_O, NULL},
	 { "InstancVector___getslice__", _wrap_InstancVector___getslice__, METH_VARARGS, NULL},
	 { "InstancVector___setslice__", _wrap_InstancVector___setslice__, METH_VARARGS, NULL},
	 { "InstancVector___delslice__", _wrap_InstancVector___delslice__, METH_VARARGS, NULL},
	 { "InstancVector___delitem__", _wrap_InstancVector___delitem__, METH_VARARGS, NULL},
	 { "InstancVector___getitem__", _wrap_InstancVector___getitem__, METH_VARARGS, NULL},
	 { "InstancVector___setitem__", _wrap_InstancVector___setitem__, METH_VARARGS, NULL},
	 { "InstancVector_pop", _wrap_InstancVector_pop, METH_O, NULL},
	 { "InstancVector_append", _wrap_InstancVector_append, METH_VARARGS, NULL},
	 { "InstancVector_empty", _wrap_InstancVector_empty, METH_O, NULL},
	 { "InstancVector_size", _wrap_InstancVector_size, METH_O, NULL},
	 { "InstancVector_swap", _wrap_InstancVector_swap, METH_VARARGS, NULL},
	 { "InstancVector_begin", _wrap_InstancVector_begin, METH_O, NULL},
	 { "InstancVector_end", _wrap_InstancVector_end, METH_O, NULL},
	 { "InstancVector_rbegin", _wrap_InstancVector_rbegin, METH_O, NULL},
	 { "InstancVector_rend", _wrap_InstancVector_rend, METH_O, NULL},
	 { "InstancVector_clear", _wrap_InstancVector_clear, METH_O, NULL},
	 { "InstancVector_get_allocator", _wrap_InstancVector_get_allocator, METH_O, NULL},
	 { "InstancVector_pop_back", _wrap_InstancVector_pop_back, METH_O, NULL},
	 { "InstancVector_erase", _wrap_InstancVector_erase, METH_VARARGS, NULL},
	 { "new_InstancVector", _wrap_new_InstancVector, METH_VARARGS, NULL},
	 { "InstancVector_push_back", _wrap_InstancVector_push_back, METH_VARARGS, NULL},
	 { "InstancVector_front", _wrap_InstancVector_front, METH_O, NULL},
	 { "InstancVector_back", _wrap_InstancVector_back, METH_O, NULL},
	 { "InstancVector_assign", _wrap_InstancVector_assign, METH_VARARGS, NULL},
	 { "InstancVector_resize", _wrap_InstancVector_resize, METH_VARARGS, NULL},
	 { "InstancVector_insert", _wrap_InstancVector_insert, METH_VARARGS, NULL},
	 { "InstancVector_reserve", _wrap_InstancVector_reserve, METH_VARARGS, NULL},
	 { "InstancVector_capacity", _wrap_InstancVector_capacity, METH_O, NULL},
	 { "delete_InstancVector", _wrap_delete_InstancVector, METH_O, NULL},
	 { "InstancVector_swigregister", InstancVector_swigregister, METH_O, NULL},
	 { "InstancVector_swiginit", InstancVector_swiginit, METH_VARARGS, NULL},
	 { "ExtMethodVector_iterator", _wrap_ExtMethodVector_iterator, METH_O, NULL},
	 { "ExtMethodVector___nonzero__", _wrap_ExtMethodVector___nonzero__, METH_O, NULL},
	 { "ExtMethodVector___bool__", _wrap_ExtMethodVector___bool__, METH_O, NULL},
	 { "ExtMethodVector___len__", _wrap_ExtMethodVector___len__, METH_O, NULL},
	 { "ExtMethodVector___getslice__", _wrap_ExtMethodVector___getslice__, METH_VARARGS, NULL},
	 { "ExtMethodVector___setslice__", _wrap_ExtMethodVector___setslice__, METH_VARARGS, NULL},
	 { "ExtMethodVector___delslice__", _wrap_ExtMethodVector___delslice__, METH_VARARGS, NULL},
	 { "ExtMethodVector___delitem__", _wrap_ExtMethodVector___delitem__, METH_VARARGS, NULL},
	 { "ExtMethodVector___getitem__", _wrap_ExtMethodVector___getitem__, METH_VARARGS, NULL},
	 { "ExtMethodVector___setitem__", _wrap_ExtMethodVector___setitem__, METH_VARARGS, NULL},
	 { "ExtMethodVector_pop", _wrap_ExtMethodVector_pop, METH_O, NULL},
	 { "ExtMethodVector_append", _wrap_ExtMethodVector_append, METH_VARARGS, NULL},
	 { "ExtMethodVector_empty", _wrap_ExtMethodVector_empty, METH_O, NULL},
	 { "ExtMethodVector_size", _wrap_ExtMethodVector_size, METH_O, NULL},
	 { "ExtMethodVector_swap", _wrap_ExtMethodVector_swap, METH_VARARGS, NULL},
	 { "ExtMethodVector_begin", _wrap_ExtMethodVector_begin, METH_O, NULL},
	 { "ExtMethodVector_end", _wrap_ExtMethodVector_end, METH_O, NULL},
	 { "ExtMethodVector_rbegin", _wrap_ExtMethodVector_rbegin, METH_O, NULL},
	 { "ExtMethodVector_rend", _wrap_ExtMethodVector_rend, METH_O, NULL},
	 { "ExtMethodVector_clear", _wrap_ExtMethodVector_clear, METH_O, NULL},
	 { "ExtMethodVector_get_allocator", _wrap_ExtMethodVector_get_allocator, METH_O, NULL},
	 { "ExtMethodVector_pop_back", _wrap_ExtMethodVector_pop_back, METH_O, NULL},
	 { "ExtMethodVector_erase", _wrap_ExtMethodVector_erase, METH_VARARGS, NULL},
	 { "new_ExtMethodVector", _wrap_new_ExtMethodVector, METH_VARARGS, NULL},
	 { "ExtMethodVector_push_back", _wrap_ExtMethodVector_push_back, METH_VARARGS, NULL},
	 { "ExtMethodVector_front", _wrap_ExtMethodVector_front, METH_O, NULL},
	 { "ExtMethodVector_back", _wrap_ExtMethodVector_back, METH_O, NULL},
	 { "ExtMethodVector_assign", _wrap_ExtMethodVector_assign, METH_VARARGS, NULL},
	 { "ExtMethodVector_resize", _wrap_ExtMethodVector_resize, METH_VARARGS, NULL},
	 { "ExtMethodVector_insert", _wrap_ExtMethodVector_insert, METH_VARARGS, NULL},
	 { "ExtMethodVector_reserve", _wrap_ExtMethodVector_reserve, METH_VARARGS, NULL},
	 { "ExtMethodVector_capacity", _wrap_ExtMethodVector_capacity, METH_O, NULL},
	 { "delete_ExtMethodVector", _wrap_delete_ExtMethodVector, METH_O, NULL},
	 { "ExtMethodVector_swigregister", ExtMethodVector_swigregister, METH_O, NULL},
	 { "ExtMethodVector_swiginit", ExtMethodVector_swiginit, METH_VARARGS, NULL},
	 { "SetInt_at", _wrap_SetInt_at, METH_VARARGS, NULL},
	 { "SetInt_length", _wrap_SetInt_length, METH_O, NULL},
	 { "delete_SetInt", _wrap_delete_SetInt, METH_O, NULL},
	 { "SetInt_swigregister", SetInt_swigregister, METH_O, NULL},
	 { "SetString_at", _wrap_SetString_at, METH_VARARGS, NULL},
	 { "SetString_length", _wrap_SetString_length, METH_O, NULL},
	 { "delete_SetString", _wrap_delete_SetString, METH_O, NULL},
	 { "SetString_swigregister", SetString_swigregister, METH_O, NULL},
	 { "DoubleVector_iterator", _wrap_DoubleVector_iterator, METH_O, NULL},
	 { "DoubleVector___nonzero__", _wrap_DoubleVector___nonzero__, METH_O, NULL},
	 { "DoubleVector___bool__", _wrap_DoubleVector___bool__, METH_O, NULL},
	 { "DoubleVector___len__", _wrap_DoubleVector___len__, METH_O, NULL},
	 { "DoubleVector___getslice__", _wrap_DoubleVector___getslice__, METH_VARARGS, NULL},
	 { "DoubleVector___setslice__", _wrap_DoubleVector___setslice__, METH_VARARGS, NULL},
	 { "DoubleVector___delslice__", _wrap_DoubleVector___delslice__, METH_VARARGS, NULL},
	 { "DoubleVector___delitem__", _wrap_DoubleVector___delitem__, METH_VARARGS, NULL},
	 { "DoubleVector___getitem__", _wrap_DoubleVector___getitem__, METH_VARARGS, NULL},
	 { "DoubleVector___setitem__", _wrap_DoubleVector___setitem__, METH_VARARGS, NULL},
	 { "DoubleVector_pop", _wrap_DoubleVector_pop, METH_O, NULL},
	 { "DoubleVector_append", _wrap_DoubleVector_append, METH_VARARGS, NULL},
	 { "DoubleVector_empty", _wrap_DoubleVector_empty, METH_O, NULL},
	 { "DoubleVector_size", _wrap_DoubleVector_size, METH_O, NULL},
	 { "DoubleVector_swap", _wrap_DoubleVector_swap, METH_VARARGS, NULL},
	 { "DoubleVector_begin", _wrap_DoubleVector_begin, METH_O, NULL},
	 { "DoubleVector_end", _wrap_DoubleVector_end, METH_O, NULL},
	 { "DoubleVector_rbegin", _wrap_DoubleVector_rbegin, METH_O, NULL},
	 { "DoubleVector_rend", _wrap_DoubleVector_rend, METH_O, NULL},
	 { "DoubleVector_clear", _wrap_DoubleVector_clear, METH_O, NULL},
	 { "DoubleVector_get_allocator", _wrap_DoubleVector_get_allocator, METH_O, NULL},
	 { "DoubleVector_pop_back", _wrap_DoubleVector_pop_back, METH_O, NULL},
	 { "DoubleVector_erase", _wrap_DoubleVector_erase, METH_VARARGS, NULL},
	 { "new_DoubleVector", _wrap_new_DoubleVector, METH_VARARGS, NULL},
	 { "DoubleVector_push_back", _wrap_DoubleVector_push_back, METH_VARARGS, NULL},
	 { "DoubleVector_front", _wrap_DoubleVector_front, METH_O, NULL},
	 { "DoubleVector_back", _wrap_DoubleVector_back, METH_O, NULL},
	 { "DoubleVector_assign", _wrap_DoubleVector_assign, METH_VARARGS, NULL},
	 { "DoubleVector_resize", _wrap_DoubleVector_resize, METH_VARARGS, NULL},
	 { "DoubleVector_insert", _wrap_DoubleVector_insert, METH_VARARGS, NULL},
	 { "DoubleVector_reserve", _wrap_DoubleVector_reserve, METH_VARARGS, NULL},
	 { "DoubleVector_capacity", _wrap_DoubleVector_capacity, METH_O, NULL},
	 { "delete_DoubleVector", _wrap_delete_DoubleVector, METH_O, NULL},
	 { "DoubleVector_swigregister", DoubleVector_swigregister, METH_O, NULL},
	 { "DoubleVector_swiginit", DoubleVector_swiginit, METH_VARARGS, NULL},
	 { "VectorDoubleVector_iterator", _wrap_VectorDoubleVector_iterator, METH_O, NULL},
	 { "VectorDoubleVector___nonzero__", _wrap_VectorDoubleVector___nonzero__, METH_O, NULL},
	 { "VectorDoubleVector___bool__", _wrap_VectorDoubleVector___bool__, METH_O, NULL},
	 { "VectorDoubleVector___len__", _wrap_VectorDoubleVector___len__, METH_O, NULL},
	 { "VectorDoubleVector___getslice__", _wrap_VectorDoubleVector___getslice__, METH_VARARGS, NULL},
	 { "VectorDoubleVector___setslice__", _wrap_VectorDoubleVector___setslice__, METH_VARARGS, NULL},
	 { "VectorDoubleVector___delslice__", _wrap_VectorDoubleVector___delslice__, METH_VARARGS, NULL},
	 { "VectorDoubleVector___delitem__", _wrap_VectorDoubleVector___delitem__, METH_VARARGS, NULL},
	 { "VectorDoubleVector___getitem__", _wrap_VectorDoubleVector___getitem__, METH_VARARGS, NULL},
	 { "VectorDoubleVector___setitem__", _wrap_VectorDoubleVector___setitem__, METH_VARARGS, NULL},
	 { "VectorDoubleVector_pop", _wrap_VectorDoubleVector_pop, METH_O, NULL},
	 { "VectorDoubleVector_append", _wrap_VectorDoubleVector_append, METH_VARARGS, NULL},
	 { "VectorDoubleVector_empty", _wrap_VectorDoubleVector_empty, METH_O, NULL},
	 { "VectorDoubleVector_size", _wrap_VectorDoubleVector_size, METH_O, NULL},
	 { "VectorDoubleVector_swap", _wrap_VectorDoubleVector_swap, METH_VARARGS, NULL},
	 { "VectorDoubleVector_begin", _wrap_VectorDoubleVector_begin, METH_O, NULL},
	 { "VectorDoubleVector_end", _wrap_VectorDoubleVector_end, METH_O, NULL},
	 { "VectorDoubleVector_rbegin", _wrap_VectorDoubleVector_rbegin, METH_O, NULL},
	 { "VectorDoubleVector_rend", _wrap_VectorDoubleVector_rend, METH_O, NULL},
	 { "VectorDoubleVector_clear", _wrap_VectorDoubleVector_clear, METH_O, NULL},
	 { "VectorDoubleVector_get_allocator", _wrap_VectorDoubleVector_get_allocator, METH_O, NULL},
	 { "VectorDoubleVector_pop_back", _wrap_VectorDoubleVector_pop_back, METH_O, NULL},
	 { "VectorDoubleVector_erase", _wrap_VectorDoubleVector_erase, METH_VARARGS, NULL},
	 { "new_VectorDoubleVector", _wrap_new_VectorDoubleVector, METH_VARARGS, NULL},
	 { "VectorDoubleVector_push_back", _wrap_VectorDoubleVector_push_back, METH_VARARGS, NULL},
	 { "VectorDoubleVector_front", _wrap_VectorDoubleVector_front, METH_O, NULL},
	 { "VectorDoubleVector_back", _wrap_VectorDoubleVector_back, METH_O, NULL},
	 { "VectorDoubleVector_assign", _wrap_VectorDoubleVector_assign, METH_VARARGS, NULL},
	 { "VectorDoubleVector_resize", _wrap_VectorDoubleVector_resize, METH_VARARGS, NULL},
	 { "VectorDoubleVector_insert", _wrap_VectorDoubleVector_insert, METH_VARARGS, NULL},
	 { "VectorDoubleVector_reserve", _wrap_VectorDoubleVector_reserve, METH_VARARGS, NULL},
	 { "VectorDoubleVector_capacity", _wrap_VectorDoubleVector_capacity, METH_O, NULL},
	 { "delete_VectorDoubleVector", _wrap_delete_VectorDoubleVector, METH_O, NULL},
	 { "VectorDoubleVector_swigregister", VectorDoubleVector_swigregister, METH_O, NULL},
	 { "VectorDoubleVector_swiginit", VectorDoubleVector_swiginit, METH_VARARGS, NULL},
	 { "IntVector_iterator", _wrap_IntVector_iterator, METH_O, NULL},
	 { "IntVector___nonzero__", _wrap_IntVector___nonzero__, METH_O, NULL},
	 { "IntVector___bool__", _wrap_IntVector___bool__, METH_O, NULL},
	 { "IntVector___len__", _wrap_IntVector___len__, METH_O, NULL},
	 { "IntVector___getslice__", _wrap_IntVector___getslice__, METH_VARARGS, NULL},
	 { "IntVector___setslice__", _wrap_IntVector___setslice__, METH_VARARGS, NULL},
	 { "IntVector___delslice__", _wrap_IntVector___delslice__, METH_VARARGS, NULL},
	 { "IntVector___delitem__", _wrap_IntVector___delitem__, METH_VARARGS, NULL},
	 { "IntVector___getitem__", _wrap_IntVector___getitem__, METH_VARARGS, NULL},
	 { "IntVector___setitem__", _wrap_IntVector___setitem__, METH_VARARGS, NULL},
	 { "IntVector_pop", _wrap_IntVector_pop, METH_O, NULL},
	 { "IntVector_append", _wrap_IntVector_append, METH_VARARGS, NULL},
	 { "IntVector_empty", _wrap_IntVector_empty, METH_O, NULL},
	 { "IntVector_size", _wrap_IntVector_size, METH_O, NULL},
	 { "IntVector_swap", _wrap_IntVector_swap, METH_VARARGS, NULL},
	 { "IntVector_begin", _wrap_IntVector_begin, METH_O, NULL},
	 { "IntVector_end", _wrap_IntVector_end, METH_O, NULL},
	 { "IntVector_rbegin", _wrap_IntVector_rbegin, METH_O, NULL},
	 { "IntVector_rend", _wrap_IntVector_rend, METH_O, NULL},
	 { "IntVector_clear", _wrap_IntVector_clear, METH_O, NULL},
	 { "IntVector_get_allocator", _wrap_IntVector_get_allocator, METH_O, NULL},
	 { "IntVector_pop_back", _wrap_IntVector_pop_back, METH_O, NULL},
	 { "IntVector_erase", _wrap_IntVector_erase, METH_VARARGS, NULL},
	 { "new_IntVector", _wrap_new_IntVector, METH_VARARGS, NULL},
	 { "IntVector_push_back", _wrap_IntVector_push_back, METH_VARARGS, NULL},
	 { "IntVector_front", _wrap_IntVector_front, METH_O, NULL},
	 { "IntVector_back", _wrap_IntVector_back, METH_O, NULL},
	 { "IntVector_assign", _wrap_IntVector_assign, METH_VARARGS, NULL},
	 { "IntVector_resize", _wrap_IntVector_resize, METH_VARARGS, NULL},
	 { "IntVector_insert", _wrap_IntVector_insert, METH_VARARGS, NULL},
	 { "IntVector_reserve", _wrap_IntVector_reserve, METH_VARARGS, NULL},
	 { "IntVector_capacity", _wrap_IntVector_capacity, METH_O, NULL},
	 { "delete_IntVector", _wrap_delete_IntVector, METH_O, NULL},
	 { "IntVector_swigregister", IntVector_swigregister, METH_O, NULL},
	 { "IntVector_swiginit", IntVector_swiginit, METH_VARARGS, NULL},
	 { "CurveVector_iterator", _wrap_CurveVector_iterator, METH_O, NULL},
	 { "CurveVector___nonzero__", _wrap_CurveVector___nonzero__, METH_O, NULL},
	 { "CurveVector___bool__", _wrap_CurveVector___bool__, METH_O, NULL},
	 { "CurveVector___len__", _wrap_CurveVector___len__, METH_O, NULL},
	 { "CurveVector___getslice__", _wrap_CurveVector___getslice__, METH_VARARGS, NULL},
	 { "CurveVector___setslice__", _wrap_CurveVector___setslice__, METH_VARARGS, NULL},
	 { "CurveVector___delslice__", _wrap_CurveVector___delslice__, METH_VARARGS, NULL},
	 { "CurveVector___delitem__", _wrap_CurveVector___delitem__, METH_VARARGS, NULL},
	 { "CurveVector___getitem__", _wrap_CurveVector___getitem__, METH_VARARGS, NULL},
	 { "CurveVector___setitem__", _wrap_CurveVector___setitem__, METH_VARARGS, NULL},
	 { "CurveVector_pop", _wrap_CurveVector_pop, METH_O, NULL},
	 { "CurveVector_append", _wrap_CurveVector_append, METH_VARARGS, NULL},
	 { "CurveVector_empty", _wrap_CurveVector_empty, METH_O, NULL},
	 { "CurveVector_size", _wrap_CurveVector_size, METH_O, NULL},
	 { "CurveVector_swap", _wrap_CurveVector_swap, METH_VARARGS, NULL},
	 { "CurveVector_begin", _wrap_CurveVector_begin, METH_O, NULL},
	 { "CurveVector_end", _wrap_CurveVector_end, METH_O, NULL},
	 { "CurveVector_rbegin", _wrap_CurveVector_rbegin, METH_O, NULL},
	 { "CurveVector_rend", _wrap_CurveVector_rend, METH_O, NULL},
	 { "CurveVector_clear", _wrap_CurveVector_clear, METH_O, NULL},
	 { "CurveVector_get_allocator", _wrap_CurveVector_get_allocator, METH_O, NULL},
	 { "CurveVector_pop_back", _wrap_CurveVector_pop_back, METH_O, NULL},
	 { "CurveVector_erase", _wrap_CurveVector_erase, METH_VARARGS, NULL},
	 { "new_CurveVector", _wrap_new_CurveVector, METH_VARARGS, NULL},
	 { "CurveVector_push_back", _wrap_CurveVector_push_back, METH_VARARGS, NULL},
	 { "CurveVector_front", _wrap_CurveVector_front, METH_O, NULL},
	 { "CurveVector_back", _wrap_CurveVector_back, METH_O, NULL},
	 { "CurveVector_assign", _wrap_CurveVector_assign, METH_VARARGS, NULL},
	 { "CurveVector_insert", _wrap_CurveVector_insert, METH_VARARGS, NULL},
	 { "CurveVector_reserve", _wrap_CurveVector_reserve, METH_VARARGS, NULL},
	 { "CurveVector_capacity", _wrap_CurveVector_capacity, METH_O, NULL},
	 { "delete_CurveVector", _wrap_delete_CurveVector, METH_O, NULL},
	 { "CurveVector_swigregister", CurveVector_swigregister, METH_O, NULL},
	 { "CurveVector_swiginit", CurveVector_swiginit, METH_VARARGS, NULL},
	 { "StringVector_iterator", _wrap_StringVector_iterator, METH_O, NULL},
	 { "StringVector___nonzero__", _wrap_StringVector___nonzero__, METH_O, NULL},
	 { "StringVector___bool__", _wrap_StringVector___bool__, METH_O, NULL},
	 { "StringVector___len__", _wrap_StringVector___len__, METH_O, NULL},
	 { "StringVector___getslice__", _wrap_StringVector___getslice__, METH_VARARGS, NULL},
	 { "StringVector___setslice__", _wrap_StringVector___setslice__, METH_VARARGS, NULL},
	 { "StringVector___delslice__", _wrap_StringVector___delslice__, METH_VARARGS, NULL},
	 { "StringVector___delitem__", _wrap_StringVector___delitem__, METH_VARARGS, NULL},
	 { "StringVector___getitem__", _wrap_StringVector___getitem__, METH_VARARGS, NULL},
	 { "StringVector___setitem__", _wrap_StringVector___setitem__, METH_VARARGS, NULL},
	 { "StringVector_pop", _wrap_StringVector_pop, METH_O, NULL},
	 { "StringVector_append", _wrap_StringVector_append, METH_VARARGS, NULL},
	 { "StringVector_empty", _wrap_StringVector_empty, METH_O, NULL},
	 { "StringVector_size", _wrap_StringVector_size, METH_O, NULL},
	 { "StringVector_swap", _wrap_StringVector_swap, METH_VARARGS, NULL},
	 { "StringVector_begin", _wrap_StringVector_begin, METH_O, NULL},
	 { "StringVector_end", _wrap_StringVector_end, METH_O, NULL},
	 { "StringVector_rbegin", _wrap_StringVector_rbegin, METH_O, NULL},
	 { "StringVector_rend", _wrap_StringVector_rend, METH_O, NULL},
	 { "StringVector_clear", _wrap_StringVector_clear, METH_O, NULL},
	 { "StringVector_get_allocator", _wrap_StringVector_get_allocator, METH_O, NULL},
	 { "StringVector_pop_back", _wrap_StringVector_pop_back, METH_O, NULL},
	 { "StringVector_erase", _wrap_StringVector_erase, METH_VARARGS, NULL},
	 { "new_StringVector", _wrap_new_StringVector, METH_VARARGS, NULL},
	 { "StringVector_push_back", _wrap_StringVector_push_back, METH_VARARGS, NULL},
	 { "StringVector_front", _wrap_StringVector_front, METH_O, NULL},
	 { "StringVector_back", _wrap_StringVector_back, METH_O, NULL},
	 { "StringVector_assign", _wrap_StringVector_assign, METH_VARARGS, NULL},
	 { "StringVector_resize", _wrap_StringVector_resize, METH_VARARGS, NULL},
	 { "StringVector_insert", _wrap_StringVector_insert, METH_VARARGS, NULL},
	 { "StringVector_reserve", _wrap_StringVector_reserve, METH_VARARGS, NULL},
	 { "StringVector_capacity", _wrap_StringVector_capacity, METH_O, NULL},
	 { "delete_StringVector", _wrap_delete_StringVector, METH_O, NULL},
	 { "StringVector_swigregister", StringVector_swigregister, METH_O, NULL},
	 { "StringVector_swiginit", StringVector_swiginit, METH_VARARGS, NULL},
	 { "IntStringMap_iterator", _wrap_IntStringMap_iterator, METH_O, NULL},
	 { "IntStringMap___nonzero__", _wrap_IntStringMap___nonzero__, METH_O, NULL},
	 { "IntStringMap___bool__", _wrap_IntStringMap___bool__, METH_O, NULL},
	 { "IntStringMap___len__", _wrap_IntStringMap___len__, METH_O, NULL},
	 { "IntStringMap___getitem__", _wrap_IntStringMap___getitem__, METH_VARARGS, NULL},
	 { "IntStringMap___delitem__", _wrap_IntStringMap___delitem__, METH_VARARGS, NULL},
	 { "IntStringMap_has_key", _wrap_IntStringMap_has_key, METH_VARARGS, NULL},
	 { "IntStringMap_keys", _wrap_IntStringMap_keys, METH_O, NULL},
	 { "IntStringMap_values", _wrap_IntStringMap_values, METH_O, NULL},
	 { "IntStringMap_items", _wrap_IntStringMap_items, METH_O, NULL},
	 { "IntStringMap___contains__", _wrap_IntStringMap___contains__, METH_VARARGS, NULL},
	 { "IntStringMap_key_iterator", _wrap_IntStringMap_key_iterator, METH_O, NULL},
	 { "IntStringMap_value_iterator", _wrap_IntStringMap_value_iterator, METH_O, NULL},
	 { "IntStringMap___setitem__", _wrap_IntStringMap___setitem__, METH_VARARGS, NULL},
	 { "IntStringMap_asdict", _wrap_IntStringMap_asdict, METH_O, NULL},
	 { "new_IntStringMap", _wrap_new_IntStringMap, METH_VARARGS, NULL},
	 { "IntStringMap_empty", _wrap_IntStringMap_empty, METH_O, NULL},
	 { "IntStringMap_size", _wrap_IntStringMap_size, METH_O, NULL},
	 { "IntStringMap_swap", _wrap_IntStringMap_swap, METH_VARARGS, NULL},
	 { "IntStringMap_begin", _wrap_IntStringMap_begin, METH_O, NULL},
	 { "IntStringMap_end", _wrap_IntStringMap_end, METH_O, NULL},
	 { "IntStringMap_rbegin", _wrap_IntStringMap_rbegin, METH_O, NULL},
	 { "IntStringMap_rend", _wrap_IntStringMap_rend, METH_O, NULL},
	 { "IntStringMap_clear", _wrap_IntStringMap_clear, METH_O, NULL},
	 { "IntStringMap_get_allocator", _wrap_IntStringMap_get_allocator, METH_O, NULL},
	 { "IntStringMap_count", _wrap_IntStringMap_count, METH_VARARGS, NULL},
	 { "IntStringMap_erase", _wrap_IntStringMap_erase, METH_VARARGS, NULL},
	 { "IntStringMap_find", _wrap_IntStringMap_find, METH_VARARGS, NULL},
	 { "IntStringMap_lower_bound", _wrap_IntStringMap_lower_bound, METH_VARARGS, NULL},
	 { "IntStringMap_upper_bound", _wrap_IntStringMap_upper_bound, METH_VARARGS, NULL},
	 { "delete_IntStringMap", _wrap_delete_IntStringMap, METH_O, NULL},
	 { "IntStringMap_swigregister", IntStringMap_swigregister, METH_O, NULL},
	 { "IntStringMap_swiginit", IntStringMap_swiginit, METH_VARARGS, NULL},
	 { "AnnotationVector_iterator", _wrap_AnnotationVector_iterator, METH_O, NULL},
	 { "AnnotationVector___nonzero__", _wrap_AnnotationVector___nonzero__, METH_O, NULL},
	 { "AnnotationVector___bool__", _wrap_AnnotationVector___bool__, METH_O, NULL},
	 { "AnnotationVector___len__", _wrap_AnnotationVector___len__, METH_O, NULL},
	 { "AnnotationVector___getslice__", _wrap_AnnotationVector___getslice__, METH_VARARGS, NULL},
	 { "AnnotationVector___setslice__", _wrap_AnnotationVector___setslice__, METH_VARARGS, NULL},
	 { "AnnotationVector___delslice__", _wrap_AnnotationVector___delslice__, METH_VARARGS, NULL},
	 { "AnnotationVector___delitem__", _wrap_AnnotationVector___delitem__, METH_VARARGS, NULL},
	 { "AnnotationVector___getitem__", _wrap_AnnotationVector___getitem__, METH_VARARGS, NULL},
	 { "AnnotationVector___setitem__", _wrap_AnnotationVector___setitem__, METH_VARARGS, NULL},
	 { "AnnotationVector_pop", _wrap_AnnotationVector_pop, METH_O, NULL},
	 { "AnnotationVector_append", _wrap_AnnotationVector_append, METH_VARARGS, NULL},
	 { "AnnotationVector_empty", _wrap_AnnotationVector_empty, METH_O, NULL},
	 { "AnnotationVector_size", _wrap_AnnotationVector_size, METH_O, NULL},
	 { "AnnotationVector_swap", _wrap_AnnotationVector_swap, METH_VARARGS, NULL},
	 { "AnnotationVector_begin", _wrap_AnnotationVector_begin, METH_O, NULL},
	 { "AnnotationVector_end", _wrap_AnnotationVector_end, METH_O, NULL},
	 { "AnnotationVector_rbegin", _wrap_AnnotationVector_rbegin, METH_O, NULL},
	 { "AnnotationVector_rend", _wrap_AnnotationVector_rend, METH_O, NULL},
	 { "AnnotationVector_clear", _wrap_AnnotationVector_clear, METH_O, NULL},
	 { "AnnotationVector_get_allocator", _wrap_AnnotationVector_get_allocator, METH_O, NULL},
	 { "AnnotationVector_pop_back", _wrap_AnnotationVector_pop_back, METH_O, NULL},
	 { "AnnotationVector_erase", _wrap_AnnotationVector_erase, METH_VARARGS, NULL},
	 { "new_AnnotationVector", _wrap_new_AnnotationVector, METH_VARARGS, NULL},
	 { "AnnotationVector_push_back", _wrap_AnnotationVector_push_back, METH_VARARGS, NULL},
	 { "AnnotationVector_front", _wrap_AnnotationVector_front, METH_O, NULL},
	 { "AnnotationVector_back", _wrap_AnnotationVector_back, METH_O, NULL},
	 { "AnnotationVector_assign", _wrap_AnnotationVector_assign, METH_VARARGS, NULL},
	 { "AnnotationVector_resize", _wrap_AnnotationVector_resize, METH_VARARGS, NULL},
	 { "AnnotationVector_insert", _wrap_AnnotationVector_insert, METH_VARARGS, NULL},
	 { "AnnotationVector_reserve", _wrap_AnnotationVector_reserve, METH_VARARGS, NULL},
	 { "AnnotationVector_capacity", _wrap_AnnotationVector_capacity, METH_O, NULL},
	 { "delete_AnnotationVector", _wrap_delete_AnnotationVector, METH_O, NULL},
	 { "AnnotationVector_swigregister", AnnotationVector_swigregister, METH_O, NULL},
	 { "AnnotationVector_swiginit", AnnotationVector_swiginit, METH_VARARGS, NULL},
	 { "UnitsVector_iterator", _wrap_UnitsVector_iterator, METH_O, NULL},
	 { "UnitsVector___nonzero__", _wrap_UnitsVector___nonzero__, METH_O, NULL},
	 { "UnitsVector___bool__", _wrap_UnitsVector___bool__, METH_O, NULL},
	 { "UnitsVector___len__", _wrap_UnitsVector___len__, METH_O, NULL},
	 { "UnitsVector___getslice__", _wrap_UnitsVector___getslice__, METH_VARARGS, NULL},
	 { "UnitsVector___setslice__", _wrap_UnitsVector___setslice__, METH_VARARGS, NULL},
	 { "UnitsVector___delslice__", _wrap_UnitsVector___delslice__, METH_VARARGS, NULL},
	 { "UnitsVector___delitem__", _wrap_UnitsVector___delitem__, METH_VARARGS, NULL},
	 { "UnitsVector___getitem__", _wrap_UnitsVector___getitem__, METH_VARARGS, NULL},
	 { "UnitsVector___setitem__", _wrap_UnitsVector___setitem__, METH_VARARGS, NULL},
	 { "UnitsVector_pop", _wrap_UnitsVector_pop, METH_O, NULL},
	 { "UnitsVector_append", _wrap_UnitsVector_append, METH_VARARGS, NULL},
	 { "UnitsVector_empty", _wrap_UnitsVector_empty, METH_O, NULL},
	 { "UnitsVector_size", _wrap_UnitsVector_size, METH_O, NULL},
	 { "UnitsVector_swap", _wrap_UnitsVector_swap, METH_VARARGS, NULL},
	 { "UnitsVector_begin", _wrap_UnitsVector_begin, METH_O, NULL},
	 { "UnitsVector_end", _wrap_UnitsVector_end, METH_O, NULL},
	 { "UnitsVector_rbegin", _wrap_UnitsVector_rbegin, METH_O, NULL},
	 { "UnitsVector_rend", _wrap_UnitsVector_rend, METH_O, NULL},
	 { "UnitsVector_clear", _wrap_UnitsVector_clear, METH_O, NULL},
	 { "UnitsVector_get_allocator", _wrap_UnitsVector_get_allocator, METH_O, NULL},
	 { "UnitsVector_pop_back", _wrap_UnitsVector_pop_back, METH_O, NULL},
	 { "UnitsVector_erase", _wrap_UnitsVector_erase, METH_VARARGS, NULL},
	 { "new_UnitsVector", _wrap_new_UnitsVector, METH_VARARGS, NULL},
	 { "UnitsVector_push_back", _wrap_UnitsVector_push_back, METH_VARARGS, NULL},
	 { "UnitsVector_front", _wrap_UnitsVector_front, METH_O, NULL},
	 { "UnitsVector_back", _wrap_UnitsVector_back, METH_O, NULL},
	 { "UnitsVector_assign", _wrap_UnitsVector_assign, METH_VARARGS, NULL},
	 { "UnitsVector_resize", _wrap_UnitsVector_resize, METH_VARARGS, NULL},
	 { "UnitsVector_insert", _wrap_UnitsVector_insert, METH_VARARGS, NULL},
	 { "UnitsVector_reserve", _wrap_UnitsVector_reserve, METH_VARARGS, NULL},
	 { "UnitsVector_capacity", _wrap_UnitsVector_capacity, METH_O, NULL},
	 { "delete_UnitsVector", _wrap_delete_UnitsVector, METH_O, NULL},
	 { "UnitsVector_swigregister", UnitsVector_swigregister, METH_O, NULL},
	 { "UnitsVector_swiginit", UnitsVector_swiginit, METH_VARARGS, NULL},
	 { "TypeSet_iterator", _wrap_TypeSet_iterator, METH_O, NULL},
	 { "TypeSet___nonzero__", _wrap_TypeSet___nonzero__, METH_O, NULL},
	 { "TypeSet___bool__", _wrap_TypeSet___bool__, METH_O, NULL},
	 { "TypeSet___len__", _wrap_TypeSet___len__, METH_O, NULL},
	 { "TypeSet_append", _wrap_TypeSet_append, METH_VARARGS, NULL},
	 { "TypeSet___contains__", _wrap_TypeSet___contains__, METH_VARARGS, NULL},
	 { "TypeSet___getitem__", _wrap_TypeSet___getitem__, METH_VARARGS, NULL},
	 { "TypeSet_add", _wrap_TypeSet_add, METH_VARARGS, NULL},
	 { "TypeSet_discard", _wrap_TypeSet_discard, METH_VARARGS, NULL},
	 { "new_TypeSet", _wrap_new_TypeSet, METH_VARARGS, NULL},
	 { "TypeSet_empty", _wrap_TypeSet_empty, METH_O, NULL},
	 { "TypeSet_size", _wrap_TypeSet_size, METH_O, NULL},
	 { "TypeSet_clear", _wrap_TypeSet_clear, METH_O, NULL},
	 { "TypeSet_swap", _wrap_TypeSet_swap, METH_VARARGS, NULL},
	 { "TypeSet_count", _wrap_TypeSet_count, METH_VARARGS, NULL},
	 { "TypeSet_begin", _wrap_TypeSet_begin, METH_O, NULL},
	 { "TypeSet_end", _wrap_TypeSet_end, METH_O, NULL},
	 { "TypeSet_rbegin", _wrap_TypeSet_rbegin, METH_O, NULL},
	 { "TypeSet_rend", _wrap_TypeSet_rend, METH_O, NULL},
	 { "TypeSet_erase", _wrap_TypeSet_erase, METH_VARARGS, NULL},
	 { "TypeSet_find", _wrap_TypeSet_find, METH_VARARGS, NULL},
	 { "TypeSet_lower_bound", _wrap_TypeSet_lower_bound, METH_VARARGS, NULL},
	 { "TypeSet_upper_bound", _wrap_TypeSet_upper_bound, METH_VARARGS, NULL},
	 { "TypeSet_equal_range", _wrap_TypeSet_equal_range, METH_VARARGS, NULL},
	 { "TypeSet_insert", _wrap_TypeSet_insert, METH_VARARGS, NULL},
	 { "delete_TypeSet", _wrap_delete_TypeSet, METH_O, NULL},
	 { "TypeSet_swigregister", TypeSet_swigregister, METH_O, NULL},
	 { "TypeSet_swiginit", TypeSet_swiginit, METH_VARARGS, NULL},
	 { "Reporter_setErrorCallback", _wrap_Reporter_setErrorCallback, METH_VARARGS, NULL},
	 { "Reporter_setPythonErrorCallback", _wrap_Reporter_setPythonErrorCallback, METH_VARARGS, NULL},
	 { "Reporter_clearPythonErrorCallback", _wrap_Reporter_clearPythonErrorCallback, METH_O, NULL},
	 { "Reporter_reportError", _wrap_Reporter_reportError, METH_VARARGS, NULL},
	 { "Reporter_reportNote", _wrap_Reporter_reportNote, METH_VARARGS, NULL},
	 { "Reporter_reportWarning", _wrap_Reporter_reportWarning, METH_VARARGS, NULL},
	 { "Reporter_reportSuccess", _wrap_Reporter_reportSuccess, METH_VARARGS, NULL},
	 { "Reporter_swigregister", Reporter_swigregister, METH_O, NULL},
	 { "getReporter", _wrap_getReporter, METH_NOARGS, NULL},
	 { "Dimensions_getBaseUnit", _wrap_Dimensions_getBaseUnit, METH_O, NULL},
	 { "new_Dimensions", _wrap_new_Dimensions, METH_VARARGS, NULL},
	 { "Dimensions_getInternalType", _wrap_Dimensions_getInternalType, METH_O, NULL},
	 { "Dimensions_toString", _wrap_Dimensions_toString, METH_O, NULL},
	 { "Dimensions___lt__", _wrap_Dimensions___lt__, METH_VARARGS, NULL},
	 { "Dimensions___eq__", _wrap_Dimensions___eq__, METH_VARARGS, NULL},
	 { "Dimensions___ne__", _wrap_Dimensions___ne__, METH_VARARGS, NULL},
	 { "Dimensions_isDimensionless", _wrap_Dimensions_isDimensionless, METH_O, NULL},
	 { "Dimensions_isWild", _wrap_Dimensions_isWild, METH_O, NULL},
	 { "Dimensions_getFractionNumerator", _wrap_Dimensions_getFractionNumerator, METH_VARARGS, NULL},
	 { "Dimensions_getFractionDenominator", _wrap_Dimensions_getFractionDenominator, METH_VARARGS, NULL},
	 { "delete_Dimensions", _wrap_delete_Dimensions, METH_O, NULL},
	 { "Dimensions_swigregister", Dimensions_swigregister, METH_O, NULL},
	 { "Dimensions_swiginit", Dimensions_swiginit, METH_VARARGS, NULL},
	 { "new_Units", _wrap_new_Units, METH_VARARGS, NULL},
	 { "Units_getName", _wrap_Units_getName, METH_O, NULL},
	 { "Units_getDimensions", _wrap_Units_getDimensions, METH_O, NULL},
	 { "Units_getConversion", _wrap_Units_getConversion, METH_O, NULL},
	 { "Units___eq__", _wrap_Units___eq__, METH_VARARGS, NULL},
	 { "delete_Units", _wrap_delete_Units, METH_O, NULL},
	 { "Units_swigregister", Units_swigregister, METH_O, NULL},
	 { "Units_swiginit", Units_swiginit, METH_VARARGS, NULL},
	 { "new_Library", _wrap_new_Library, METH_VARARGS, NULL},
	 { "delete_Library", _wrap_delete_Library, METH_O, NULL},
	 { "Library_load", _wrap_Library_load, METH_VARARGS, NULL},
	 { "Library_loadString", _wrap_Library_loadString, METH_VARARGS, NULL},
	 { "Library_getLoadErrorMessage", _wrap_Library_getLoadErrorMessage, METH_O, NULL},
	 { "Library_listModules", _wrap_Library_listModules, METH_VARARGS, NULL},
	 { "Library_findType", _wrap_Library_findType, METH_VARARGS, NULL},
	 { "Library_getModules", _wrap_Library_getModules, METH_VARARGS, NULL},
	 { "Library_getModuleTypes", _wrap_Library_getModuleTypes, METH_VARARGS, NULL},
	 { "Library_getExtMethods", _wrap_Library_getExtMethods, METH_O, NULL},
	 { "Library_extMethodTraverse", _wrap_Library_extMethodTraverse, METH_VARARGS, NULL},
	 { "Library_appendToExtMethodVector", _wrap_Library_appendToExtMethodVector, METH_VARARGS, NULL},
	 { "Library_clear", _wrap_Library_clear, METH_O, NULL},
	 { "Library_getAnnotationDatabase", _wrap_Library_getAnnotationDatabase, METH_O, NULL},
	 { "Library_getUnits", _wrap_Library_getUnits, METH_O, NULL},
	 { "Library_getRealAtomTypes", _wrap_Library_getRealAtomTypes, METH_O, NULL},
	 { "Library_swigregister", Library_swigregister, METH_O, NULL},
	 { "Library_swiginit", Library_swiginit, METH_VARARGS, NULL},
	 { "new_SymChar", _wrap_new_SymChar, METH_O, NULL},
	 { "SymChar_toString", _wrap_SymChar_toString, METH_O, NULL},
	 { "SymChar___repr__", _wrap_SymChar___repr__, METH_O, NULL},
	 { "delete_SymChar", _wrap_delete_SymChar, METH_O, NULL},
	 { "SymChar_swigregister", SymChar_swigregister, METH_O, NULL},
	 { "SymChar_swiginit", SymChar_swiginit, METH_VARARGS, NULL},
	 { "Module_getName", _wrap_Module_getName, METH_O, NULL},
	 { "Module_getFilename", _wrap_Module_getFilename, METH_O, NULL},
	 { "Module_getMtime", _wrap_Module_getMtime, METH_O, NULL},
	 { "new_Module", _wrap_new_Module, METH_NOARGS, NULL},
	 { "delete_Module", _wrap_delete_Module, METH_O, NULL},
	 { "Module_swigregister", Module_swigregister, METH_O, NULL},
	 { "Module_swiginit", Module_swiginit, METH_VARARGS, NULL},
	 { "new_Method", _wrap_new_Method, METH_VARARGS, NULL},
	 { "delete_Method", _wrap_delete_Method, METH_O, NULL},
	 { "Method_getInternalType", _wrap_Method_getInternalType, METH_O, NULL},
	 { "Method_getName", _wrap_Method_getName, METH_O, NULL},
	 { "Method_getSym", _wrap_Method_getSym, METH_O, NULL},
	 { "Method_swigregister", Method_swigregister, METH_O, NULL},
	 { "Method_swiginit", Method_swiginit, METH_VARARGS, NULL},
	 { "new_Name", _wrap_new_Name, METH_O, NULL},
	 { "Name_getName", _wrap_Name_getName, METH_O, NULL},
	 { "delete_Name", _wrap_delete_Name, METH_O, NULL},
	 { "Name_swigregister", Name_swigregister, METH_O, NULL},
	 { "Name_swiginit", Name_swiginit, METH_VARARGS, NULL},
	 { "Compiler_instance", _wrap_Compiler_instance, METH_NOARGS, NULL},
	 { "Compiler_getUseRelationSharing", _wrap_Compiler_getUseRelationSharing, METH_O, NULL},
	 { "Compiler_setUseRelationSharing", _wrap_Compiler_setUseRelationSharing, METH_VARARGS, NULL},
	 { "Compiler_setBinaryCompilation", _wrap_Compiler_setBinaryCompilation, METH_VARARGS, NULL},
	 { "Compiler_setVerbosity", _wrap_Compiler_setVerbosity, METH_VARARGS, NULL},
	 { "Compiler_swigregister", Compiler_swigregister, METH_O, NULL},
	 { "getCompiler", _wrap_getCompiler, METH_NOARGS, NULL},
	 { "new_Type", _wrap_new_Type, METH_VARARGS, NULL},
	 { "Type_getName", _wrap_Type_getName, METH_O, NULL},
	 { "Type_getParameterCount", _wrap_Type_getParameterCount, METH_O, NULL},
	 { "Type_getInternalType", _wrap_Type_getInternalType, METH_O, NULL},
	 { "Type_getSimulation", _wrap_Type_getSimulation, METH_VARARGS, NULL},
	 { "Type_getDimensions", _wrap_Type_getDimensions, METH_O, NULL},
	 { "Type_getMethods", _wrap_Type_getMethods, METH_O, NULL},
	 { "Type_getMethod", _wrap_Type_getMethod, METH_VARARGS, NULL},
	 { "Type_isRefinedSolverVar", _wrap_Type_isRefinedSolverVar, METH_O, NULL},
	 { "Type_isRefinedAtom", _wrap_Type_isRefinedAtom, METH_O, NULL},
	 { "Type_isRefinedReal", _wrap_Type_isRefinedReal, METH_O, NULL},
	 { "Type_isRefinedConstant", _wrap_Type_isRefinedConstant, METH_O, NULL},
	 { "Type_isFundamental", _wrap_Type_isFundamental, METH_O, NULL},
	 { "Type_isModel", _wrap_Type_isModel, METH_O, NULL},
	 { "Type_hasParameters", _wrap_Type_hasParameters, METH_O, NULL},
	 { "Type_findMember", _wrap_Type_findMember, METH_VARARGS, NULL},
	 { "Type_getModule", _wrap_Type_getModule, METH_O, NULL},
	 { "Type___lt__", _wrap_Type___lt__, METH_VARARGS, NULL},
	 { "Type___repr__", _wrap_Type___repr__, METH_O, NULL},
	 { "delete_Type", _wrap_delete_Type, METH_O, NULL},
	 { "Type_swigregister", Type_swigregister, METH_O, NULL},
	 { "Type_swiginit", Type_swiginit, METH_VARARGS, NULL},
	 { "new_Instance", _wrap_new_Instance, METH_VARARGS, NULL},
	 { "delete_Instance", _wrap_delete_Instance, METH_O, NULL},
	 { "Instance_getChildren", _wrap_Instance_getChildren, METH_O, NULL},
	 { "Instance_getKindStr", _wrap_Instance_getKindStr, METH_O, NULL},
	 { "Instance_getName", _wrap_Instance_getName, METH_O, NULL},
	 { "Instance_getType", _wrap_Instance_getType, METH_O, NULL},
	 { "Instance_isAtom", _wrap_Instance_isAtom, METH_O, NULL},
	 { "Instance_isFixed", _wrap_Instance_isFixed, METH_O, NULL},
	 { "Instance_isIncluded", _wrap_Instance_isIncluded, METH_O, NULL},
	 { "Instance_isFund", _wrap_Instance_isFund, METH_O, NULL},
	 { "Instance_isConst", _wrap_Instance_isConst, METH_O, NULL},
	 { "Instance_isAssigned", _wrap_Instance_isAssigned, METH_O, NULL},
	 { "Instance_isCompound", _wrap_Instance_isCompound, METH_O, NULL},
	 { "Instance_isRelation", _wrap_Instance_isRelation, METH_O, NULL},
	 { "Instance_isLogicalRelation", _wrap_Instance_isLogicalRelation, METH_O, NULL},
	 { "Instance_isWhen", _wrap_Instance_isWhen, METH_O, NULL},
	 { "Instance_isSet", _wrap_Instance_isSet, METH_O, NULL},
	 { "Instance_isSetInt", _wrap_Instance_isSetInt, METH_O, NULL},
	 { "Instance_isSetString", _wrap_Instance_isSetString, METH_O, NULL},
	 { "Instance_isSetEmpty", _wrap_Instance_isSetEmpty, METH_O, NULL},
	 { "Instance_isArray", _wrap_Instance_isArray, METH_O, NULL},
	 { "Instance_isDefined", _wrap_Instance_isDefined, METH_O, NULL},
	 { "Instance_isBool", _wrap_Instance_isBool, METH_O, NULL},
	 { "Instance_isInt", _wrap_Instance_isInt, METH_O, NULL},
	 { "Instance_isSymbol", _wrap_Instance_isSymbol, METH_O, NULL},
	 { "Instance_isReal", _wrap_Instance_isReal, METH_O, NULL},
	 { "Instance_isModel", _wrap_Instance_isModel, METH_O, NULL},
	 { "Instance_getRealValue", _wrap_Instance_getRealValue, METH_O, NULL},
	 { "Instance_isDimensionless", _wrap_Instance_isDimensionless, METH_O, NULL},
	 { "Instance_getDimensions", _wrap_Instance_getDimensions, METH_O, NULL},
	 { "Instance_getBoolValue", _wrap_Instance_getBoolValue, METH_O, NULL},
	 { "Instance_getIntValue", _wrap_Instance_getIntValue, METH_O, NULL},
	 { "Instance_getSymbolValue", _wrap_Instance_getSymbolValue, METH_O, NULL},
	 { "Instance_getValueAsString", _wrap_Instance_getValueAsString, METH_O, NULL},
	 { "Instance_getWhenAsString", _wrap_Instance_getWhenAsString, METH_VARARGS, NULL},
	 { "Instance_getLogrelAsString", _wrap_Instance_getLogrelAsString, METH_VARARGS, NULL},
	 { "Instance_getRelationAsString", _wrap_Instance_getRelationAsString, METH_VARARGS, NULL},
	 { "Instance_getResidual", _wrap_Instance_getResidual, METH_O, NULL},
	 { "Instance_getLogicalResidual", _wrap_Instance_getLogicalResidual, METH_O, NULL},
	 { "Instance_getPlot", _wrap_Instance_getPlot, METH_O, NULL},
	 { "Instance_isPlottable", _wrap_Instance_isPlottable, METH_O, NULL},
	 { "Instance_getSetIntValue", _wrap_Instance_getSetIntValue, METH_O, NULL},
	 { "Instance_getSetStringValue", _wrap_Instance_getSetStringValue, METH_O, NULL},
	 { "Instance_isChildless", _wrap_Instance_isChildless, METH_O, NULL},
	 { "Instance_setFixed", _wrap_Instance_setFixed, METH_VARARGS, NULL},
	 { "Instance_setIncluded", _wrap_Instance_setIncluded, METH_VARARGS, NULL},
	 { "Instance_setRealValue", _wrap_Instance_setRealValue, METH_VARARGS, NULL},
	 { "Instance_setRealValueWithUnits", _wrap_Instance_setRealValueWithUnits, METH_VARARGS, NULL},
	 { "Instance_setBoolValue", _wrap_Instance_setBoolValue, METH_VARARGS, NULL},
	 { "Instance_setIntValue", _wrap_Instance_setIntValue, METH_VARARGS, NULL},
	 { "Instance_setSymbolValue", _wrap_Instance_setSymbolValue, METH_VARARGS, NULL},
	 { "Instance_write", _wrap_Instance_write, METH_VARARGS, NULL},
	 { "Instance_getStatus", _wrap_Instance_getStatus, METH_O, NULL},
	 { "Instance_setLowerBound", _wrap_Instance_setLowerBound, METH_VARARGS, NULL},
	 { "Instance_setUpperBound", _wrap_Instance_setUpperBound, METH_VARARGS, NULL},
	 { "Instance_setNominal", _wrap_Instance_setNominal, METH_VARARGS, NULL},
	 { "Instance_getLowerBound", _wrap_Instance_getLowerBound, METH_O, NULL},
	 { "Instance_getUpperBound", _wrap_Instance_getUpperBound, METH_O, NULL},
	 { "Instance_getNominal", _wrap_Instance_getNominal, METH_O, NULL},
	 { "Instance_getClique", _wrap_Instance_getClique, METH_O, NULL},
	 { "Instance_getAliases", _wrap_Instance_getAliases, METH_O, NULL},
	 { "Instance___repr__", _wrap_Instance___repr__, METH_O, NULL},
	 { "Instance___getattr__", _wrap_Instance___getattr__, METH_VARARGS, NULL},
	 { "Instance___getitem__", _wrap_Instance___getitem__, METH_VARARGS, NULL},
	 { "Instance___float__", _wrap_Instance___float__, METH_O, NULL},
	 { "Instance_swigregister", Instance_swigregister, METH_O, NULL},
	 { "Instance_swiginit", Instance_swiginit, METH_VARARGS, NULL},
	 { "Registry_setPointer", _wrap_Registry_setPointer, METH_VARARGS, NULL},
	 { "Registry_getInstance", _wrap_Registry_getInstance, METH_VARARGS, NULL},
	 { "Registry_getSimulation", _wrap_Registry_getSimulation, METH_VARARGS, NULL},
	 { "Registry_set", _wrap_Registry_set, METH_VARARGS, NULL},
	 { "new_Registry", _wrap_new_Registry, METH_NOARGS, NULL},
	 { "delete_Registry", _wrap_delete_Registry, METH_O, NULL},
	 { "Registry_swigregister", Registry_swigregister, METH_O, NULL},
	 { "Registry_swiginit", Registry_swiginit, METH_VARARGS, NULL},
	 { "shutdown", _wrap_shutdown, METH_NOARGS, NULL},
	 { "new_Solver", _wrap_new_Solver, METH_VARARGS, NULL},
	 { "Solver_getIndex", _wrap_Solver_getIndex, METH_O, NULL},
	 { "Solver_getName", _wrap_Solver_getName, METH_O, NULL},
	 { "delete_Solver", _wrap_delete_Solver, METH_O, NULL},
	 { "Solver_swigregister", Solver_swigregister, METH_O, NULL},
	 { "Solver_swiginit", Solver_swiginit, METH_VARARGS, NULL},
	 { "getSolvers", _wrap_getSolvers, METH_NOARGS, NULL},
	 { "SingularityInfo_isSingular", _wrap_SingularityInfo_isSingular, METH_O, NULL},
	 { "SingularityInfo_rels_set", _wrap_SingularityInfo_rels_set, METH_VARARGS, NULL},
	 { "SingularityInfo_rels_get", _wrap_SingularityInfo_rels_get, METH_O, NULL},
	 { "SingularityInfo_vars_set", _wrap_SingularityInfo_vars_set, METH_VARARGS, NULL},
	 { "SingularityInfo_vars_get", _wrap_SingularityInfo_vars_get, METH_O, NULL},
	 { "SingularityInfo_freeablevars_set", _wrap_SingularityInfo_freeablevars_set, METH_VARARGS, NULL},
	 { "SingularityInfo_freeablevars_get", _wrap_SingularityInfo_freeablevars_get, METH_O, NULL},
	 { "new_SingularityInfo", _wrap_new_SingularityInfo, METH_NOARGS, NULL},
	 { "delete_SingularityInfo", _wrap_delete_SingularityInfo, METH_O, NULL},
	 { "SingularityInfo_swigregister", SingularityInfo_swigregister, METH_O, NULL},
	 { "SingularityInfo_swiginit", SingularityInfo_swiginit, METH_VARARGS, NULL},
	 { "new_Simulation", _wrap_new_Simulation, METH_VARARGS, NULL},
	 { "delete_Simulation", _wrap_delete_Simulation, METH_O, NULL},
	 { "Simulation_getModel", _wrap_Simulation_getModel, METH_O, NULL},
	 { "Simulation_runDefaultMethod", _wrap_Simulation_runDefaultMethod, METH_O, NULL},
	 { "Simulation_run", _wrap_Simulation_run, METH_VARARGS, NULL},
	 { "Simulation_checkInstance", _wrap_Simulation_checkInstance, METH_VARARGS, NULL},
	 { "Simulation_checkTokens", _wrap_Simulation_checkTokens, METH_O, NULL},
	 { "Simulation_checkStructure", _wrap_Simulation_checkStructure, METH_O, NULL},
	 { "Simulation_checkStatistics", _wrap_Simulation_checkStatistics, METH_O, NULL},
	 { "Simulation_checkDimensions", _wrap_Simulation_checkDimensions, METH_O, NULL},
	 { "Simulation_build", _wrap_Simulation_build, METH_O, NULL},
	 { "Simulation_checkDoF", _wrap_Simulation_checkDoF, METH_O, NULL},
	 { "Simulation_checkStructuralSingularity", _wrap_Simulation_checkStructuralSingularity, METH_O, NULL},
	 { "Simulation_getSingularityInfo", _wrap_Simulation_getSingularityInfo, METH_O, NULL},
	 { "Simulation_solve", _wrap_Simulation_solve, METH_VARARGS, NULL},
	 { "Simulation_presolve", _wrap_Simulation_presolve, METH_VARARGS, NULL},
	 { "Simulation_iterate", _wrap_Simulation_iterate, METH_O, NULL},
	 { "Simulation_postsolve", _wrap_Simulation_postsolve, METH_VARARGS, NULL},
	 { "Simulation_getStatus", _wrap_Simulation_getStatus, METH_O, NULL},
	 { "Simulation_getFixableVariables", _wrap_Simulation_getFixableVariables, METH_O, NULL},
	 { "Simulation_getVariablesNearBounds", _wrap_Simulation_getVariablesNearBounds, METH_VARARGS, NULL},
	 { "Simulation_getVariablesFarFromNominals", _wrap_Simulation_getVariablesFarFromNominals, METH_VARARGS, NULL},
	 { "Simulation_getFixedVariables", _wrap_Simulation_getFixedVariables, METH_O, NULL},
	 { "Simulation_getallVariables", _wrap_Simulation_getallVariables, METH_O, NULL},
	 { "Simulation_getMatrix", _wrap_Simulation_getMatrix, METH_O, NULL},
	 { "Simulation_write", _wrap_Simulation_write, METH_VARARGS, NULL},
	 { "Simulation_setSolver", _wrap_Simulation_setSolver, METH_VARARGS, NULL},
	 { "Simulation_getSolver", _wrap_Simulation_getSolver, METH_O, NULL},
	 { "Simulation_getParameters", _wrap_Simulation_getParameters, METH_O, NULL},
	 { "Simulation_setParameters", _wrap_Simulation_setParameters, METH_VARARGS, NULL},
	 { "Simulation_getIncidenceMatrix", _wrap_Simulation_getIncidenceMatrix, METH_O, NULL},
	 { "Simulation_getInstanceName", _wrap_Simulation_getInstanceName, METH_VARARGS, NULL},
	 { "Simulation_processVarStatus", _wrap_Simulation_processVarStatus, METH_O, NULL},
	 { "Simulation_getNumVars", _wrap_Simulation_getNumVars, METH_O, NULL},
	 { "Simulation_getActiveBlock", _wrap_Simulation_getActiveBlock, METH_O, NULL},
	 { "Simulation_getFreeableVariables", _wrap_Simulation_getFreeableVariables, METH_O, NULL},
	 { "Simulation_setSolverHooks", _wrap_Simulation_setSolverHooks, METH_VARARGS, NULL},
	 { "Simulation_getSolverHooks", _wrap_Simulation_getSolverHooks, METH_O, NULL},
	 { "Simulation___getitem__", _wrap_Simulation___getitem__, METH_VARARGS, NULL},
	 { "Simulation___getattr__", _wrap_Simulation___getattr__, METH_VARARGS, NULL},
	 { "Simulation_swigregister", Simulation_swigregister, METH_O, NULL},
	 { "Simulation_swiginit", Simulation_swiginit, METH_VARARGS, NULL},
	 { "new_Matrix", _wrap_new_Matrix, METH_VARARGS, NULL},
	 { "Matrix_write", _wrap_Matrix_write, METH_VARARGS, NULL},
	 { "Matrix_size", _wrap_Matrix_size, METH_O, NULL},
	 { "delete_Matrix", _wrap_delete_Matrix, METH_O, NULL},
	 { "Matrix_swigregister", Matrix_swigregister, METH_O, NULL},
	 { "Matrix_swiginit", Matrix_swiginit, METH_VARARGS, NULL},
	 { "SolverParameters_toString", _wrap_SolverParameters_toString, METH_O, NULL},
	 { "new_SolverParameters", _wrap_new_SolverParameters, METH_O, NULL},
	 { "SolverParameters_getLength", _wrap_SolverParameters_getLength, METH_O, NULL},
	 { "SolverParameters_getParameter", _wrap_SolverParameters_getParameter, METH_VARARGS, NULL},
	 { "delete_SolverParameters", _wrap_delete_SolverParameters, METH_O, NULL},
	 { "SolverParameters_swigregister", SolverParameters_swigregister, METH_O, NULL},
	 { "SolverParameters_swiginit", SolverParameters_swiginit, METH_VARARGS, NULL},
	 { "new_Value", _wrap_new_Value, METH_VARARGS, NULL},
	 { "delete_Value", _wrap_delete_Value, METH_O, NULL},
	 { "Value_getType", _wrap_Value_getType, METH_O, NULL},
	 { "Value_swigregister", Value_swigregister, METH_O, NULL},
	 { "Value_swiginit", Value_swiginit, METH_VARARGS, NULL},
	 { "new_SolverParameter", _wrap_new_SolverParameter, METH_O, NULL},
	 { "SolverParameter_getName", _wrap_SolverParameter_getName, METH_O, NULL},
	 { "SolverParameter_getDescription", _wrap_SolverParameter_getDescription, METH_O, NULL},
	 { "SolverParameter_getLabel", _wrap_SolverParameter_getLabel, METH_O, NULL},
	 { "SolverParameter_getNumber", _wrap_SolverParameter_getNumber, METH_O, NULL},
	 { "SolverParameter_getPage", _wrap_SolverParameter_getPage, METH_O, NULL},
	 { "SolverParameter_isInt", _wrap_SolverParameter_isInt, METH_O, NULL},
	 { "SolverParameter_isBool", _wrap_SolverParameter_isBool, METH_O, NULL},
	 { "SolverParameter_isStr", _wrap_SolverParameter_isStr, METH_O, NULL},
	 { "SolverParameter_isReal", _wrap_SolverParameter_isReal, METH_O, NULL},
	 { "SolverParameter_getIntValue", _wrap_SolverParameter_getIntValue, METH_O, NULL},
	 { "SolverParameter_getIntLowerBound", _wrap_SolverParameter_getIntLowerBound, METH_O, NULL},
	 { "SolverParameter_getIntUpperBound", _wrap_SolverParameter_getIntUpperBound, METH_O, NULL},
	 { "SolverParameter_setIntValue", _wrap_SolverParameter_setIntValue, METH_VARARGS, NULL},
	 { "SolverParameter_getBoolValue", _wrap_SolverParameter_getBoolValue, METH_O, NULL},
	 { "SolverParameter_setBoolValue", _wrap_SolverParameter_setBoolValue, METH_VARARGS, NULL},
	 { "SolverParameter_getStrValue", _wrap_SolverParameter_getStrValue, METH_O, NULL},
	 { "SolverParameter_getStrOptions", _wrap_SolverParameter_getStrOptions, METH_O, NULL},
	 { "SolverParameter_setStrValue", _wrap_SolverParameter_setStrValue, METH_VARARGS, NULL},
	 { "SolverParameter_setStrOption", _wrap_SolverParameter_setStrOption, METH_VARARGS, NULL},
	 { "SolverParameter_getRealValue", _wrap_SolverParameter_getRealValue, METH_O, NULL},
	 { "SolverParameter_getRealLowerBound", _wrap_SolverParameter_getRealLowerBound, METH_O, NULL},
	 { "SolverParameter_getRealUpperBound", _wrap_SolverParameter_getRealUpperBound, METH_O, NULL},
	 { "SolverParameter_setRealValue", _wrap_SolverParameter_setRealValue, METH_VARARGS, NULL},
	 { "SolverParameter_isBounded", _wrap_SolverParameter_isBounded, METH_O, NULL},
	 { "SolverParameter_toString", _wrap_SolverParameter_toString, METH_O, NULL},
	 { "SolverParameter_setValueValue", _wrap_SolverParameter_setValueValue, METH_VARARGS, NULL},
	 { "delete_SolverParameter", _wrap_delete_SolverParameter, METH_O, NULL},
	 { "SolverParameter_swigregister", SolverParameter_swigregister, METH_O, NULL},
	 { "SolverParameter_swiginit", SolverParameter_swiginit, METH_VARARGS, NULL},
	 { "IncidencePointVector_iterator", _wrap_IncidencePointVector_iterator, METH_O, NULL},
	 { "IncidencePointVector___nonzero__", _wrap_IncidencePointVector___nonzero__, METH_O, NULL},
	 { "IncidencePointVector___bool__", _wrap_IncidencePointVector___bool__, METH_O, NULL},
	 { "IncidencePointVector___len__", _wrap_IncidencePointVector___len__, METH_O, NULL},
	 { "IncidencePointVector___getslice__", _wrap_IncidencePointVector___getslice__, METH_VARARGS, NULL},
	 { "IncidencePointVector___setslice__", _wrap_IncidencePointVector___setslice__, METH_VARARGS, NULL},
	 { "IncidencePointVector___delslice__", _wrap_IncidencePointVector___delslice__, METH_VARARGS, NULL},
	 { "IncidencePointVector___delitem__", _wrap_IncidencePointVector___delitem__, METH_VARARGS, NULL},
	 { "IncidencePointVector___getitem__", _wrap_IncidencePointVector___getitem__, METH_VARARGS, NULL},
	 { "IncidencePointVector___setitem__", _wrap_IncidencePointVector___setitem__, METH_VARARGS, NULL},
	 { "IncidencePointVector_pop", _wrap_IncidencePointVector_pop, METH_O, NULL},
	 { "IncidencePointVector_append", _wrap_IncidencePointVector_append, METH_VARARGS, NULL},
	 { "IncidencePointVector_empty", _wrap_IncidencePointVector_empty, METH_O, NULL},
	 { "IncidencePointVector_size", _wrap_IncidencePointVector_size, METH_O, NULL},
	 { "IncidencePointVector_swap", _wrap_IncidencePointVector_swap, METH_VARARGS, NULL},
	 { "IncidencePointVector_begin", _wrap_IncidencePointVector_begin, METH_O, NULL},
	 { "IncidencePointVector_end", _wrap_IncidencePointVector_end, METH_O, NULL},
	 { "IncidencePointVector_rbegin", _wrap_IncidencePointVector_rbegin, METH_O, NULL},
	 { "IncidencePointVector_rend", _wrap_IncidencePointVector_rend, METH_O, NULL},
	 { "IncidencePointVector_clear", _wrap_IncidencePointVector_clear, METH_O, NULL},
	 { "IncidencePointVector_get_allocator", _wrap_IncidencePointVector_get_allocator, METH_O, NULL},
	 { "IncidencePointVector_pop_back", _wrap_IncidencePointVector_pop_back, METH_O, NULL},
	 { "IncidencePointVector_erase", _wrap_IncidencePointVector_erase, METH_VARARGS, NULL},
	 { "new_IncidencePointVector", _wrap_new_IncidencePointVector, METH_VARARGS, NULL},
	 { "IncidencePointVector_push_back", _wrap_IncidencePointVector_push_back, METH_VARARGS, NULL},
	 { "IncidencePointVector_front", _wrap_IncidencePointVector_front, METH_O, NULL},
	 { "IncidencePointVector_back", _wrap_IncidencePointVector_back, METH_O, NULL},
	 { "IncidencePointVector_assign", _wrap_IncidencePointVector_assign, METH_VARARGS, NULL},
	 { "IncidencePointVector_resize", _wrap_IncidencePointVector_resize, METH_VARARGS, NULL},
	 { "IncidencePointVector_insert", _wrap_IncidencePointVector_insert, METH_VARARGS, NULL},
	 { "IncidencePointVector_reserve", _wrap_IncidencePointVector_reserve, METH_VARARGS, NULL},
	 { "IncidencePointVector_capacity", _wrap_IncidencePointVector_capacity, METH_O, NULL},
	 { "delete_IncidencePointVector", _wrap_delete_IncidencePointVector, METH_O, NULL},
	 { "IncidencePointVector_swigregister", IncidencePointVector_swigregister, METH_O, NULL},
	 { "IncidencePointVector_swiginit", IncidencePointVector_swiginit, METH_VARARGS, NULL},
	 { "new_IncidencePoint", _wrap_new_IncidencePoint, METH_VARARGS, NULL},
	 { "IncidencePoint_row_set", _wrap_IncidencePoint_row_set, METH_VARARGS, NULL},
	 { "IncidencePoint_row_get", _wrap_IncidencePoint_row_get, METH_O, NULL},
	 { "IncidencePoint_col_set", _wrap_IncidencePoint_col_set, METH_VARARGS, NULL},
	 { "IncidencePoint_col_get", _wrap_IncidencePoint_col_get, METH_O, NULL},
	 { "IncidencePoint_type_set", _wrap_IncidencePoint_type_set, METH_VARARGS, NULL},
	 { "IncidencePoint_type_get", _wrap_IncidencePoint_type_get, METH_O, NULL},
	 { "delete_IncidencePoint", _wrap_delete_IncidencePoint, METH_O, NULL},
	 { "IncidencePoint_swigregister", IncidencePoint_swigregister, METH_O, NULL},
	 { "IncidencePoint_swiginit", IncidencePoint_swiginit, METH_VARARGS, NULL},
	 { "new_IncidenceMatrix", _wrap_new_IncidenceMatrix, METH_O, NULL},
	 { "delete_IncidenceMatrix", _wrap_delete_IncidenceMatrix, METH_O, NULL},
	 { "IncidenceMatrix_getIncidenceData", _wrap_IncidenceMatrix_getIncidenceData, METH_O, NULL},
	 { "IncidenceMatrix_getNumRows", _wrap_IncidenceMatrix_getNumRows, METH_O, NULL},
	 { "IncidenceMatrix_getNumCols", _wrap_IncidenceMatrix_getNumCols, METH_O, NULL},
	 { "IncidenceMatrix_getVariable", _wrap_IncidenceMatrix_getVariable, METH_VARARGS, NULL},
	 { "IncidenceMatrix_getRelation", _wrap_IncidenceMatrix_getRelation, METH_VARARGS, NULL},
	 { "IncidenceMatrix_getBlockRow", _wrap_IncidenceMatrix_getBlockRow, METH_VARARGS, NULL},
	 { "IncidenceMatrix_getBlockVars", _wrap_IncidenceMatrix_getBlockVars, METH_VARARGS, NULL},
	 { "IncidenceMatrix_getBlockRels", _wrap_IncidenceMatrix_getBlockRels, METH_VARARGS, NULL},
	 { "IncidenceMatrix_getBlockLocation", _wrap_IncidenceMatrix_getBlockLocation, METH_VARARGS, NULL},
	 { "IncidenceMatrix_getBlockStatus", _wrap_IncidenceMatrix_getBlockStatus, METH_VARARGS, NULL},
	 { "IncidenceMatrix_getNumBlocks", _wrap_IncidenceMatrix_getNumBlocks, METH_O, NULL},
	 { "IncidenceMatrix_swigregister", IncidenceMatrix_swigregister, METH_O, NULL},
	 { "IncidenceMatrix_swiginit", IncidenceMatrix_swiginit, METH_VARARGS, NULL},
	 { "new_Variable", _wrap_new_Variable, METH_VARARGS, NULL},
	 { "Variable_getName", _wrap_Variable_getName, METH_O, NULL},
	 { "Variable_getValue", _wrap_Variable_getValue, METH_O, NULL},
	 { "Variable_getNominal", _wrap_Variable_getNominal, METH_O, NULL},
	 { "Variable_getUpperBound", _wrap_Variable_getUpperBound, METH_O, NULL},
	 { "Variable_getLowerBound", _wrap_Variable_getLowerBound, METH_O, NULL},
	 { "Variable_getIncidentRelations", _wrap_Variable_getIncidentRelations, METH_O, NULL},
	 { "Variable_getNumIncidentRelations", _wrap_Variable_getNumIncidentRelations, METH_O, NULL},
	 { "Variable_getInstance", _wrap_Variable_getInstance, METH_O, NULL},
	 { "delete_Variable", _wrap_delete_Variable, METH_O, NULL},
	 { "Variable_swigregister", Variable_swigregister, METH_O, NULL},
	 { "Variable_swiginit", Variable_swiginit, METH_VARARGS, NULL},
	 { "new_Relation", _wrap_new_Relation, METH_O, NULL},
	 { "Relation_getName", _wrap_Relation_getName, METH_O, NULL},
	 { "Relation_getResidual", _wrap_Relation_getResidual, METH_O, NULL},
	 { "Relation_getIncidentVariables", _wrap_Relation_getIncidentVariables, METH_O, NULL},
	 { "Relation_getNumIncidentVariables", _wrap_Relation_getNumIncidentVariables, METH_O, NULL},
	 { "Relation_getInstance", _wrap_Relation_getInstance, METH_O, NULL},
	 { "Relation_getRelationAsString", _wrap_Relation_getRelationAsString, METH_O, NULL},
	 { "delete_Relation", _wrap_delete_Relation, METH_O, NULL},
	 { "Relation_swigregister", Relation_swigregister, METH_O, NULL},
	 { "Relation_swiginit", Relation_swiginit, METH_VARARGS, NULL},
	 { "VariableVector_iterator", _wrap_VariableVector_iterator, METH_O, NULL},
	 { "VariableVector___nonzero__", _wrap_VariableVector___nonzero__, METH_O, NULL},
	 { "VariableVector___bool__", _wrap_VariableVector___bool__, METH_O, NULL},
	 { "VariableVector___len__", _wrap_VariableVector___len__, METH_O, NULL},
	 { "VariableVector___getslice__", _wrap_VariableVector___getslice__, METH_VARARGS, NULL},
	 { "VariableVector___setslice__", _wrap_VariableVector___setslice__, METH_VARARGS, NULL},
	 { "VariableVector___delslice__", _wrap_VariableVector___delslice__, METH_VARARGS, NULL},
	 { "VariableVector___delitem__", _wrap_VariableVector___delitem__, METH_VARARGS, NULL},
	 { "VariableVector___getitem__", _wrap_VariableVector___getitem__, METH_VARARGS, NULL},
	 { "VariableVector___setitem__", _wrap_VariableVector___setitem__, METH_VARARGS, NULL},
	 { "VariableVector_pop", _wrap_VariableVector_pop, METH_O, NULL},
	 { "VariableVector_append", _wrap_VariableVector_append, METH_VARARGS, NULL},
	 { "VariableVector_empty", _wrap_VariableVector_empty, METH_O, NULL},
	 { "VariableVector_size", _wrap_VariableVector_size, METH_O, NULL},
	 { "VariableVector_swap", _wrap_VariableVector_swap, METH_VARARGS, NULL},
	 { "VariableVector_begin", _wrap_VariableVector_begin, METH_O, NULL},
	 { "VariableVector_end", _wrap_VariableVector_end, METH_O, NULL},
	 { "VariableVector_rbegin", _wrap_VariableVector_rbegin, METH_O, NULL},
	 { "VariableVector_rend", _wrap_VariableVector_rend, METH_O, NULL},
	 { "VariableVector_clear", _wrap_VariableVector_clear, METH_O, NULL},
	 { "VariableVector_get_allocator", _wrap_VariableVector_get_allocator, METH_O, NULL},
	 { "VariableVector_pop_back", _wrap_VariableVector_pop_back, METH_O, NULL},
	 { "VariableVector_erase", _wrap_VariableVector_erase, METH_VARARGS, NULL},
	 { "new_VariableVector", _wrap_new_VariableVector, METH_VARARGS, NULL},
	 { "VariableVector_push_back", _wrap_VariableVector_push_back, METH_VARARGS, NULL},
	 { "VariableVector_front", _wrap_VariableVector_front, METH_O, NULL},
	 { "VariableVector_back", _wrap_VariableVector_back, METH_O, NULL},
	 { "VariableVector_assign", _wrap_VariableVector_assign, METH_VARARGS, NULL},
	 { "VariableVector_resize", _wrap_VariableVector_resize, METH_VARARGS, NULL},
	 { "VariableVector_insert", _wrap_VariableVector_insert, METH_VARARGS, NULL},
	 { "VariableVector_reserve", _wrap_VariableVector_reserve, METH_VARARGS, NULL},
	 { "VariableVector_capacity", _wrap_VariableVector_capacity, METH_O, NULL},
	 { "delete_VariableVector", _wrap_delete_VariableVector, METH_O, NULL},
	 { "VariableVector_swigregister", VariableVector_swigregister, METH_O, NULL},
	 { "VariableVector_swiginit", VariableVector_swiginit, METH_VARARGS, NULL},
	 { "RelationVector_iterator", _wrap_RelationVector_iterator, METH_O, NULL},
	 { "RelationVector___nonzero__", _wrap_RelationVector___nonzero__, METH_O, NULL},
	 { "RelationVector___bool__", _wrap_RelationVector___bool__, METH_O, NULL},
	 { "RelationVector___len__", _wrap_RelationVector___len__, METH_O, NULL},
	 { "RelationVector___getslice__", _wrap_RelationVector___getslice__, METH_VARARGS, NULL},
	 { "RelationVector___setslice__", _wrap_RelationVector___setslice__, METH_VARARGS, NULL},
	 { "RelationVector___delslice__", _wrap_RelationVector___delslice__, METH_VARARGS, NULL},
	 { "RelationVector___delitem__", _wrap_RelationVector___delitem__, METH_VARARGS, NULL},
	 { "RelationVector___getitem__", _wrap_RelationVector___getitem__, METH_VARARGS, NULL},
	 { "RelationVector___setitem__", _wrap_RelationVector___setitem__, METH_VARARGS, NULL},
	 { "RelationVector_pop", _wrap_RelationVector_pop, METH_O, NULL},
	 { "RelationVector_append", _wrap_RelationVector_append, METH_VARARGS, NULL},
	 { "RelationVector_empty", _wrap_RelationVector_empty, METH_O, NULL},
	 { "RelationVector_size", _wrap_RelationVector_size, METH_O, NULL},
	 { "RelationVector_swap", _wrap_RelationVector_swap, METH_VARARGS, NULL},
	 { "RelationVector_begin", _wrap_RelationVector_begin, METH_O, NULL},
	 { "RelationVector_end", _wrap_RelationVector_end, METH_O, NULL},
	 { "RelationVector_rbegin", _wrap_RelationVector_rbegin, METH_O, NULL},
	 { "RelationVector_rend", _wrap_RelationVector_rend, METH_O, NULL},
	 { "RelationVector_clear", _wrap_RelationVector_clear, METH_O, NULL},
	 { "RelationVector_get_allocator", _wrap_RelationVector_get_allocator, METH_O, NULL},
	 { "RelationVector_pop_back", _wrap_RelationVector_pop_back, METH_O, NULL},
	 { "RelationVector_erase", _wrap_RelationVector_erase, METH_VARARGS, NULL},
	 { "new_RelationVector", _wrap_new_RelationVector, METH_VARARGS, NULL},
	 { "RelationVector_push_back", _wrap_RelationVector_push_back, METH_VARARGS, NULL},
	 { "RelationVector_front", _wrap_RelationVector_front, METH_O, NULL},
	 { "RelationVector_back", _wrap_RelationVector_back, METH_O, NULL},
	 { "RelationVector_assign", _wrap_RelationVector_assign, METH_VARARGS, NULL},
	 { "RelationVector_resize", _wrap_RelationVector_resize, METH_VARARGS, NULL},
	 { "RelationVector_insert", _wrap_RelationVector_insert, METH_VARARGS, NULL},
	 { "RelationVector_reserve", _wrap_RelationVector_reserve, METH_VARARGS, NULL},
	 { "RelationVector_capacity", _wrap_RelationVector_capacity, METH_O, NULL},
	 { "delete_RelationVector", _wrap_delete_RelationVector, METH_O, NULL},
	 { "RelationVector_swigregister", RelationVector_swigregister, METH_O, NULL},
	 { "RelationVector_swiginit", RelationVector_swiginit, METH_VARARGS, NULL},
	 { "SolverVector_iterator", _wrap_SolverVector_iterator, METH_O, NULL},
	 { "SolverVector___nonzero__", _wrap_SolverVector___nonzero__, METH_O, NULL},
	 { "SolverVector___bool__", _wrap_SolverVector___bool__, METH_O, NULL},
	 { "SolverVector___len__", _wrap_SolverVector___len__, METH_O, NULL},
	 { "SolverVector___getslice__", _wrap_SolverVector___getslice__, METH_VARARGS, NULL},
	 { "SolverVector___setslice__", _wrap_SolverVector___setslice__, METH_VARARGS, NULL},
	 { "SolverVector___delslice__", _wrap_SolverVector___delslice__, METH_VARARGS, NULL},
	 { "SolverVector___delitem__", _wrap_SolverVector___delitem__, METH_VARARGS, NULL},
	 { "SolverVector___getitem__", _wrap_SolverVector___getitem__, METH_VARARGS, NULL},
	 { "SolverVector___setitem__", _wrap_SolverVector___setitem__, METH_VARARGS, NULL},
	 { "SolverVector_pop", _wrap_SolverVector_pop, METH_O, NULL},
	 { "SolverVector_append", _wrap_SolverVector_append, METH_VARARGS, NULL},
	 { "SolverVector_empty", _wrap_SolverVector_empty, METH_O, NULL},
	 { "SolverVector_size", _wrap_SolverVector_size, METH_O, NULL},
	 { "SolverVector_swap", _wrap_SolverVector_swap, METH_VARARGS, NULL},
	 { "SolverVector_begin", _wrap_SolverVector_begin, METH_O, NULL},
	 { "SolverVector_end", _wrap_SolverVector_end, METH_O, NULL},
	 { "SolverVector_rbegin", _wrap_SolverVector_rbegin, METH_O, NULL},
	 { "SolverVector_rend", _wrap_SolverVector_rend, METH_O, NULL},
	 { "SolverVector_clear", _wrap_SolverVector_clear, METH_O, NULL},
	 { "SolverVector_get_allocator", _wrap_SolverVector_get_allocator, METH_O, NULL},
	 { "SolverVector_pop_back", _wrap_SolverVector_pop_back, METH_O, NULL},
	 { "SolverVector_erase", _wrap_SolverVector_erase, METH_VARARGS, NULL},
	 { "new_SolverVector", _wrap_new_SolverVector, METH_VARARGS, NULL},
	 { "SolverVector_push_back", _wrap_SolverVector_push_back, METH_VARARGS, NULL},
	 { "SolverVector_front", _wrap_SolverVector_front, METH_O, NULL},
	 { "SolverVector_back", _wrap_SolverVector_back, METH_O, NULL},
	 { "SolverVector_assign", _wrap_SolverVector_assign, METH_VARARGS, NULL},
	 { "SolverVector_resize", _wrap_SolverVector_resize, METH_VARARGS, NULL},
	 { "SolverVector_insert", _wrap_SolverVector_insert, METH_VARARGS, NULL},
	 { "SolverVector_reserve", _wrap_SolverVector_reserve, METH_VARARGS, NULL},
	 { "SolverVector_capacity", _wrap_SolverVector_capacity, METH_O, NULL},
	 { "delete_SolverVector", _wrap_delete_SolverVector, METH_O, NULL},
	 { "SolverVector_swigregister", SolverVector_swigregister, METH_O, NULL},
	 { "SolverVector_swiginit", SolverVector_swiginit, METH_VARARGS, NULL},
	 { "new_SolverStatus", _wrap_new_SolverStatus, METH_VARARGS, NULL},
	 { "SolverStatus_getSimulationStatus", _wrap_SolverStatus_getSimulationStatus, METH_VARARGS, NULL},
	 { "SolverStatus_isOK", _wrap_SolverStatus_isOK, METH_O, NULL},
	 { "SolverStatus_isOverDefined", _wrap_SolverStatus_isOverDefined, METH_O, NULL},
	 { "SolverStatus_isUnderDefined", _wrap_SolverStatus_isUnderDefined, METH_O, NULL},
	 { "SolverStatus_isStructurallySingular", _wrap_SolverStatus_isStructurallySingular, METH_O, NULL},
	 { "SolverStatus_isInconsistent", _wrap_SolverStatus_isInconsistent, METH_O, NULL},
	 { "SolverStatus_isReadyToSolve", _wrap_SolverStatus_isReadyToSolve, METH_O, NULL},
	 { "SolverStatus_isConverged", _wrap_SolverStatus_isConverged, METH_O, NULL},
	 { "SolverStatus_isDiverged", _wrap_SolverStatus_isDiverged, METH_O, NULL},
	 { "SolverStatus_hasResidualCalculationErrors", _wrap_SolverStatus_hasResidualCalculationErrors, METH_O, NULL},
	 { "SolverStatus_hasExceededIterationLimit", _wrap_SolverStatus_hasExceededIterationLimit, METH_O, NULL},
	 { "SolverStatus_hasExceededTimeLimit", _wrap_SolverStatus_hasExceededTimeLimit, METH_O, NULL},
	 { "SolverStatus_isInterrupted", _wrap_SolverStatus_isInterrupted, METH_O, NULL},
	 { "SolverStatus_getIterationNum", _wrap_SolverStatus_getIterationNum, METH_O, NULL},
	 { "SolverStatus_getNumBlocks", _wrap_SolverStatus_getNumBlocks, METH_O, NULL},
	 { "SolverStatus_getCurrentBlockNum", _wrap_SolverStatus_getCurrentBlockNum, METH_O, NULL},
	 { "SolverStatus_getCurrentBlockSize", _wrap_SolverStatus_getCurrentBlockSize, METH_O, NULL},
	 { "SolverStatus_getCurrentBlockIteration", _wrap_SolverStatus_getCurrentBlockIteration, METH_O, NULL},
	 { "SolverStatus_getNumConverged", _wrap_SolverStatus_getNumConverged, METH_O, NULL},
	 { "SolverStatus_getNumJacobianEvals", _wrap_SolverStatus_getNumJacobianEvals, METH_O, NULL},
	 { "SolverStatus_getNumResidualEvals", _wrap_SolverStatus_getNumResidualEvals, METH_O, NULL},
	 { "SolverStatus_getBlockResidualRMS", _wrap_SolverStatus_getBlockResidualRMS, METH_O, NULL},
	 { "delete_SolverStatus", _wrap_delete_SolverStatus, METH_O, NULL},
	 { "SolverStatus_swigregister", SolverStatus_swigregister, METH_O, NULL},
	 { "SolverStatus_swiginit", SolverStatus_swiginit, METH_VARARGS, NULL},
	 { "new_SolverReporter", _wrap_new_SolverReporter, METH_O, NULL},
	 { "delete_SolverReporter", _wrap_delete_SolverReporter, METH_O, NULL},
	 { "SolverReporter_report", _wrap_SolverReporter_report, METH_VARARGS, NULL},
	 { "SolverReporter_finalise", _wrap_SolverReporter_finalise, METH_VARARGS, NULL},
	 { "disown_SolverReporter", _wrap_disown_SolverReporter, METH_O, NULL},
	 { "SolverReporter_swigregister", SolverReporter_swigregister, METH_O, NULL},
	 { "SolverReporter_swiginit", SolverReporter_swiginit, METH_VARARGS, NULL},
	 { "new_Integrator", _wrap_new_Integrator, METH_O, NULL},
	 { "delete_Integrator", _wrap_delete_Integrator, METH_O, NULL},
	 { "Integrator_getEngines", _wrap_Integrator_getEngines, METH_NOARGS, "Return dict of available integration engines {id:name,...}"},
	 { "Integrator_setEngine", _wrap_Integrator_setEngine, METH_VARARGS, NULL},
	 { "Integrator_getName", _wrap_Integrator_getName, METH_O, NULL},
	 { "Integrator_getParameters", _wrap_Integrator_getParameters, METH_O, NULL},
	 { "Integrator_setParameters", _wrap_Integrator_setParameters, METH_VARARGS, NULL},
	 { "Integrator_setReporter", _wrap_Integrator_setReporter, METH_VARARGS, NULL},
	 { "Integrator_setMinSubStep", _wrap_Integrator_setMinSubStep, METH_VARARGS, NULL},
	 { "Integrator_setMaxSubStep", _wrap_Integrator_setMaxSubStep, METH_VARARGS, NULL},
	 { "Integrator_setInitialSubStep", _wrap_Integrator_setInitialSubStep, METH_VARARGS, NULL},
	 { "Integrator_setMaxSubSteps", _wrap_Integrator_setMaxSubSteps, METH_VARARGS, NULL},
	 { "Integrator_setLinearTimesteps", _wrap_Integrator_setLinearTimesteps, METH_VARARGS, NULL},
	 { "Integrator_setLogTimesteps", _wrap_Integrator_setLogTimesteps, METH_VARARGS, NULL},
	 { "Integrator_getCurrentObservations", _wrap_Integrator_getCurrentObservations, METH_O, NULL},
	 { "Integrator_saveObservations", _wrap_Integrator_saveObservations, METH_O, NULL},
	 { "Integrator_getObservations", _wrap_Integrator_getObservations, METH_O, NULL},
	 { "Integrator_getObservedVariable", _wrap_Integrator_getObservedVariable, METH_VARARGS, NULL},
	 { "Integrator_getIndependentVariable", _wrap_Integrator_getIndependentVariable, METH_O, NULL},
	 { "Integrator_findIndependentVar", _wrap_Integrator_findIndependentVar, METH_O, NULL},
	 { "Integrator_analyse", _wrap_Integrator_analyse, METH_O, NULL},
	 { "Integrator_solve", _wrap_Integrator_solve, METH_O, NULL},
	 { "Integrator_writeMatrix", _wrap_Integrator_writeMatrix, METH_VARARGS, NULL},
	 { "Integrator_writeDebug", _wrap_Integrator_writeDebug, METH_VARARGS, NULL},
	 { "Integrator_getCurrentTime", _wrap_Integrator_getCurrentTime, METH_O, NULL},
	 { "Integrator_getCurrentStep", _wrap_Integrator_getCurrentStep, METH_O, NULL},
	 { "Integrator_getNumSteps", _wrap_Integrator_getNumSteps, METH_O, NULL},
	 { "Integrator_getNumVars", _wrap_Integrator_getNumVars, METH_O, NULL},
	 { "Integrator_getNumObservedVars", _wrap_Integrator_getNumObservedVars, METH_O, NULL},
	 { "Integrator_swigregister", Integrator_swigregister, METH_O, NULL},
	 { "Integrator_swiginit", Integrator_swiginit, METH_VARARGS, NULL},
	 { "new_IntegratorReporterCxx", _wrap_new_IntegratorReporterCxx, METH_VARARGS, NULL},
	 { "delete_IntegratorReporterCxx", _wrap_delete_IntegratorReporterCxx, METH_O, NULL},
	 { "IntegratorReporterCxx_initOutput", _wrap_IntegratorReporterCxx_initOutput, METH_O, NULL},
	 { "IntegratorReporterCxx_closeOutput", _wrap_IntegratorReporterCxx_closeOutput, METH_O, NULL},
	 { "IntegratorReporterCxx_updateStatus", _wrap_IntegratorReporterCxx_updateStatus, METH_O, NULL},
	 { "IntegratorReporterCxx_recordObservedValues", _wrap_IntegratorReporterCxx_recordObservedValues, METH_O, NULL},
	 { "IntegratorReporterCxx_getIntegrator", _wrap_IntegratorReporterCxx_getIntegrator, METH_O, NULL},
	 { "disown_IntegratorReporterCxx", _wrap_disown_IntegratorReporterCxx, METH_O, NULL},
	 { "IntegratorReporterCxx_swigregister", IntegratorReporterCxx_swigregister, METH_O, NULL},
	 { "IntegratorReporterCxx_swiginit", IntegratorReporterCxx_swiginit, METH_VARARGS, NULL},
	 { "new_IntegratorReporterNull", _wrap_new_IntegratorReporterNull, METH_O, NULL},
	 { "delete_IntegratorReporterNull", _wrap_delete_IntegratorReporterNull, METH_O, NULL},
	 { "IntegratorReporterNull_swigregister", IntegratorReporterNull_swigregister, METH_O, NULL},
	 { "IntegratorReporterNull_swiginit", IntegratorReporterNull_swiginit, METH_VARARGS, NULL},
	 { "new_IntegratorReporterConsole", _wrap_new_IntegratorReporterConsole, METH_O, NULL},
	 { "delete_IntegratorReporterConsole", _wrap_delete_IntegratorReporterConsole, METH_O, NULL},
	 { "IntegratorReporterConsole_swigregister", IntegratorReporterConsole_swigregister, METH_O, NULL},
	 { "IntegratorReporterConsole_swiginit", IntegratorReporterConsole_swiginit, METH_VARARGS, NULL},
	 { "new_SolverHooks", _wrap_new_SolverHooks, METH_VARARGS, NULL},
	 { "delete_SolverHooks", _wrap_delete_SolverHooks, METH_O, NULL},
	 { "SolverHooks_setSolver", _wrap_SolverHooks_setSolver, METH_VARARGS, NULL},
	 { "SolverHooks_setOption", _wrap_SolverHooks_setOption, METH_VARARGS, NULL},
	 { "SolverHooks_doSolve", _wrap_SolverHooks_doSolve, METH_VARARGS, NULL},
	 { "SolverHooks_getSolverReporter", _wrap_SolverHooks_getSolverReporter, METH_O, NULL},
	 { "SolverHooks_assign", _wrap_SolverHooks_assign, METH_VARARGS, NULL},
	 { "disown_SolverHooks", _wrap_disown_SolverHooks, METH_O, NULL},
	 { "SolverHooks_swigregister", SolverHooks_swigregister, METH_O, NULL},
	 { "SolverHooks_swiginit", SolverHooks_swiginit, METH_VARARGS, NULL},
	 { "SolverHooksManager_Instance", _wrap_SolverHooksManager_Instance, METH_NOARGS, NULL},
	 { "SolverHooksManager_setHooks", _wrap_SolverHooksManager_setHooks, METH_VARARGS, NULL},
	 { "SolverHooksManager_getHooks", _wrap_SolverHooksManager_getHooks, METH_O, NULL},
	 { "SolverHooksManager_swigregister", SolverHooksManager_swigregister, METH_O, NULL},
	 { "new_ExtMethod", _wrap_new_ExtMethod, METH_VARARGS, NULL},
	 { "ExtMethod_getHelp", _wrap_ExtMethod_getHelp, METH_O, NULL},
	 { "ExtMethod_getName", _wrap_ExtMethod_getName, METH_O, NULL},
	 { "ExtMethod_getNumInputs", _wrap_ExtMethod_getNumInputs, METH_O, NULL},
	 { "ExtMethod_getNumOutputs", _wrap_ExtMethod_getNumOutputs, METH_O, NULL},
	 { "delete_ExtMethod", _wrap_delete_ExtMethod, METH_O, NULL},
	 { "ExtMethod_swigregister", ExtMethod_swigregister, METH_O, NULL},
	 { "ExtMethod_swiginit", ExtMethod_swiginit, METH_VARARGS, NULL},
	 { "new_AnnotationDatabase", _wrap_new_AnnotationDatabase, METH_O, NULL},
	 { "AnnotationDatabase_getNotes", _wrap_AnnotationDatabase_getNotes, METH_VARARGS, NULL},
	 { "AnnotationDatabase_getTypeRefinedNotesLang", _wrap_AnnotationDatabase_getTypeRefinedNotesLang, METH_VARARGS, NULL},
	 { "AnnotationDatabase_getNoteForVariable", _wrap_AnnotationDatabase_getNoteForVariable, METH_VARARGS, NULL},
	 { "delete_AnnotationDatabase", _wrap_delete_AnnotationDatabase, METH_O, NULL},
	 { "AnnotationDatabase_swigregister", AnnotationDatabase_swigregister, METH_O, NULL},
	 { "AnnotationDatabase_swiginit", AnnotationDatabase_swiginit, METH_VARARGS, NULL},
	 { "new_Plot", _wrap_new_Plot, METH_O, NULL},
	 { "Plot_getTitle", _wrap_Plot_getTitle, METH_O, NULL},
	 { "Plot_getXLabel", _wrap_Plot_getXLabel, METH_O, NULL},
	 { "Plot_getYLabel", _wrap_Plot_getYLabel, METH_O, NULL},
	 { "Plot_getLegendPosition", _wrap_Plot_getLegendPosition, METH_O, NULL},
	 { "Plot_isXLog", _wrap_Plot_isXLog, METH_O, NULL},
	 { "Plot_isYLog", _wrap_Plot_isYLog, METH_O, NULL},
	 { "Plot_getXLow", _wrap_Plot_getXLow, METH_O, NULL},
	 { "Plot_getXHigh", _wrap_Plot_getXHigh, METH_O, NULL},
	 { "Plot_getYLow", _wrap_Plot_getYLow, METH_O, NULL},
	 { "Plot_getYHigh", _wrap_Plot_getYHigh, METH_O, NULL},
	 { "Plot_curves_set", _wrap_Plot_curves_set, METH_VARARGS, NULL},
	 { "Plot_curves_get", _wrap_Plot_curves_get, METH_O, NULL},
	 { "delete_Plot", _wrap_delete_Plot, METH_O, NULL},
	 { "Plot_swigregister", Plot_swigregister, METH_O, NULL},
	 { "Plot_swiginit", Plot_swiginit, METH_VARARGS, NULL},
	 { "new_Curve", _wrap_new_Curve, METH_O, NULL},
	 { "Curve_x_set", _wrap_Curve_x_set, METH_VARARGS, NULL},
	 { "Curve_x_get", _wrap_Curve_x_get, METH_O, NULL},
	 { "Curve_y_set", _wrap_Curve_y_set, METH_VARARGS, NULL},
	 { "Curve_y_get", _wrap_Curve_y_get, METH_O, NULL},
	 { "Curve_getLegend", _wrap_Curve_getLegend, METH_O, NULL},
	 { "Curve_getFormat", _wrap_Curve_getFormat, METH_O, NULL},
	 { "delete_Curve", _wrap_delete_Curve, METH_O, NULL},
	 { "Curve_swigregister", Curve_swigregister, METH_O, NULL},
	 { "Curve_swiginit", Curve_swiginit, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};

static PyMethodDef SwigMethods_proxydocs[] = {
	 { "SWIG_PyInstanceMethod_New", SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { "SWIG_PyStaticMethod_New", SWIG_PyStaticMethod_New, METH_O, NULL},
	 { "delete_SwigPyIterator", _wrap_delete_SwigPyIterator, METH_O, NULL},
	 { "SwigPyIterator_value", _wrap_SwigPyIterator_value, METH_O, NULL},
	 { "SwigPyIterator_incr", _wrap_SwigPyIterator_incr, METH_VARARGS, NULL},
	 { "SwigPyIterator_decr", _wrap_SwigPyIterator_decr, METH_VARARGS, NULL},
	 { "SwigPyIterator_distance", _wrap_SwigPyIterator_distance, METH_VARARGS, NULL},
	 { "SwigPyIterator_equal", _wrap_SwigPyIterator_equal, METH_VARARGS, NULL},
	 { "SwigPyIterator_copy", _wrap_SwigPyIterator_copy, METH_O, NULL},
	 { "SwigPyIterator_next", _wrap_SwigPyIterator_next, METH_O, NULL},
	 { "SwigPyIterator___next__", _wrap_SwigPyIterator___next__, METH_O, NULL},
	 { "SwigPyIterator_previous", _wrap_SwigPyIterator_previous, METH_O, NULL},
	 { "SwigPyIterator_advance", _wrap_SwigPyIterator_advance, METH_VARARGS, NULL},
	 { "SwigPyIterator___eq__", _wrap_SwigPyIterator___eq__, METH_VARARGS, NULL},
	 { "SwigPyIterator___ne__", _wrap_SwigPyIterator___ne__, METH_VARARGS, NULL},
	 { "SwigPyIterator___iadd__", _wrap_SwigPyIterator___iadd__, METH_VARARGS, NULL},
	 { "SwigPyIterator___isub__", _wrap_SwigPyIterator___isub__, METH_VARARGS, NULL},
	 { "SwigPyIterator___add__", _wrap_SwigPyIterator___add__, METH_VARARGS, NULL},
	 { "SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, NULL},
	 { "SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_O, NULL},
	 { "ModuleVector_iterator", _wrap_ModuleVector_iterator, METH_O, NULL},
	 { "ModuleVector___nonzero__", _wrap_ModuleVector___nonzero__, METH_O, NULL},
	 { "ModuleVector___bool__", _wrap_ModuleVector___bool__, METH_O, NULL},
	 { "ModuleVector___len__", _wrap_ModuleVector___len__, METH_O, NULL},
	 { "ModuleVector___getslice__", _wrap_ModuleVector___getslice__, METH_VARARGS, NULL},
	 { "ModuleVector___setslice__", _wrap_ModuleVector___setslice__, METH_VARARGS, NULL},
	 { "ModuleVector___delslice__", _wrap_ModuleVector___delslice__, METH_VARARGS, NULL},
	 { "ModuleVector___delitem__", _wrap_ModuleVector___delitem__, METH_VARARGS, NULL},
	 { "ModuleVector___getitem__", _wrap_ModuleVector___getitem__, METH_VARARGS, NULL},
	 { "ModuleVector___setitem__", _wrap_ModuleVector___setitem__, METH_VARARGS, NULL},
	 { "ModuleVector_pop", _wrap_ModuleVector_pop, METH_O, NULL},
	 { "ModuleVector_append", _wrap_ModuleVector_append, METH_VARARGS, NULL},
	 { "ModuleVector_empty", _wrap_ModuleVector_empty, METH_O, NULL},
	 { "ModuleVector_size", _wrap_ModuleVector_size, METH_O, NULL},
	 { "ModuleVector_swap", _wrap_ModuleVector_swap, METH_VARARGS, NULL},
	 { "ModuleVector_begin", _wrap_ModuleVector_begin, METH_O, NULL},
	 { "ModuleVector_end", _wrap_ModuleVector_end, METH_O, NULL},
	 { "ModuleVector_rbegin", _wrap_ModuleVector_rbegin, METH_O, NULL},
	 { "ModuleVector_rend", _wrap_ModuleVector_rend, METH_O, NULL},
	 { "ModuleVector_clear", _wrap_ModuleVector_clear, METH_O, NULL},
	 { "ModuleVector_get_allocator", _wrap_ModuleVector_get_allocator, METH_O, NULL},
	 { "ModuleVector_pop_back", _wrap_ModuleVector_pop_back, METH_O, NULL},
	 { "ModuleVector_erase", _wrap_ModuleVector_erase, METH_VARARGS, NULL},
	 { "new_ModuleVector", _wrap_new_ModuleVector, METH_VARARGS, NULL},
	 { "ModuleVector_push_back", _wrap_ModuleVector_push_back, METH_VARARGS, NULL},
	 { "ModuleVector_front", _wrap_ModuleVector_front, METH_O, NULL},
	 { "ModuleVector_back", _wrap_ModuleVector_back, METH_O, NULL},
	 { "ModuleVector_assign", _wrap_ModuleVector_assign, METH_VARARGS, NULL},
	 { "ModuleVector_resize", _wrap_ModuleVector_resize, METH_VARARGS, NULL},
	 { "ModuleVector_insert", _wrap_ModuleVector_insert, METH_VARARGS, NULL},
	 { "ModuleVector_reserve", _wrap_ModuleVector_reserve, METH_VARARGS, NULL},
	 { "ModuleVector_capacity", _wrap_ModuleVector_capacity, METH_O, NULL},
	 { "delete_ModuleVector", _wrap_delete_ModuleVector, METH_O, NULL},
	 { "ModuleVector_swigregister", ModuleVector_swigregister, METH_O, NULL},
	 { "ModuleVector_swiginit", ModuleVector_swiginit, METH_VARARGS, NULL},
	 { "TypeVector_iterator", _wrap_TypeVector_iterator, METH_O, NULL},
	 { "TypeVector___nonzero__", _wrap_TypeVector___nonzero__, METH_O, NULL},
	 { "TypeVector___bool__", _wrap_TypeVector___bool__, METH_O, NULL},
	 { "TypeVector___len__", _wrap_TypeVector___len__, METH_O, NULL},
	 { "TypeVector___getslice__", _wrap_TypeVector___getslice__, METH_VARARGS, NULL},
	 { "TypeVector___setslice__", _wrap_TypeVector___setslice__, METH_VARARGS, NULL},
	 { "TypeVector___delslice__", _wrap_TypeVector___delslice__, METH_VARARGS, NULL},
	 { "TypeVector___delitem__", _wrap_TypeVector___delitem__, METH_VARARGS, NULL},
	 { "TypeVector___getitem__", _wrap_TypeVector___getitem__, METH_VARARGS, NULL},
	 { "TypeVector___setitem__", _wrap_TypeVector___setitem__, METH_VARARGS, NULL},
	 { "TypeVector_pop", _wrap_TypeVector_pop, METH_O, NULL},
	 { "TypeVector_append", _wrap_TypeVector_append, METH_VARARGS, NULL},
	 { "TypeVector_empty", _wrap_TypeVector_empty, METH_O, NULL},
	 { "TypeVector_size", _wrap_TypeVector_size, METH_O, NULL},
	 { "TypeVector_swap", _wrap_TypeVector_swap, METH_VARARGS, NULL},
	 { "TypeVector_begin", _wrap_TypeVector_begin, METH_O, NULL},
	 { "TypeVector_end", _wrap_TypeVector_end, METH_O, NULL},
	 { "TypeVector_rbegin", _wrap_TypeVector_rbegin, METH_O, NULL},
	 { "TypeVector_rend", _wrap_TypeVector_rend, METH_O, NULL},
	 { "TypeVector_clear", _wrap_TypeVector_clear, METH_O, NULL},
	 { "TypeVector_get_allocator", _wrap_TypeVector_get_allocator, METH_O, NULL},
	 { "TypeVector_pop_back", _wrap_TypeVector_pop_back, METH_O, NULL},
	 { "TypeVector_erase", _wrap_TypeVector_erase, METH_VARARGS, NULL},
	 { "new_TypeVector", _wrap_new_TypeVector, METH_VARARGS, NULL},
	 { "TypeVector_push_back", _wrap_TypeVector_push_back, METH_VARARGS, NULL},
	 { "TypeVector_front", _wrap_TypeVector_front, METH_O, NULL},
	 { "TypeVector_back", _wrap_TypeVector_back, METH_O, NULL},
	 { "TypeVector_assign", _wrap_TypeVector_assign, METH_VARARGS, NULL},
	 { "TypeVector_resize", _wrap_TypeVector_resize, METH_VARARGS, NULL},
	 { "TypeVector_insert", _wrap_TypeVector_insert, METH_VARARGS, NULL},
	 { "TypeVector_reserve", _wrap_TypeVector_reserve, METH_VARARGS, NULL},
	 { "TypeVector_capacity", _wrap_TypeVector_capacity, METH_O, NULL},
	 { "delete_TypeVector", _wrap_delete_TypeVector, METH_O, NULL},
	 { "TypeVector_swigregister", TypeVector_swigregister, METH_O, NULL},
	 { "TypeVector_swiginit", TypeVector_swiginit, METH_VARARGS, NULL},
	 { "MethodVector_iterator", _wrap_MethodVector_iterator, METH_O, NULL},
	 { "MethodVector___nonzero__", _wrap_MethodVector___nonzero__, METH_O, NULL},
	 { "MethodVector___bool__", _wrap_MethodVector___bool__, METH_O, NULL},
	 { "MethodVector___len__", _wrap_MethodVector___len__, METH_O, NULL},
	 { "MethodVector___getslice__", _wrap_MethodVector___getslice__, METH_VARARGS, NULL},
	 { "MethodVector___setslice__", _wrap_MethodVector___setslice__, METH_VARARGS, NULL},
	 { "MethodVector___delslice__", _wrap_MethodVector___delslice__, METH_VARARGS, NULL},
	 { "MethodVector___delitem__", _wrap_MethodVector___delitem__, METH_VARARGS, NULL},
	 { "MethodVector___getitem__", _wrap_MethodVector___getitem__, METH_VARARGS, NULL},
	 { "MethodVector___setitem__", _wrap_MethodVector___setitem__, METH_VARARGS, NULL},
	 { "MethodVector_pop", _wrap_MethodVector_pop, METH_O, NULL},
	 { "MethodVector_append", _wrap_MethodVector_append, METH_VARARGS, NULL},
	 { "MethodVector_empty", _wrap_MethodVector_empty, METH_O, NULL},
	 { "MethodVector_size", _wrap_MethodVector_size, METH_O, NULL},
	 { "MethodVector_swap", _wrap_MethodVector_swap, METH_VARARGS, NULL},
	 { "MethodVector_begin", _wrap_MethodVector_begin, METH_O, NULL},
	 { "MethodVector_end", _wrap_MethodVector_end, METH_O, NULL},
	 { "MethodVector_rbegin", _wrap_MethodVector_rbegin, METH_O, NULL},
	 { "MethodVector_rend", _wrap_MethodVector_rend, METH_O, NULL},
	 { "MethodVector_clear", _wrap_MethodVector_clear, METH_O, NULL},
	 { "MethodVector_get_allocator", _wrap_MethodVector_get_allocator, METH_O, NULL},
	 { "MethodVector_pop_back", _wrap_MethodVector_pop_back, METH_O, NULL},
	 { "MethodVector_erase", _wrap_MethodVector_erase, METH_VARARGS, NULL},
	 { "new_MethodVector", _wrap_new_MethodVector, METH_VARARGS, NULL},
	 { "MethodVector_push_back", _wrap_MethodVector_push_back, METH_VARARGS, NULL},
	 { "MethodVector_front", _wrap_MethodVector_front, METH_O, NULL},
	 { "MethodVector_back", _wrap_MethodVector_back, METH_O, NULL},
	 { "MethodVector_assign", _wrap_MethodVector_assign, METH_VARARGS, NULL},
	 { "MethodVector_resize", _wrap_MethodVector_resize, METH_VARARGS, NULL},
	 { "MethodVector_insert", _wrap_MethodVector_insert, METH_VARARGS, NULL},
	 { "MethodVector_reserve", _wrap_MethodVector_reserve, METH_VARARGS, NULL},
	 { "MethodVector_capacity", _wrap_MethodVector_capacity, METH_O, NULL},
	 { "delete_MethodVector", _wrap_delete_MethodVector, METH_O, NULL},
	 { "MethodVector_swigregister", MethodVector_swigregister, METH_O, NULL},
	 { "MethodVector_swiginit", MethodVector_swiginit, METH_VARARGS, NULL},
	 { "InstancVector_iterator", _wrap_InstancVector_iterator, METH_O, NULL},
	 { "InstancVector___nonzero__", _wrap_InstancVector___nonzero__, METH_O, NULL},
	 { "InstancVector___bool__", _wrap_InstancVector___bool__, METH_O, NULL},
	 { "InstancVector___len__", _wrap_InstancVector___len__, METH_O, NULL},
	 { "InstancVector___getslice__", _wrap_InstancVector___getslice__, METH_VARARGS, NULL},
	 { "InstancVector___setslice__", _wrap_InstancVector___setslice__, METH_VARARGS, NULL},
	 { "InstancVector___delslice__", _wrap_InstancVector___delslice__, METH_VARARGS, NULL},
	 { "InstancVector___delitem__", _wrap_InstancVector___delitem__, METH_VARARGS, NULL},
	 { "InstancVector___getitem__", _wrap_InstancVector___getitem__, METH_VARARGS, NULL},
	 { "InstancVector___setitem__", _wrap_InstancVector___setitem__, METH_VARARGS, NULL},
	 { "InstancVector_pop", _wrap_InstancVector_pop, METH_O, NULL},
	 { "InstancVector_append", _wrap_InstancVector_append, METH_VARARGS, NULL},
	 { "InstancVector_empty", _wrap_InstancVector_empty, METH_O, NULL},
	 { "InstancVector_size", _wrap_InstancVector_size, METH_O, NULL},
	 { "InstancVector_swap", _wrap_InstancVector_swap, METH_VARARGS, NULL},
	 { "InstancVector_begin", _wrap_InstancVector_begin, METH_O, NULL},
	 { "InstancVector_end", _wrap_InstancVector_end, METH_O, NULL},
	 { "InstancVector_rbegin", _wrap_InstancVector_rbegin, METH_O, NULL},
	 { "InstancVector_rend", _wrap_InstancVector_rend, METH_O, NULL},
	 { "InstancVector_clear", _wrap_InstancVector_clear, METH_O, NULL},
	 { "InstancVector_get_allocator", _wrap_InstancVector_get_allocator, METH_O, NULL},
	 { "InstancVector_pop_back", _wrap_InstancVector_pop_back, METH_O, NULL},
	 { "InstancVector_erase", _wrap_InstancVector_erase, METH_VARARGS, NULL},
	 { "new_InstancVector", _wrap_new_InstancVector, METH_VARARGS, NULL},
	 { "InstancVector_push_back", _wrap_InstancVector_push_back, METH_VARARGS, NULL},
	 { "InstancVector_front", _wrap_InstancVector_front, METH_O, NULL},
	 { "InstancVector_back", _wrap_InstancVector_back, METH_O, NULL},
	 { "InstancVector_assign", _wrap_InstancVector_assign, METH_VARARGS, NULL},
	 { "InstancVector_resize", _wrap_InstancVector_resize, METH_VARARGS, NULL},
	 { "InstancVector_insert", _wrap_InstancVector_insert, METH_VARARGS, NULL},
	 { "InstancVector_reserve", _wrap_InstancVector_reserve, METH_VARARGS, NULL},
	 { "InstancVector_capacity", _wrap_InstancVector_capacity, METH_O, NULL},
	 { "delete_InstancVector", _wrap_delete_InstancVector, METH_O, NULL},
	 { "InstancVector_swigregister", InstancVector_swigregister, METH_O, NULL},
	 { "InstancVector_swiginit", InstancVector_swiginit, METH_VARARGS, NULL},
	 { "ExtMethodVector_iterator", _wrap_ExtMethodVector_iterator, METH_O, NULL},
	 { "ExtMethodVector___nonzero__", _wrap_ExtMethodVector___nonzero__, METH_O, NULL},
	 { "ExtMethodVector___bool__", _wrap_ExtMethodVector___bool__, METH_O, NULL},
	 { "ExtMethodVector___len__", _wrap_ExtMethodVector___len__, METH_O, NULL},
	 { "ExtMethodVector___getslice__", _wrap_ExtMethodVector___getslice__, METH_VARARGS, NULL},
	 { "ExtMethodVector___setslice__", _wrap_ExtMethodVector___setslice__, METH_VARARGS, NULL},
	 { "ExtMethodVector___delslice__", _wrap_ExtMethodVector___delslice__, METH_VARARGS, NULL},
	 { "ExtMethodVector___delitem__", _wrap_ExtMethodVector___delitem__, METH_VARARGS, NULL},
	 { "ExtMethodVector___getitem__", _wrap_ExtMethodVector___getitem__, METH_VARARGS, NULL},
	 { "ExtMethodVector___setitem__", _wrap_ExtMethodVector___setitem__, METH_VARARGS, NULL},
	 { "ExtMethodVector_pop", _wrap_ExtMethodVector_pop, METH_O, NULL},
	 { "ExtMethodVector_append", _wrap_ExtMethodVector_append, METH_VARARGS, NULL},
	 { "ExtMethodVector_empty", _wrap_ExtMethodVector_empty, METH_O, NULL},
	 { "ExtMethodVector_size", _wrap_ExtMethodVector_size, METH_O, NULL},
	 { "ExtMethodVector_swap", _wrap_ExtMethodVector_swap, METH_VARARGS, NULL},
	 { "ExtMethodVector_begin", _wrap_ExtMethodVector_begin, METH_O, NULL},
	 { "ExtMethodVector_end", _wrap_ExtMethodVector_end, METH_O, NULL},
	 { "ExtMethodVector_rbegin", _wrap_ExtMethodVector_rbegin, METH_O, NULL},
	 { "ExtMethodVector_rend", _wrap_ExtMethodVector_rend, METH_O, NULL},
	 { "ExtMethodVector_clear", _wrap_ExtMethodVector_clear, METH_O, NULL},
	 { "ExtMethodVector_get_allocator", _wrap_ExtMethodVector_get_allocator, METH_O, NULL},
	 { "ExtMethodVector_pop_back", _wrap_ExtMethodVector_pop_back, METH_O, NULL},
	 { "ExtMethodVector_erase", _wrap_ExtMethodVector_erase, METH_VARARGS, NULL},
	 { "new_ExtMethodVector", _wrap_new_ExtMethodVector, METH_VARARGS, NULL},
	 { "ExtMethodVector_push_back", _wrap_ExtMethodVector_push_back, METH_VARARGS, NULL},
	 { "ExtMethodVector_front", _wrap_ExtMethodVector_front, METH_O, NULL},
	 { "ExtMethodVector_back", _wrap_ExtMethodVector_back, METH_O, NULL},
	 { "ExtMethodVector_assign", _wrap_ExtMethodVector_assign, METH_VARARGS, NULL},
	 { "ExtMethodVector_resize", _wrap_ExtMethodVector_resize, METH_VARARGS, NULL},
	 { "ExtMethodVector_insert", _wrap_ExtMethodVector_insert, METH_VARARGS, NULL},
	 { "ExtMethodVector_reserve", _wrap_ExtMethodVector_reserve, METH_VARARGS, NULL},
	 { "ExtMethodVector_capacity", _wrap_ExtMethodVector_capacity, METH_O, NULL},
	 { "delete_ExtMethodVector", _wrap_delete_ExtMethodVector, METH_O, NULL},
	 { "ExtMethodVector_swigregister", ExtMethodVector_swigregister, METH_O, NULL},
	 { "ExtMethodVector_swiginit", ExtMethodVector_swiginit, METH_VARARGS, NULL},
	 { "SetInt_at", _wrap_SetInt_at, METH_VARARGS, NULL},
	 { "SetInt_length", _wrap_SetInt_length, METH_O, NULL},
	 { "delete_SetInt", _wrap_delete_SetInt, METH_O, NULL},
	 { "SetInt_swigregister", SetInt_swigregister, METH_O, NULL},
	 { "SetString_at", _wrap_SetString_at, METH_VARARGS, NULL},
	 { "SetString_length", _wrap_SetString_length, METH_O, NULL},
	 { "delete_SetString", _wrap_delete_SetString, METH_O, NULL},
	 { "SetString_swigregister", SetString_swigregister, METH_O, NULL},
	 { "DoubleVector_iterator", _wrap_DoubleVector_iterator, METH_O, NULL},
	 { "DoubleVector___nonzero__", _wrap_DoubleVector___nonzero__, METH_O, NULL},
	 { "DoubleVector___bool__", _wrap_DoubleVector___bool__, METH_O, NULL},
	 { "DoubleVector___len__", _wrap_DoubleVector___len__, METH_O, NULL},
	 { "DoubleVector___getslice__", _wrap_DoubleVector___getslice__, METH_VARARGS, NULL},
	 { "DoubleVector___setslice__", _wrap_DoubleVector___setslice__, METH_VARARGS, NULL},
	 { "DoubleVector___delslice__", _wrap_DoubleVector___delslice__, METH_VARARGS, NULL},
	 { "DoubleVector___delitem__", _wrap_DoubleVector___delitem__, METH_VARARGS, NULL},
	 { "DoubleVector___getitem__", _wrap_DoubleVector___getitem__, METH_VARARGS, NULL},
	 { "DoubleVector___setitem__", _wrap_DoubleVector___setitem__, METH_VARARGS, NULL},
	 { "DoubleVector_pop", _wrap_DoubleVector_pop, METH_O, NULL},
	 { "DoubleVector_append", _wrap_DoubleVector_append, METH_VARARGS, NULL},
	 { "DoubleVector_empty", _wrap_DoubleVector_empty, METH_O, NULL},
	 { "DoubleVector_size", _wrap_DoubleVector_size, METH_O, NULL},
	 { "DoubleVector_swap", _wrap_DoubleVector_swap, METH_VARARGS, NULL},
	 { "DoubleVector_begin", _wrap_DoubleVector_begin, METH_O, NULL},
	 { "DoubleVector_end", _wrap_DoubleVector_end, METH_O, NULL},
	 { "DoubleVector_rbegin", _wrap_DoubleVector_rbegin, METH_O, NULL},
	 { "DoubleVector_rend", _wrap_DoubleVector_rend, METH_O, NULL},
	 { "DoubleVector_clear", _wrap_DoubleVector_clear, METH_O, NULL},
	 { "DoubleVector_get_allocator", _wrap_DoubleVector_get_allocator, METH_O, NULL},
	 { "DoubleVector_pop_back", _wrap_DoubleVector_pop_back, METH_O, NULL},
	 { "DoubleVector_erase", _wrap_DoubleVector_erase, METH_VARARGS, NULL},
	 { "new_DoubleVector", _wrap_new_DoubleVector, METH_VARARGS, NULL},
	 { "DoubleVector_push_back", _wrap_DoubleVector_push_back, METH_VARARGS, NULL},
	 { "DoubleVector_front", _wrap_DoubleVector_front, METH_O, NULL},
	 { "DoubleVector_back", _wrap_DoubleVector_back, METH_O, NULL},
	 { "DoubleVector_assign", _wrap_DoubleVector_assign, METH_VARARGS, NULL},
	 { "DoubleVector_resize", _wrap_DoubleVector_resize, METH_VARARGS, NULL},
	 { "DoubleVector_insert", _wrap_DoubleVector_insert, METH_VARARGS, NULL},
	 { "DoubleVector_reserve", _wrap_DoubleVector_reserve, METH_VARARGS, NULL},
	 { "DoubleVector_capacity", _wrap_DoubleVector_capacity, METH_O, NULL},
	 { "delete_DoubleVector", _wrap_delete_DoubleVector, METH_O, NULL},
	 { "DoubleVector_swigregister", DoubleVector_swigregister, METH_O, NULL},
	 { "DoubleVector_swiginit", DoubleVector_swiginit, METH_VARARGS, NULL},
	 { "VectorDoubleVector_iterator", _wrap_VectorDoubleVector_iterator, METH_O, NULL},
	 { "VectorDoubleVector___nonzero__", _wrap_VectorDoubleVector___nonzero__, METH_O, NULL},
	 { "VectorDoubleVector___bool__", _wrap_VectorDoubleVector___bool__, METH_O, NULL},
	 { "VectorDoubleVector___len__", _wrap_VectorDoubleVector___len__, METH_O, NULL},
	 { "VectorDoubleVector___getslice__", _wrap_VectorDoubleVector___getslice__, METH_VARARGS, NULL},
	 { "VectorDoubleVector___setslice__", _wrap_VectorDoubleVector___setslice__, METH_VARARGS, NULL},
	 { "VectorDoubleVector___delslice__", _wrap_VectorDoubleVector___delslice__, METH_VARARGS, NULL},
	 { "VectorDoubleVector___delitem__", _wrap_VectorDoubleVector___delitem__, METH_VARARGS, NULL},
	 { "VectorDoubleVector___getitem__", _wrap_VectorDoubleVector___getitem__, METH_VARARGS, NULL},
	 { "VectorDoubleVector___setitem__", _wrap_VectorDoubleVector___setitem__, METH_VARARGS, NULL},
	 { "VectorDoubleVector_pop", _wrap_VectorDoubleVector_pop, METH_O, NULL},
	 { "VectorDoubleVector_append", _wrap_VectorDoubleVector_append, METH_VARARGS, NULL},
	 { "VectorDoubleVector_empty", _wrap_VectorDoubleVector_empty, METH_O, NULL},
	 { "VectorDoubleVector_size", _wrap_VectorDoubleVector_size, METH_O, NULL},
	 { "VectorDoubleVector_swap", _wrap_VectorDoubleVector_swap, METH_VARARGS, NULL},
	 { "VectorDoubleVector_begin", _wrap_VectorDoubleVector_begin, METH_O, NULL},
	 { "VectorDoubleVector_end", _wrap_VectorDoubleVector_end, METH_O, NULL},
	 { "VectorDoubleVector_rbegin", _wrap_VectorDoubleVector_rbegin, METH_O, NULL},
	 { "VectorDoubleVector_rend", _wrap_VectorDoubleVector_rend, METH_O, NULL},
	 { "VectorDoubleVector_clear", _wrap_VectorDoubleVector_clear, METH_O, NULL},
	 { "VectorDoubleVector_get_allocator", _wrap_VectorDoubleVector_get_allocator, METH_O, NULL},
	 { "VectorDoubleVector_pop_back", _wrap_VectorDoubleVector_pop_back, METH_O, NULL},
	 { "VectorDoubleVector_erase", _wrap_VectorDoubleVector_erase, METH_VARARGS, NULL},
	 { "new_VectorDoubleVector", _wrap_new_VectorDoubleVector, METH_VARARGS, NULL},
	 { "VectorDoubleVector_push_back", _wrap_VectorDoubleVector_push_back, METH_VARARGS, NULL},
	 { "VectorDoubleVector_front", _wrap_VectorDoubleVector_front, METH_O, NULL},
	 { "VectorDoubleVector_back", _wrap_VectorDoubleVector_back, METH_O, NULL},
	 { "VectorDoubleVector_assign", _wrap_VectorDoubleVector_assign, METH_VARARGS, NULL},
	 { "VectorDoubleVector_resize", _wrap_VectorDoubleVector_resize, METH_VARARGS, NULL},
	 { "VectorDoubleVector_insert", _wrap_VectorDoubleVector_insert, METH_VARARGS, NULL},
	 { "VectorDoubleVector_reserve", _wrap_VectorDoubleVector_reserve, METH_VARARGS, NULL},
	 { "VectorDoubleVector_capacity", _wrap_VectorDoubleVector_capacity, METH_O, NULL},
	 { "delete_VectorDoubleVector", _wrap_delete_VectorDoubleVector, METH_O, NULL},
	 { "VectorDoubleVector_swigregister", VectorDoubleVector_swigregister, METH_O, NULL},
	 { "VectorDoubleVector_swiginit", VectorDoubleVector_swiginit, METH_VARARGS, NULL},
	 { "IntVector_iterator", _wrap_IntVector_iterator, METH_O, NULL},
	 { "IntVector___nonzero__", _wrap_IntVector___nonzero__, METH_O, NULL},
	 { "IntVector___bool__", _wrap_IntVector___bool__, METH_O, NULL},
	 { "IntVector___len__", _wrap_IntVector___len__, METH_O, NULL},
	 { "IntVector___getslice__", _wrap_IntVector___getslice__, METH_VARARGS, NULL},
	 { "IntVector___setslice__", _wrap_IntVector___setslice__, METH_VARARGS, NULL},
	 { "IntVector___delslice__", _wrap_IntVector___delslice__, METH_VARARGS, NULL},
	 { "IntVector___delitem__", _wrap_IntVector___delitem__, METH_VARARGS, NULL},
	 { "IntVector___getitem__", _wrap_IntVector___getitem__, METH_VARARGS, NULL},
	 { "IntVector___setitem__", _wrap_IntVector___setitem__, METH_VARARGS, NULL},
	 { "IntVector_pop", _wrap_IntVector_pop, METH_O, NULL},
	 { "IntVector_append", _wrap_IntVector_append, METH_VARARGS, NULL},
	 { "IntVector_empty", _wrap_IntVector_empty, METH_O, NULL},
	 { "IntVector_size", _wrap_IntVector_size, METH_O, NULL},
	 { "IntVector_swap", _wrap_IntVector_swap, METH_VARARGS, NULL},
	 { "IntVector_begin", _wrap_IntVector_begin, METH_O, NULL},
	 { "IntVector_end", _wrap_IntVector_end, METH_O, NULL},
	 { "IntVector_rbegin", _wrap_IntVector_rbegin, METH_O, NULL},
	 { "IntVector_rend", _wrap_IntVector_rend, METH_O, NULL},
	 { "IntVector_clear", _wrap_IntVector_clear, METH_O, NULL},
	 { "IntVector_get_allocator", _wrap_IntVector_get_allocator, METH_O, NULL},
	 { "IntVector_pop_back", _wrap_IntVector_pop_back, METH_O, NULL},
	 { "IntVector_erase", _wrap_IntVector_erase, METH_VARARGS, NULL},
	 { "new_IntVector", _wrap_new_IntVector, METH_VARARGS, NULL},
	 { "IntVector_push_back", _wrap_IntVector_push_back, METH_VARARGS, NULL},
	 { "IntVector_front", _wrap_IntVector_front, METH_O, NULL},
	 { "IntVector_back", _wrap_IntVector_back, METH_O, NULL},
	 { "IntVector_assign", _wrap_IntVector_assign, METH_VARARGS, NULL},
	 { "IntVector_resize", _wrap_IntVector_resize, METH_VARARGS, NULL},
	 { "IntVector_insert", _wrap_IntVector_insert, METH_VARARGS, NULL},
	 { "IntVector_reserve", _wrap_IntVector_reserve, METH_VARARGS, NULL},
	 { "IntVector_capacity", _wrap_IntVector_capacity, METH_O, NULL},
	 { "delete_IntVector", _wrap_delete_IntVector, METH_O, NULL},
	 { "IntVector_swigregister", IntVector_swigregister, METH_O, NULL},
	 { "IntVector_swiginit", IntVector_swiginit, METH_VARARGS, NULL},
	 { "CurveVector_iterator", _wrap_CurveVector_iterator, METH_O, NULL},
	 { "CurveVector___nonzero__", _wrap_CurveVector___nonzero__, METH_O, NULL},
	 { "CurveVector___bool__", _wrap_CurveVector___bool__, METH_O, NULL},
	 { "CurveVector___len__", _wrap_CurveVector___len__, METH_O, NULL},
	 { "CurveVector___getslice__", _wrap_CurveVector___getslice__, METH_VARARGS, NULL},
	 { "CurveVector___setslice__", _wrap_CurveVector___setslice__, METH_VARARGS, NULL},
	 { "CurveVector___delslice__", _wrap_CurveVector___delslice__, METH_VARARGS, NULL},
	 { "CurveVector___delitem__", _wrap_CurveVector___delitem__, METH_VARARGS, NULL},
	 { "CurveVector___getitem__", _wrap_CurveVector___getitem__, METH_VARARGS, NULL},
	 { "CurveVector___setitem__", _wrap_CurveVector___setitem__, METH_VARARGS, NULL},
	 { "CurveVector_pop", _wrap_CurveVector_pop, METH_O, NULL},
	 { "CurveVector_append", _wrap_CurveVector_append, METH_VARARGS, NULL},
	 { "CurveVector_empty", _wrap_CurveVector_empty, METH_O, NULL},
	 { "CurveVector_size", _wrap_CurveVector_size, METH_O, NULL},
	 { "CurveVector_swap", _wrap_CurveVector_swap, METH_VARARGS, NULL},
	 { "CurveVector_begin", _wrap_CurveVector_begin, METH_O, NULL},
	 { "CurveVector_end", _wrap_CurveVector_end, METH_O, NULL},
	 { "CurveVector_rbegin", _wrap_CurveVector_rbegin, METH_O, NULL},
	 { "CurveVector_rend", _wrap_CurveVector_rend, METH_O, NULL},
	 { "CurveVector_clear", _wrap_CurveVector_clear, METH_O, NULL},
	 { "CurveVector_get_allocator", _wrap_CurveVector_get_allocator, METH_O, NULL},
	 { "CurveVector_pop_back", _wrap_CurveVector_pop_back, METH_O, NULL},
	 { "CurveVector_erase", _wrap_CurveVector_erase, METH_VARARGS, NULL},
	 { "new_CurveVector", _wrap_new_CurveVector, METH_VARARGS, NULL},
	 { "CurveVector_push_back", _wrap_CurveVector_push_back, METH_VARARGS, NULL},
	 { "CurveVector_front", _wrap_CurveVector_front, METH_O, NULL},
	 { "CurveVector_back", _wrap_CurveVector_back, METH_O, NULL},
	 { "CurveVector_assign", _wrap_CurveVector_assign, METH_VARARGS, NULL},
	 { "CurveVector_insert", _wrap_CurveVector_insert, METH_VARARGS, NULL},
	 { "CurveVector_reserve", _wrap_CurveVector_reserve, METH_VARARGS, NULL},
	 { "CurveVector_capacity", _wrap_CurveVector_capacity, METH_O, NULL},
	 { "delete_CurveVector", _wrap_delete_CurveVector, METH_O, NULL},
	 { "CurveVector_swigregister", CurveVector_swigregister, METH_O, NULL},
	 { "CurveVector_swiginit", CurveVector_swiginit, METH_VARARGS, NULL},
	 { "StringVector_iterator", _wrap_StringVector_iterator, METH_O, NULL},
	 { "StringVector___nonzero__", _wrap_StringVector___nonzero__, METH_O, NULL},
	 { "StringVector___bool__", _wrap_StringVector___bool__, METH_O, NULL},
	 { "StringVector___len__", _wrap_StringVector___len__, METH_O, NULL},
	 { "StringVector___getslice__", _wrap_StringVector___getslice__, METH_VARARGS, NULL},
	 { "StringVector___setslice__", _wrap_StringVector___setslice__, METH_VARARGS, NULL},
	 { "StringVector___delslice__", _wrap_StringVector___delslice__, METH_VARARGS, NULL},
	 { "StringVector___delitem__", _wrap_StringVector___delitem__, METH_VARARGS, NULL},
	 { "StringVector___getitem__", _wrap_StringVector___getitem__, METH_VARARGS, NULL},
	 { "StringVector___setitem__", _wrap_StringVector___setitem__, METH_VARARGS, NULL},
	 { "StringVector_pop", _wrap_StringVector_pop, METH_O, NULL},
	 { "StringVector_append", _wrap_StringVector_append, METH_VARARGS, NULL},
	 { "StringVector_empty", _wrap_StringVector_empty, METH_O, NULL},
	 { "StringVector_size", _wrap_StringVector_size, METH_O, NULL},
	 { "StringVector_swap", _wrap_StringVector_swap, METH_VARARGS, NULL},
	 { "StringVector_begin", _wrap_StringVector_begin, METH_O, NULL},
	 { "StringVector_end", _wrap_StringVector_end, METH_O, NULL},
	 { "StringVector_rbegin", _wrap_StringVector_rbegin, METH_O, NULL},
	 { "StringVector_rend", _wrap_StringVector_rend, METH_O, NULL},
	 { "StringVector_clear", _wrap_StringVector_clear, METH_O, NULL},
	 { "StringVector_get_allocator", _wrap_StringVector_get_allocator, METH_O, NULL},
	 { "StringVector_pop_back", _wrap_StringVector_pop_back, METH_O, NULL},
	 { "StringVector_erase", _wrap_StringVector_erase, METH_VARARGS, NULL},
	 { "new_StringVector", _wrap_new_StringVector, METH_VARARGS, NULL},
	 { "StringVector_push_back", _wrap_StringVector_push_back, METH_VARARGS, NULL},
	 { "StringVector_front", _wrap_StringVector_front, METH_O, NULL},
	 { "StringVector_back", _wrap_StringVector_back, METH_O, NULL},
	 { "StringVector_assign", _wrap_StringVector_assign, METH_VARARGS, NULL},
	 { "StringVector_resize", _wrap_StringVector_resize, METH_VARARGS, NULL},
	 { "StringVector_insert", _wrap_StringVector_insert, METH_VARARGS, NULL},
	 { "StringVector_reserve", _wrap_StringVector_reserve, METH_VARARGS, NULL},
	 { "StringVector_capacity", _wrap_StringVector_capacity, METH_O, NULL},
	 { "delete_StringVector", _wrap_delete_StringVector, METH_O, NULL},
	 { "StringVector_swigregister", StringVector_swigregister, METH_O, NULL},
	 { "StringVector_swiginit", StringVector_swiginit, METH_VARARGS, NULL},
	 { "IntStringMap_iterator", _wrap_IntStringMap_iterator, METH_O, NULL},
	 { "IntStringMap___nonzero__", _wrap_IntStringMap___nonzero__, METH_O, NULL},
	 { "IntStringMap___bool__", _wrap_IntStringMap___bool__, METH_O, NULL},
	 { "IntStringMap___len__", _wrap_IntStringMap___len__, METH_O, NULL},
	 { "IntStringMap___getitem__", _wrap_IntStringMap___getitem__, METH_VARARGS, NULL},
	 { "IntStringMap___delitem__", _wrap_IntStringMap___delitem__, METH_VARARGS, NULL},
	 { "IntStringMap_has_key", _wrap_IntStringMap_has_key, METH_VARARGS, NULL},
	 { "IntStringMap_keys", _wrap_IntStringMap_keys, METH_O, NULL},
	 { "IntStringMap_values", _wrap_IntStringMap_values, METH_O, NULL},
	 { "IntStringMap_items", _wrap_IntStringMap_items, METH_O, NULL},
	 { "IntStringMap___contains__", _wrap_IntStringMap___contains__, METH_VARARGS, NULL},
	 { "IntStringMap_key_iterator", _wrap_IntStringMap_key_iterator, METH_O, NULL},
	 { "IntStringMap_value_iterator", _wrap_IntStringMap_value_iterator, METH_O, NULL},
	 { "IntStringMap___setitem__", _wrap_IntStringMap___setitem__, METH_VARARGS, NULL},
	 { "IntStringMap_asdict", _wrap_IntStringMap_asdict, METH_O, NULL},
	 { "new_IntStringMap", _wrap_new_IntStringMap, METH_VARARGS, NULL},
	 { "IntStringMap_empty", _wrap_IntStringMap_empty, METH_O, NULL},
	 { "IntStringMap_size", _wrap_IntStringMap_size, METH_O, NULL},
	 { "IntStringMap_swap", _wrap_IntStringMap_swap, METH_VARARGS, NULL},
	 { "IntStringMap_begin", _wrap_IntStringMap_begin, METH_O, NULL},
	 { "IntStringMap_end", _wrap_IntStringMap_end, METH_O, NULL},
	 { "IntStringMap_rbegin", _wrap_IntStringMap_rbegin, METH_O, NULL},
	 { "IntStringMap_rend", _wrap_IntStringMap_rend, METH_O, NULL},
	 { "IntStringMap_clear", _wrap_IntStringMap_clear, METH_O, NULL},
	 { "IntStringMap_get_allocator", _wrap_IntStringMap_get_allocator, METH_O, NULL},
	 { "IntStringMap_count", _wrap_IntStringMap_count, METH_VARARGS, NULL},
	 { "IntStringMap_erase", _wrap_IntStringMap_erase, METH_VARARGS, NULL},
	 { "IntStringMap_find", _wrap_IntStringMap_find, METH_VARARGS, NULL},
	 { "IntStringMap_lower_bound", _wrap_IntStringMap_lower_bound, METH_VARARGS, NULL},
	 { "IntStringMap_upper_bound", _wrap_IntStringMap_upper_bound, METH_VARARGS, NULL},
	 { "delete_IntStringMap", _wrap_delete_IntStringMap, METH_O, NULL},
	 { "IntStringMap_swigregister", IntStringMap_swigregister, METH_O, NULL},
	 { "IntStringMap_swiginit", IntStringMap_swiginit, METH_VARARGS, NULL},
	 { "AnnotationVector_iterator", _wrap_AnnotationVector_iterator, METH_O, NULL},
	 { "AnnotationVector___nonzero__", _wrap_AnnotationVector___nonzero__, METH_O, NULL},
	 { "AnnotationVector___bool__", _wrap_AnnotationVector___bool__, METH_O, NULL},
	 { "AnnotationVector___len__", _wrap_AnnotationVector___len__, METH_O, NULL},
	 { "AnnotationVector___getslice__", _wrap_AnnotationVector___getslice__, METH_VARARGS, NULL},
	 { "AnnotationVector___setslice__", _wrap_AnnotationVector___setslice__, METH_VARARGS, NULL},
	 { "AnnotationVector___delslice__", _wrap_AnnotationVector___delslice__, METH_VARARGS, NULL},
	 { "AnnotationVector___delitem__", _wrap_AnnotationVector___delitem__, METH_VARARGS, NULL},
	 { "AnnotationVector___getitem__", _wrap_AnnotationVector___getitem__, METH_VARARGS, NULL},
	 { "AnnotationVector___setitem__", _wrap_AnnotationVector___setitem__, METH_VARARGS, NULL},
	 { "AnnotationVector_pop", _wrap_AnnotationVector_pop, METH_O, NULL},
	 { "AnnotationVector_append", _wrap_AnnotationVector_append, METH_VARARGS, NULL},
	 { "AnnotationVector_empty", _wrap_AnnotationVector_empty, METH_O, NULL},
	 { "AnnotationVector_size", _wrap_AnnotationVector_size, METH_O, NULL},
	 { "AnnotationVector_swap", _wrap_AnnotationVector_swap, METH_VARARGS, NULL},
	 { "AnnotationVector_begin", _wrap_AnnotationVector_begin, METH_O, NULL},
	 { "AnnotationVector_end", _wrap_AnnotationVector_end, METH_O, NULL},
	 { "AnnotationVector_rbegin", _wrap_AnnotationVector_rbegin, METH_O, NULL},
	 { "AnnotationVector_rend", _wrap_AnnotationVector_rend, METH_O, NULL},
	 { "AnnotationVector_clear", _wrap_AnnotationVector_clear, METH_O, NULL},
	 { "AnnotationVector_get_allocator", _wrap_AnnotationVector_get_allocator, METH_O, NULL},
	 { "AnnotationVector_pop_back", _wrap_AnnotationVector_pop_back, METH_O, NULL},
	 { "AnnotationVector_erase", _wrap_AnnotationVector_erase, METH_VARARGS, NULL},
	 { "new_AnnotationVector", _wrap_new_AnnotationVector, METH_VARARGS, NULL},
	 { "AnnotationVector_push_back", _wrap_AnnotationVector_push_back, METH_VARARGS, NULL},
	 { "AnnotationVector_front", _wrap_AnnotationVector_front, METH_O, NULL},
	 { "AnnotationVector_back", _wrap_AnnotationVector_back, METH_O, NULL},
	 { "AnnotationVector_assign", _wrap_AnnotationVector_assign, METH_VARARGS, NULL},
	 { "AnnotationVector_resize", _wrap_AnnotationVector_resize, METH_VARARGS, NULL},
	 { "AnnotationVector_insert", _wrap_AnnotationVector_insert, METH_VARARGS, NULL},
	 { "AnnotationVector_reserve", _wrap_AnnotationVector_reserve, METH_VARARGS, NULL},
	 { "AnnotationVector_capacity", _wrap_AnnotationVector_capacity, METH_O, NULL},
	 { "delete_AnnotationVector", _wrap_delete_AnnotationVector, METH_O, NULL},
	 { "AnnotationVector_swigregister", AnnotationVector_swigregister, METH_O, NULL},
	 { "AnnotationVector_swiginit", AnnotationVector_swiginit, METH_VARARGS, NULL},
	 { "UnitsVector_iterator", _wrap_UnitsVector_iterator, METH_O, NULL},
	 { "UnitsVector___nonzero__", _wrap_UnitsVector___nonzero__, METH_O, NULL},
	 { "UnitsVector___bool__", _wrap_UnitsVector___bool__, METH_O, NULL},
	 { "UnitsVector___len__", _wrap_UnitsVector___len__, METH_O, NULL},
	 { "UnitsVector___getslice__", _wrap_UnitsVector___getslice__, METH_VARARGS, NULL},
	 { "UnitsVector___setslice__", _wrap_UnitsVector___setslice__, METH_VARARGS, NULL},
	 { "UnitsVector___delslice__", _wrap_UnitsVector___delslice__, METH_VARARGS, NULL},
	 { "UnitsVector___delitem__", _wrap_UnitsVector___delitem__, METH_VARARGS, NULL},
	 { "UnitsVector___getitem__", _wrap_UnitsVector___getitem__, METH_VARARGS, NULL},
	 { "UnitsVector___setitem__", _wrap_UnitsVector___setitem__, METH_VARARGS, NULL},
	 { "UnitsVector_pop", _wrap_UnitsVector_pop, METH_O, NULL},
	 { "UnitsVector_append", _wrap_UnitsVector_append, METH_VARARGS, NULL},
	 { "UnitsVector_empty", _wrap_UnitsVector_empty, METH_O, NULL},
	 { "UnitsVector_size", _wrap_UnitsVector_size, METH_O, NULL},
	 { "UnitsVector_swap", _wrap_UnitsVector_swap, METH_VARARGS, NULL},
	 { "UnitsVector_begin", _wrap_UnitsVector_begin, METH_O, NULL},
	 { "UnitsVector_end", _wrap_UnitsVector_end, METH_O, NULL},
	 { "UnitsVector_rbegin", _wrap_UnitsVector_rbegin, METH_O, NULL},
	 { "UnitsVector_rend", _wrap_UnitsVector_rend, METH_O, NULL},
	 { "UnitsVector_clear", _wrap_UnitsVector_clear, METH_O, NULL},
	 { "UnitsVector_get_allocator", _wrap_UnitsVector_get_allocator, METH_O, NULL},
	 { "UnitsVector_pop_back", _wrap_UnitsVector_pop_back, METH_O, NULL},
	 { "UnitsVector_erase", _wrap_UnitsVector_erase, METH_VARARGS, NULL},
	 { "new_UnitsVector", _wrap_new_UnitsVector, METH_VARARGS, NULL},
	 { "UnitsVector_push_back", _wrap_UnitsVector_push_back, METH_VARARGS, NULL},
	 { "UnitsVector_front", _wrap_UnitsVector_front, METH_O, NULL},
	 { "UnitsVector_back", _wrap_UnitsVector_back, METH_O, NULL},
	 { "UnitsVector_assign", _wrap_UnitsVector_assign, METH_VARARGS, NULL},
	 { "UnitsVector_resize", _wrap_UnitsVector_resize, METH_VARARGS, NULL},
	 { "UnitsVector_insert", _wrap_UnitsVector_insert, METH_VARARGS, NULL},
	 { "UnitsVector_reserve", _wrap_UnitsVector_reserve, METH_VARARGS, NULL},
	 { "UnitsVector_capacity", _wrap_UnitsVector_capacity, METH_O, NULL},
	 { "delete_UnitsVector", _wrap_delete_UnitsVector, METH_O, NULL},
	 { "UnitsVector_swigregister", UnitsVector_swigregister, METH_O, NULL},
	 { "UnitsVector_swiginit", UnitsVector_swiginit, METH_VARARGS, NULL},
	 { "TypeSet_iterator", _wrap_TypeSet_iterator, METH_O, NULL},
	 { "TypeSet___nonzero__", _wrap_TypeSet___nonzero__, METH_O, NULL},
	 { "TypeSet___bool__", _wrap_TypeSet___bool__, METH_O, NULL},
	 { "TypeSet___len__", _wrap_TypeSet___len__, METH_O, NULL},
	 { "TypeSet_append", _wrap_TypeSet_append, METH_VARARGS, NULL},
	 { "TypeSet___contains__", _wrap_TypeSet___contains__, METH_VARARGS, NULL},
	 { "TypeSet___getitem__", _wrap_TypeSet___getitem__, METH_VARARGS, NULL},
	 { "TypeSet_add", _wrap_TypeSet_add, METH_VARARGS, NULL},
	 { "TypeSet_discard", _wrap_TypeSet_discard, METH_VARARGS, NULL},
	 { "new_TypeSet", _wrap_new_TypeSet, METH_VARARGS, NULL},
	 { "TypeSet_empty", _wrap_TypeSet_empty, METH_O, NULL},
	 { "TypeSet_size", _wrap_TypeSet_size, METH_O, NULL},
	 { "TypeSet_clear", _wrap_TypeSet_clear, METH_O, NULL},
	 { "TypeSet_swap", _wrap_TypeSet_swap, METH_VARARGS, NULL},
	 { "TypeSet_count", _wrap_TypeSet_count, METH_VARARGS, NULL},
	 { "TypeSet_begin", _wrap_TypeSet_begin, METH_O, NULL},
	 { "TypeSet_end", _wrap_TypeSet_end, METH_O, NULL},
	 { "TypeSet_rbegin", _wrap_TypeSet_rbegin, METH_O, NULL},
	 { "TypeSet_rend", _wrap_TypeSet_rend, METH_O, NULL},
	 { "TypeSet_erase", _wrap_TypeSet_erase, METH_VARARGS, NULL},
	 { "TypeSet_find", _wrap_TypeSet_find, METH_VARARGS, NULL},
	 { "TypeSet_lower_bound", _wrap_TypeSet_lower_bound, METH_VARARGS, NULL},
	 { "TypeSet_upper_bound", _wrap_TypeSet_upper_bound, METH_VARARGS, NULL},
	 { "TypeSet_equal_range", _wrap_TypeSet_equal_range, METH_VARARGS, NULL},
	 { "TypeSet_insert", _wrap_TypeSet_insert, METH_VARARGS, NULL},
	 { "delete_TypeSet", _wrap_delete_TypeSet, METH_O, NULL},
	 { "TypeSet_swigregister", TypeSet_swigregister, METH_O, NULL},
	 { "TypeSet_swiginit", TypeSet_swiginit, METH_VARARGS, NULL},
	 { "Reporter_setErrorCallback", _wrap_Reporter_setErrorCallback, METH_VARARGS, NULL},
	 { "Reporter_setPythonErrorCallback", _wrap_Reporter_setPythonErrorCallback, METH_VARARGS, NULL},
	 { "Reporter_clearPythonErrorCallback", _wrap_Reporter_clearPythonErrorCallback, METH_O, NULL},
	 { "Reporter_reportError", _wrap_Reporter_reportError, METH_VARARGS, NULL},
	 { "Reporter_reportNote", _wrap_Reporter_reportNote, METH_VARARGS, NULL},
	 { "Reporter_reportWarning", _wrap_Reporter_reportWarning, METH_VARARGS, NULL},
	 { "Reporter_reportSuccess", _wrap_Reporter_reportSuccess, METH_VARARGS, NULL},
	 { "Reporter_swigregister", Reporter_swigregister, METH_O, NULL},
	 { "getReporter", _wrap_getReporter, METH_NOARGS, NULL},
	 { "Dimensions_getBaseUnit", _wrap_Dimensions_getBaseUnit, METH_O, NULL},
	 { "new_Dimensions", _wrap_new_Dimensions, METH_VARARGS, NULL},
	 { "Dimensions_getInternalType", _wrap_Dimensions_getInternalType, METH_O, NULL},
	 { "Dimensions_toString", _wrap_Dimensions_toString, METH_O, NULL},
	 { "Dimensions___lt__", _wrap_Dimensions___lt__, METH_VARARGS, NULL},
	 { "Dimensions___eq__", _wrap_Dimensions___eq__, METH_VARARGS, NULL},
	 { "Dimensions___ne__", _wrap_Dimensions___ne__, METH_VARARGS, NULL},
	 { "Dimensions_isDimensionless", _wrap_Dimensions_isDimensionless, METH_O, NULL},
	 { "Dimensions_isWild", _wrap_Dimensions_isWild, METH_O, NULL},
	 { "Dimensions_getFractionNumerator", _wrap_Dimensions_getFractionNumerator, METH_VARARGS, NULL},
	 { "Dimensions_getFractionDenominator", _wrap_Dimensions_getFractionDenominator, METH_VARARGS, NULL},
	 { "delete_Dimensions", _wrap_delete_Dimensions, METH_O, NULL},
	 { "Dimensions_swigregister", Dimensions_swigregister, METH_O, NULL},
	 { "Dimensions_swiginit", Dimensions_swiginit, METH_VARARGS, NULL},
	 { "new_Units", _wrap_new_Units, METH_VARARGS, NULL},
	 { "Units_getName", _wrap_Units_getName, METH_O, NULL},
	 { "Units_getDimensions", _wrap_Units_getDimensions, METH_O, NULL},
	 { "Units_getConversion", _wrap_Units_getConversion, METH_O, NULL},
	 { "Units___eq__", _wrap_Units___eq__, METH_VARARGS, NULL},
	 { "delete_Units", _wrap_delete_Units, METH_O, NULL},
	 { "Units_swigregister", Units_swigregister, METH_O, NULL},
	 { "Units_swiginit", Units_swiginit, METH_VARARGS, NULL},
	 { "new_Library", _wrap_new_Library, METH_VARARGS, NULL},
	 { "delete_Library", _wrap_delete_Library, METH_O, NULL},
	 { "Library_load", _wrap_Library_load, METH_VARARGS, NULL},
	 { "Library_loadString", _wrap_Library_loadString, METH_VARARGS, NULL},
	 { "Library_getLoadErrorMessage", _wrap_Library_getLoadErrorMessage, METH_O, NULL},
	 { "Library_listModules", _wrap_Library_listModules, METH_VARARGS, NULL},
	 { "Library_findType", _wrap_Library_findType, METH_VARARGS, NULL},
	 { "Library_getModules", _wrap_Library_getModules, METH_VARARGS, NULL},
	 { "Library_getModuleTypes", _wrap_Library_getModuleTypes, METH_VARARGS, NULL},
	 { "Library_getExtMethods", _wrap_Library_getExtMethods, METH_O, NULL},
	 { "Library_extMethodTraverse", _wrap_Library_extMethodTraverse, METH_VARARGS, NULL},
	 { "Library_appendToExtMethodVector", _wrap_Library_appendToExtMethodVector, METH_VARARGS, NULL},
	 { "Library_clear", _wrap_Library_clear, METH_O, NULL},
	 { "Library_getAnnotationDatabase", _wrap_Library_getAnnotationDatabase, METH_O, NULL},
	 { "Library_getUnits", _wrap_Library_getUnits, METH_O, NULL},
	 { "Library_getRealAtomTypes", _wrap_Library_getRealAtomTypes, METH_O, NULL},
	 { "Library_swigregister", Library_swigregister, METH_O, NULL},
	 { "Library_swiginit", Library_swiginit, METH_VARARGS, NULL},
	 { "new_SymChar", _wrap_new_SymChar, METH_O, NULL},
	 { "SymChar_toString", _wrap_SymChar_toString, METH_O, NULL},
	 { "SymChar___repr__", _wrap_SymChar___repr__, METH_O, NULL},
	 { "delete_SymChar", _wrap_delete_SymChar, METH_O, NULL},
	 { "SymChar_swigregister", SymChar_swigregister, METH_O, NULL},
	 { "SymChar_swiginit", SymChar_swiginit, METH_VARARGS, NULL},
	 { "Module_getName", _wrap_Module_getName, METH_O, NULL},
	 { "Module_getFilename", _wrap_Module_getFilename, METH_O, NULL},
	 { "Module_getMtime", _wrap_Module_getMtime, METH_O, NULL},
	 { "new_Module", _wrap_new_Module, METH_NOARGS, NULL},
	 { "delete_Module", _wrap_delete_Module, METH_O, NULL},
	 { "Module_swigregister", Module_swigregister, METH_O, NULL},
	 { "Module_swiginit", Module_swiginit, METH_VARARGS, NULL},
	 { "new_Method", _wrap_new_Method, METH_VARARGS, NULL},
	 { "delete_Method", _wrap_delete_Method, METH_O, NULL},
	 { "Method_getInternalType", _wrap_Method_getInternalType, METH_O, NULL},
	 { "Method_getName", _wrap_Method_getName, METH_O, NULL},
	 { "Method_getSym", _wrap_Method_getSym, METH_O, NULL},
	 { "Method_swigregister", Method_swigregister, METH_O, NULL},
	 { "Method_swiginit", Method_swiginit, METH_VARARGS, NULL},
	 { "new_Name", _wrap_new_Name, METH_O, NULL},
	 { "Name_getName", _wrap_Name_getName, METH_O, NULL},
	 { "delete_Name", _wrap_delete_Name, METH_O, NULL},
	 { "Name_swigregister", Name_swigregister, METH_O, NULL},
	 { "Name_swiginit", Name_swiginit, METH_VARARGS, NULL},
	 { "Compiler_instance", _wrap_Compiler_instance, METH_NOARGS, NULL},
	 { "Compiler_getUseRelationSharing", _wrap_Compiler_getUseRelationSharing, METH_O, NULL},
	 { "Compiler_setUseRelationSharing", _wrap_Compiler_setUseRelationSharing, METH_VARARGS, NULL},
	 { "Compiler_setBinaryCompilation", _wrap_Compiler_setBinaryCompilation, METH_VARARGS, NULL},
	 { "Compiler_setVerbosity", _wrap_Compiler_setVerbosity, METH_VARARGS, NULL},
	 { "Compiler_swigregister", Compiler_swigregister, METH_O, NULL},
	 { "getCompiler", _wrap_getCompiler, METH_NOARGS, NULL},
	 { "new_Type", _wrap_new_Type, METH_VARARGS, NULL},
	 { "Type_getName", _wrap_Type_getName, METH_O, NULL},
	 { "Type_getParameterCount", _wrap_Type_getParameterCount, METH_O, NULL},
	 { "Type_getInternalType", _wrap_Type_getInternalType, METH_O, NULL},
	 { "Type_getSimulation", _wrap_Type_getSimulation, METH_VARARGS, NULL},
	 { "Type_getDimensions", _wrap_Type_getDimensions, METH_O, NULL},
	 { "Type_getMethods", _wrap_Type_getMethods, METH_O, NULL},
	 { "Type_getMethod", _wrap_Type_getMethod, METH_VARARGS, NULL},
	 { "Type_isRefinedSolverVar", _wrap_Type_isRefinedSolverVar, METH_O, NULL},
	 { "Type_isRefinedAtom", _wrap_Type_isRefinedAtom, METH_O, NULL},
	 { "Type_isRefinedReal", _wrap_Type_isRefinedReal, METH_O, NULL},
	 { "Type_isRefinedConstant", _wrap_Type_isRefinedConstant, METH_O, NULL},
	 { "Type_isFundamental", _wrap_Type_isFundamental, METH_O, NULL},
	 { "Type_isModel", _wrap_Type_isModel, METH_O, NULL},
	 { "Type_hasParameters", _wrap_Type_hasParameters, METH_O, NULL},
	 { "Type_findMember", _wrap_Type_findMember, METH_VARARGS, NULL},
	 { "Type_getModule", _wrap_Type_getModule, METH_O, NULL},
	 { "Type___lt__", _wrap_Type___lt__, METH_VARARGS, NULL},
	 { "Type___repr__", _wrap_Type___repr__, METH_O, NULL},
	 { "delete_Type", _wrap_delete_Type, METH_O, NULL},
	 { "Type_swigregister", Type_swigregister, METH_O, NULL},
	 { "Type_swiginit", Type_swiginit, METH_VARARGS, NULL},
	 { "new_Instance", _wrap_new_Instance, METH_VARARGS, NULL},
	 { "delete_Instance", _wrap_delete_Instance, METH_O, NULL},
	 { "Instance_getChildren", _wrap_Instance_getChildren, METH_O, NULL},
	 { "Instance_getKindStr", _wrap_Instance_getKindStr, METH_O, NULL},
	 { "Instance_getName", _wrap_Instance_getName, METH_O, NULL},
	 { "Instance_getType", _wrap_Instance_getType, METH_O, NULL},
	 { "Instance_isAtom", _wrap_Instance_isAtom, METH_O, NULL},
	 { "Instance_isFixed", _wrap_Instance_isFixed, METH_O, NULL},
	 { "Instance_isIncluded", _wrap_Instance_isIncluded, METH_O, NULL},
	 { "Instance_isFund", _wrap_Instance_isFund, METH_O, NULL},
	 { "Instance_isConst", _wrap_Instance_isConst, METH_O, NULL},
	 { "Instance_isAssigned", _wrap_Instance_isAssigned, METH_O, NULL},
	 { "Instance_isCompound", _wrap_Instance_isCompound, METH_O, NULL},
	 { "Instance_isRelation", _wrap_Instance_isRelation, METH_O, NULL},
	 { "Instance_isLogicalRelation", _wrap_Instance_isLogicalRelation, METH_O, NULL},
	 { "Instance_isWhen", _wrap_Instance_isWhen, METH_O, NULL},
	 { "Instance_isSet", _wrap_Instance_isSet, METH_O, NULL},
	 { "Instance_isSetInt", _wrap_Instance_isSetInt, METH_O, NULL},
	 { "Instance_isSetString", _wrap_Instance_isSetString, METH_O, NULL},
	 { "Instance_isSetEmpty", _wrap_Instance_isSetEmpty, METH_O, NULL},
	 { "Instance_isArray", _wrap_Instance_isArray, METH_O, NULL},
	 { "Instance_isDefined", _wrap_Instance_isDefined, METH_O, NULL},
	 { "Instance_isBool", _wrap_Instance_isBool, METH_O, NULL},
	 { "Instance_isInt", _wrap_Instance_isInt, METH_O, NULL},
	 { "Instance_isSymbol", _wrap_Instance_isSymbol, METH_O, NULL},
	 { "Instance_isReal", _wrap_Instance_isReal, METH_O, NULL},
	 { "Instance_isModel", _wrap_Instance_isModel, METH_O, NULL},
	 { "Instance_getRealValue", _wrap_Instance_getRealValue, METH_O, NULL},
	 { "Instance_isDimensionless", _wrap_Instance_isDimensionless, METH_O, NULL},
	 { "Instance_getDimensions", _wrap_Instance_getDimensions, METH_O, NULL},
	 { "Instance_getBoolValue", _wrap_Instance_getBoolValue, METH_O, NULL},
	 { "Instance_getIntValue", _wrap_Instance_getIntValue, METH_O, NULL},
	 { "Instance_getSymbolValue", _wrap_Instance_getSymbolValue, METH_O, NULL},
	 { "Instance_getValueAsString", _wrap_Instance_getValueAsString, METH_O, NULL},
	 { "Instance_getWhenAsString", _wrap_Instance_getWhenAsString, METH_VARARGS, NULL},
	 { "Instance_getLogrelAsString", _wrap_Instance_getLogrelAsString, METH_VARARGS, NULL},
	 { "Instance_getRelationAsString", _wrap_Instance_getRelationAsString, METH_VARARGS, NULL},
	 { "Instance_getResidual", _wrap_Instance_getResidual, METH_O, NULL},
	 { "Instance_getLogicalResidual", _wrap_Instance_getLogicalResidual, METH_O, NULL},
	 { "Instance_getPlot", _wrap_Instance_getPlot, METH_O, NULL},
	 { "Instance_isPlottable", _wrap_Instance_isPlottable, METH_O, NULL},
	 { "Instance_getSetIntValue", _wrap_Instance_getSetIntValue, METH_O, NULL},
	 { "Instance_getSetStringValue", _wrap_Instance_getSetStringValue, METH_O, NULL},
	 { "Instance_isChildless", _wrap_Instance_isChildless, METH_O, NULL},
	 { "Instance_setFixed", _wrap_Instance_setFixed, METH_VARARGS, NULL},
	 { "Instance_setIncluded", _wrap_Instance_setIncluded, METH_VARARGS, NULL},
	 { "Instance_setRealValue", _wrap_Instance_setRealValue, METH_VARARGS, NULL},
	 { "Instance_setRealValueWithUnits", _wrap_Instance_setRealValueWithUnits, METH_VARARGS, NULL},
	 { "Instance_setBoolValue", _wrap_Instance_setBoolValue, METH_VARARGS, NULL},
	 { "Instance_setIntValue", _wrap_Instance_setIntValue, METH_VARARGS, NULL},
	 { "Instance_setSymbolValue", _wrap_Instance_setSymbolValue, METH_VARARGS, NULL},
	 { "Instance_write", _wrap_Instance_write, METH_VARARGS, NULL},
	 { "Instance_getStatus", _wrap_Instance_getStatus, METH_O, NULL},
	 { "Instance_setLowerBound", _wrap_Instance_setLowerBound, METH_VARARGS, NULL},
	 { "Instance_setUpperBound", _wrap_Instance_setUpperBound, METH_VARARGS, NULL},
	 { "Instance_setNominal", _wrap_Instance_setNominal, METH_VARARGS, NULL},
	 { "Instance_getLowerBound", _wrap_Instance_getLowerBound, METH_O, NULL},
	 { "Instance_getUpperBound", _wrap_Instance_getUpperBound, METH_O, NULL},
	 { "Instance_getNominal", _wrap_Instance_getNominal, METH_O, NULL},
	 { "Instance_getClique", _wrap_Instance_getClique, METH_O, NULL},
	 { "Instance_getAliases", _wrap_Instance_getAliases, METH_O, NULL},
	 { "Instance___repr__", _wrap_Instance___repr__, METH_O, NULL},
	 { "Instance___getattr__", _wrap_Instance___getattr__, METH_VARARGS, NULL},
	 { "Instance___getitem__", _wrap_Instance___getitem__, METH_VARARGS, NULL},
	 { "Instance___float__", _wrap_Instance___float__, METH_O, NULL},
	 { "Instance_swigregister", Instance_swigregister, METH_O, NULL},
	 { "Instance_swiginit", Instance_swiginit, METH_VARARGS, NULL},
	 { "Registry_setPointer", _wrap_Registry_setPointer, METH_VARARGS, NULL},
	 { "Registry_getInstance", _wrap_Registry_getInstance, METH_VARARGS, NULL},
	 { "Registry_getSimulation", _wrap_Registry_getSimulation, METH_VARARGS, NULL},
	 { "Registry_set", _wrap_Registry_set, METH_VARARGS, NULL},
	 { "new_Registry", _wrap_new_Registry, METH_NOARGS, NULL},
	 { "delete_Registry", _wrap_delete_Registry, METH_O, NULL},
	 { "Registry_swigregister", Registry_swigregister, METH_O, NULL},
	 { "Registry_swiginit", Registry_swiginit, METH_VARARGS, NULL},
	 { "shutdown", _wrap_shutdown, METH_NOARGS, NULL},
	 { "new_Solver", _wrap_new_Solver, METH_VARARGS, NULL},
	 { "Solver_getIndex", _wrap_Solver_getIndex, METH_O, NULL},
	 { "Solver_getName", _wrap_Solver_getName, METH_O, NULL},
	 { "delete_Solver", _wrap_delete_Solver, METH_O, NULL},
	 { "Solver_swigregister", Solver_swigregister, METH_O, NULL},
	 { "Solver_swiginit", Solver_swiginit, METH_VARARGS, NULL},
	 { "getSolvers", _wrap_getSolvers, METH_NOARGS, NULL},
	 { "SingularityInfo_isSingular", _wrap_SingularityInfo_isSingular, METH_O, NULL},
	 { "SingularityInfo_rels_set", _wrap_SingularityInfo_rels_set, METH_VARARGS, NULL},
	 { "SingularityInfo_rels_get", _wrap_SingularityInfo_rels_get, METH_O, NULL},
	 { "SingularityInfo_vars_set", _wrap_SingularityInfo_vars_set, METH_VARARGS, NULL},
	 { "SingularityInfo_vars_get", _wrap_SingularityInfo_vars_get, METH_O, NULL},
	 { "SingularityInfo_freeablevars_set", _wrap_SingularityInfo_freeablevars_set, METH_VARARGS, NULL},
	 { "SingularityInfo_freeablevars_get", _wrap_SingularityInfo_freeablevars_get, METH_O, NULL},
	 { "new_SingularityInfo", _wrap_new_SingularityInfo, METH_NOARGS, NULL},
	 { "delete_SingularityInfo", _wrap_delete_SingularityInfo, METH_O, NULL},
	 { "SingularityInfo_swigregister", SingularityInfo_swigregister, METH_O, NULL},
	 { "SingularityInfo_swiginit", SingularityInfo_swiginit, METH_VARARGS, NULL},
	 { "new_Simulation", _wrap_new_Simulation, METH_VARARGS, NULL},
	 { "delete_Simulation", _wrap_delete_Simulation, METH_O, NULL},
	 { "Simulation_getModel", _wrap_Simulation_getModel, METH_O, NULL},
	 { "Simulation_runDefaultMethod", _wrap_Simulation_runDefaultMethod, METH_O, NULL},
	 { "Simulation_run", _wrap_Simulation_run, METH_VARARGS, NULL},
	 { "Simulation_checkInstance", _wrap_Simulation_checkInstance, METH_VARARGS, NULL},
	 { "Simulation_checkTokens", _wrap_Simulation_checkTokens, METH_O, NULL},
	 { "Simulation_checkStructure", _wrap_Simulation_checkStructure, METH_O, NULL},
	 { "Simulation_checkStatistics", _wrap_Simulation_checkStatistics, METH_O, NULL},
	 { "Simulation_checkDimensions", _wrap_Simulation_checkDimensions, METH_O, NULL},
	 { "Simulation_build", _wrap_Simulation_build, METH_O, NULL},
	 { "Simulation_checkDoF", _wrap_Simulation_checkDoF, METH_O, NULL},
	 { "Simulation_checkStructuralSingularity", _wrap_Simulation_checkStructuralSingularity, METH_O, NULL},
	 { "Simulation_getSingularityInfo", _wrap_Simulation_getSingularityInfo, METH_O, NULL},
	 { "Simulation_solve", _wrap_Simulation_solve, METH_VARARGS, NULL},
	 { "Simulation_presolve", _wrap_Simulation_presolve, METH_VARARGS, NULL},
	 { "Simulation_iterate", _wrap_Simulation_iterate, METH_O, NULL},
	 { "Simulation_postsolve", _wrap_Simulation_postsolve, METH_VARARGS, NULL},
	 { "Simulation_getStatus", _wrap_Simulation_getStatus, METH_O, NULL},
	 { "Simulation_getFixableVariables", _wrap_Simulation_getFixableVariables, METH_O, NULL},
	 { "Simulation_getVariablesNearBounds", _wrap_Simulation_getVariablesNearBounds, METH_VARARGS, NULL},
	 { "Simulation_getVariablesFarFromNominals", _wrap_Simulation_getVariablesFarFromNominals, METH_VARARGS, NULL},
	 { "Simulation_getFixedVariables", _wrap_Simulation_getFixedVariables, METH_O, NULL},
	 { "Simulation_getallVariables", _wrap_Simulation_getallVariables, METH_O, NULL},
	 { "Simulation_getMatrix", _wrap_Simulation_getMatrix, METH_O, NULL},
	 { "Simulation_write", _wrap_Simulation_write, METH_VARARGS, NULL},
	 { "Simulation_setSolver", _wrap_Simulation_setSolver, METH_VARARGS, NULL},
	 { "Simulation_getSolver", _wrap_Simulation_getSolver, METH_O, NULL},
	 { "Simulation_getParameters", _wrap_Simulation_getParameters, METH_O, NULL},
	 { "Simulation_setParameters", _wrap_Simulation_setParameters, METH_VARARGS, NULL},
	 { "Simulation_getIncidenceMatrix", _wrap_Simulation_getIncidenceMatrix, METH_O, NULL},
	 { "Simulation_getInstanceName", _wrap_Simulation_getInstanceName, METH_VARARGS, NULL},
	 { "Simulation_processVarStatus", _wrap_Simulation_processVarStatus, METH_O, NULL},
	 { "Simulation_getNumVars", _wrap_Simulation_getNumVars, METH_O, NULL},
	 { "Simulation_getActiveBlock", _wrap_Simulation_getActiveBlock, METH_O, NULL},
	 { "Simulation_getFreeableVariables", _wrap_Simulation_getFreeableVariables, METH_O, NULL},
	 { "Simulation_setSolverHooks", _wrap_Simulation_setSolverHooks, METH_VARARGS, NULL},
	 { "Simulation_getSolverHooks", _wrap_Simulation_getSolverHooks, METH_O, NULL},
	 { "Simulation___getitem__", _wrap_Simulation___getitem__, METH_VARARGS, NULL},
	 { "Simulation___getattr__", _wrap_Simulation___getattr__, METH_VARARGS, NULL},
	 { "Simulation_swigregister", Simulation_swigregister, METH_O, NULL},
	 { "Simulation_swiginit", Simulation_swiginit, METH_VARARGS, NULL},
	 { "new_Matrix", _wrap_new_Matrix, METH_VARARGS, NULL},
	 { "Matrix_write", _wrap_Matrix_write, METH_VARARGS, NULL},
	 { "Matrix_size", _wrap_Matrix_size, METH_O, NULL},
	 { "delete_Matrix", _wrap_delete_Matrix, METH_O, NULL},
	 { "Matrix_swigregister", Matrix_swigregister, METH_O, NULL},
	 { "Matrix_swiginit", Matrix_swiginit, METH_VARARGS, NULL},
	 { "SolverParameters_toString", _wrap_SolverParameters_toString, METH_O, NULL},
	 { "new_SolverParameters", _wrap_new_SolverParameters, METH_O, NULL},
	 { "SolverParameters_getLength", _wrap_SolverParameters_getLength, METH_O, NULL},
	 { "SolverParameters_getParameter", _wrap_SolverParameters_getParameter, METH_VARARGS, NULL},
	 { "delete_SolverParameters", _wrap_delete_SolverParameters, METH_O, NULL},
	 { "SolverParameters_swigregister", SolverParameters_swigregister, METH_O, NULL},
	 { "SolverParameters_swiginit", SolverParameters_swiginit, METH_VARARGS, NULL},
	 { "new_Value", _wrap_new_Value, METH_VARARGS, NULL},
	 { "delete_Value", _wrap_delete_Value, METH_O, NULL},
	 { "Value_getType", _wrap_Value_getType, METH_O, NULL},
	 { "Value_swigregister", Value_swigregister, METH_O, NULL},
	 { "Value_swiginit", Value_swiginit, METH_VARARGS, NULL},
	 { "new_SolverParameter", _wrap_new_SolverParameter, METH_O, NULL},
	 { "SolverParameter_getName", _wrap_SolverParameter_getName, METH_O, NULL},
	 { "SolverParameter_getDescription", _wrap_SolverParameter_getDescription, METH_O, NULL},
	 { "SolverParameter_getLabel", _wrap_SolverParameter_getLabel, METH_O, NULL},
	 { "SolverParameter_getNumber", _wrap_SolverParameter_getNumber, METH_O, NULL},
	 { "SolverParameter_getPage", _wrap_SolverParameter_getPage, METH_O, NULL},
	 { "SolverParameter_isInt", _wrap_SolverParameter_isInt, METH_O, NULL},
	 { "SolverParameter_isBool", _wrap_SolverParameter_isBool, METH_O, NULL},
	 { "SolverParameter_isStr", _wrap_SolverParameter_isStr, METH_O, NULL},
	 { "SolverParameter_isReal", _wrap_SolverParameter_isReal, METH_O, NULL},
	 { "SolverParameter_getIntValue", _wrap_SolverParameter_getIntValue, METH_O, NULL},
	 { "SolverParameter_getIntLowerBound", _wrap_SolverParameter_getIntLowerBound, METH_O, NULL},
	 { "SolverParameter_getIntUpperBound", _wrap_SolverParameter_getIntUpperBound, METH_O, NULL},
	 { "SolverParameter_setIntValue", _wrap_SolverParameter_setIntValue, METH_VARARGS, NULL},
	 { "SolverParameter_getBoolValue", _wrap_SolverParameter_getBoolValue, METH_O, NULL},
	 { "SolverParameter_setBoolValue", _wrap_SolverParameter_setBoolValue, METH_VARARGS, NULL},
	 { "SolverParameter_getStrValue", _wrap_SolverParameter_getStrValue, METH_O, NULL},
	 { "SolverParameter_getStrOptions", _wrap_SolverParameter_getStrOptions, METH_O, NULL},
	 { "SolverParameter_setStrValue", _wrap_SolverParameter_setStrValue, METH_VARARGS, NULL},
	 { "SolverParameter_setStrOption", _wrap_SolverParameter_setStrOption, METH_VARARGS, NULL},
	 { "SolverParameter_getRealValue", _wrap_SolverParameter_getRealValue, METH_O, NULL},
	 { "SolverParameter_getRealLowerBound", _wrap_SolverParameter_getRealLowerBound, METH_O, NULL},
	 { "SolverParameter_getRealUpperBound", _wrap_SolverParameter_getRealUpperBound, METH_O, NULL},
	 { "SolverParameter_setRealValue", _wrap_SolverParameter_setRealValue, METH_VARARGS, NULL},
	 { "SolverParameter_isBounded", _wrap_SolverParameter_isBounded, METH_O, NULL},
	 { "SolverParameter_toString", _wrap_SolverParameter_toString, METH_O, NULL},
	 { "SolverParameter_setValueValue", _wrap_SolverParameter_setValueValue, METH_VARARGS, NULL},
	 { "delete_SolverParameter", _wrap_delete_SolverParameter, METH_O, NULL},
	 { "SolverParameter_swigregister", SolverParameter_swigregister, METH_O, NULL},
	 { "SolverParameter_swiginit", SolverParameter_swiginit, METH_VARARGS, NULL},
	 { "IncidencePointVector_iterator", _wrap_IncidencePointVector_iterator, METH_O, NULL},
	 { "IncidencePointVector___nonzero__", _wrap_IncidencePointVector___nonzero__, METH_O, NULL},
	 { "IncidencePointVector___bool__", _wrap_IncidencePointVector___bool__, METH_O, NULL},
	 { "IncidencePointVector___len__", _wrap_IncidencePointVector___len__, METH_O, NULL},
	 { "IncidencePointVector___getslice__", _wrap_IncidencePointVector___getslice__, METH_VARARGS, NULL},
	 { "IncidencePointVector___setslice__", _wrap_IncidencePointVector___setslice__, METH_VARARGS, NULL},
	 { "IncidencePointVector___delslice__", _wrap_IncidencePointVector___delslice__, METH_VARARGS, NULL},
	 { "IncidencePointVector___delitem__", _wrap_IncidencePointVector___delitem__, METH_VARARGS, NULL},
	 { "IncidencePointVector___getitem__", _wrap_IncidencePointVector___getitem__, METH_VARARGS, NULL},
	 { "IncidencePointVector___setitem__", _wrap_IncidencePointVector___setitem__, METH_VARARGS, NULL},
	 { "IncidencePointVector_pop", _wrap_IncidencePointVector_pop, METH_O, NULL},
	 { "IncidencePointVector_append", _wrap_IncidencePointVector_append, METH_VARARGS, NULL},
	 { "IncidencePointVector_empty", _wrap_IncidencePointVector_empty, METH_O, NULL},
	 { "IncidencePointVector_size", _wrap_IncidencePointVector_size, METH_O, NULL},
	 { "IncidencePointVector_swap", _wrap_IncidencePointVector_swap, METH_VARARGS, NULL},
	 { "IncidencePointVector_begin", _wrap_IncidencePointVector_begin, METH_O, NULL},
	 { "IncidencePointVector_end", _wrap_IncidencePointVector_end, METH_O, NULL},
	 { "IncidencePointVector_rbegin", _wrap_IncidencePointVector_rbegin, METH_O, NULL},
	 { "IncidencePointVector_rend", _wrap_IncidencePointVector_rend, METH_O, NULL},
	 { "IncidencePointVector_clear", _wrap_IncidencePointVector_clear, METH_O, NULL},
	 { "IncidencePointVector_get_allocator", _wrap_IncidencePointVector_get_allocator, METH_O, NULL},
	 { "IncidencePointVector_pop_back", _wrap_IncidencePointVector_pop_back, METH_O, NULL},
	 { "IncidencePointVector_erase", _wrap_IncidencePointVector_erase, METH_VARARGS, NULL},
	 { "new_IncidencePointVector", _wrap_new_IncidencePointVector, METH_VARARGS, NULL},
	 { "IncidencePointVector_push_back", _wrap_IncidencePointVector_push_back, METH_VARARGS, NULL},
	 { "IncidencePointVector_front", _wrap_IncidencePointVector_front, METH_O, NULL},
	 { "IncidencePointVector_back", _wrap_IncidencePointVector_back, METH_O, NULL},
	 { "IncidencePointVector_assign", _wrap_IncidencePointVector_assign, METH_VARARGS, NULL},
	 { "IncidencePointVector_resize", _wrap_IncidencePointVector_resize, METH_VARARGS, NULL},
	 { "IncidencePointVector_insert", _wrap_IncidencePointVector_insert, METH_VARARGS, NULL},
	 { "IncidencePointVector_reserve", _wrap_IncidencePointVector_reserve, METH_VARARGS, NULL},
	 { "IncidencePointVector_capacity", _wrap_IncidencePointVector_capacity, METH_O, NULL},
	 { "delete_IncidencePointVector", _wrap_delete_IncidencePointVector, METH_O, NULL},
	 { "IncidencePointVector_swigregister", IncidencePointVector_swigregister, METH_O, NULL},
	 { "IncidencePointVector_swiginit", IncidencePointVector_swiginit, METH_VARARGS, NULL},
	 { "new_IncidencePoint", _wrap_new_IncidencePoint, METH_VARARGS, NULL},
	 { "IncidencePoint_row_set", _wrap_IncidencePoint_row_set, METH_VARARGS, NULL},
	 { "IncidencePoint_row_get", _wrap_IncidencePoint_row_get, METH_O, NULL},
	 { "IncidencePoint_col_set", _wrap_IncidencePoint_col_set, METH_VARARGS, NULL},
	 { "IncidencePoint_col_get", _wrap_IncidencePoint_col_get, METH_O, NULL},
	 { "IncidencePoint_type_set", _wrap_IncidencePoint_type_set, METH_VARARGS, NULL},
	 { "IncidencePoint_type_get", _wrap_IncidencePoint_type_get, METH_O, NULL},
	 { "delete_IncidencePoint", _wrap_delete_IncidencePoint, METH_O, NULL},
	 { "IncidencePoint_swigregister", IncidencePoint_swigregister, METH_O, NULL},
	 { "IncidencePoint_swiginit", IncidencePoint_swiginit, METH_VARARGS, NULL},
	 { "new_IncidenceMatrix", _wrap_new_IncidenceMatrix, METH_O, NULL},
	 { "delete_IncidenceMatrix", _wrap_delete_IncidenceMatrix, METH_O, NULL},
	 { "IncidenceMatrix_getIncidenceData", _wrap_IncidenceMatrix_getIncidenceData, METH_O, NULL},
	 { "IncidenceMatrix_getNumRows", _wrap_IncidenceMatrix_getNumRows, METH_O, NULL},
	 { "IncidenceMatrix_getNumCols", _wrap_IncidenceMatrix_getNumCols, METH_O, NULL},
	 { "IncidenceMatrix_getVariable", _wrap_IncidenceMatrix_getVariable, METH_VARARGS, NULL},
	 { "IncidenceMatrix_getRelation", _wrap_IncidenceMatrix_getRelation, METH_VARARGS, NULL},
	 { "IncidenceMatrix_getBlockRow", _wrap_IncidenceMatrix_getBlockRow, METH_VARARGS, NULL},
	 { "IncidenceMatrix_getBlockVars", _wrap_IncidenceMatrix_getBlockVars, METH_VARARGS, NULL},
	 { "IncidenceMatrix_getBlockRels", _wrap_IncidenceMatrix_getBlockRels, METH_VARARGS, NULL},
	 { "IncidenceMatrix_getBlockLocation", _wrap_IncidenceMatrix_getBlockLocation, METH_VARARGS, NULL},
	 { "IncidenceMatrix_getBlockStatus", _wrap_IncidenceMatrix_getBlockStatus, METH_VARARGS, NULL},
	 { "IncidenceMatrix_getNumBlocks", _wrap_IncidenceMatrix_getNumBlocks, METH_O, NULL},
	 { "IncidenceMatrix_swigregister", IncidenceMatrix_swigregister, METH_O, NULL},
	 { "IncidenceMatrix_swiginit", IncidenceMatrix_swiginit, METH_VARARGS, NULL},
	 { "new_Variable", _wrap_new_Variable, METH_VARARGS, NULL},
	 { "Variable_getName", _wrap_Variable_getName, METH_O, NULL},
	 { "Variable_getValue", _wrap_Variable_getValue, METH_O, NULL},
	 { "Variable_getNominal", _wrap_Variable_getNominal, METH_O, NULL},
	 { "Variable_getUpperBound", _wrap_Variable_getUpperBound, METH_O, NULL},
	 { "Variable_getLowerBound", _wrap_Variable_getLowerBound, METH_O, NULL},
	 { "Variable_getIncidentRelations", _wrap_Variable_getIncidentRelations, METH_O, NULL},
	 { "Variable_getNumIncidentRelations", _wrap_Variable_getNumIncidentRelations, METH_O, NULL},
	 { "Variable_getInstance", _wrap_Variable_getInstance, METH_O, NULL},
	 { "delete_Variable", _wrap_delete_Variable, METH_O, NULL},
	 { "Variable_swigregister", Variable_swigregister, METH_O, NULL},
	 { "Variable_swiginit", Variable_swiginit, METH_VARARGS, NULL},
	 { "new_Relation", _wrap_new_Relation, METH_O, NULL},
	 { "Relation_getName", _wrap_Relation_getName, METH_O, NULL},
	 { "Relation_getResidual", _wrap_Relation_getResidual, METH_O, NULL},
	 { "Relation_getIncidentVariables", _wrap_Relation_getIncidentVariables, METH_O, NULL},
	 { "Relation_getNumIncidentVariables", _wrap_Relation_getNumIncidentVariables, METH_O, NULL},
	 { "Relation_getInstance", _wrap_Relation_getInstance, METH_O, NULL},
	 { "Relation_getRelationAsString", _wrap_Relation_getRelationAsString, METH_O, NULL},
	 { "delete_Relation", _wrap_delete_Relation, METH_O, NULL},
	 { "Relation_swigregister", Relation_swigregister, METH_O, NULL},
	 { "Relation_swiginit", Relation_swiginit, METH_VARARGS, NULL},
	 { "VariableVector_iterator", _wrap_VariableVector_iterator, METH_O, NULL},
	 { "VariableVector___nonzero__", _wrap_VariableVector___nonzero__, METH_O, NULL},
	 { "VariableVector___bool__", _wrap_VariableVector___bool__, METH_O, NULL},
	 { "VariableVector___len__", _wrap_VariableVector___len__, METH_O, NULL},
	 { "VariableVector___getslice__", _wrap_VariableVector___getslice__, METH_VARARGS, NULL},
	 { "VariableVector___setslice__", _wrap_VariableVector___setslice__, METH_VARARGS, NULL},
	 { "VariableVector___delslice__", _wrap_VariableVector___delslice__, METH_VARARGS, NULL},
	 { "VariableVector___delitem__", _wrap_VariableVector___delitem__, METH_VARARGS, NULL},
	 { "VariableVector___getitem__", _wrap_VariableVector___getitem__, METH_VARARGS, NULL},
	 { "VariableVector___setitem__", _wrap_VariableVector___setitem__, METH_VARARGS, NULL},
	 { "VariableVector_pop", _wrap_VariableVector_pop, METH_O, NULL},
	 { "VariableVector_append", _wrap_VariableVector_append, METH_VARARGS, NULL},
	 { "VariableVector_empty", _wrap_VariableVector_empty, METH_O, NULL},
	 { "VariableVector_size", _wrap_VariableVector_size, METH_O, NULL},
	 { "VariableVector_swap", _wrap_VariableVector_swap, METH_VARARGS, NULL},
	 { "VariableVector_begin", _wrap_VariableVector_begin, METH_O, NULL},
	 { "VariableVector_end", _wrap_VariableVector_end, METH_O, NULL},
	 { "VariableVector_rbegin", _wrap_VariableVector_rbegin, METH_O, NULL},
	 { "VariableVector_rend", _wrap_VariableVector_rend, METH_O, NULL},
	 { "VariableVector_clear", _wrap_VariableVector_clear, METH_O, NULL},
	 { "VariableVector_get_allocator", _wrap_VariableVector_get_allocator, METH_O, NULL},
	 { "VariableVector_pop_back", _wrap_VariableVector_pop_back, METH_O, NULL},
	 { "VariableVector_erase", _wrap_VariableVector_erase, METH_VARARGS, NULL},
	 { "new_VariableVector", _wrap_new_VariableVector, METH_VARARGS, NULL},
	 { "VariableVector_push_back", _wrap_VariableVector_push_back, METH_VARARGS, NULL},
	 { "VariableVector_front", _wrap_VariableVector_front, METH_O, NULL},
	 { "VariableVector_back", _wrap_VariableVector_back, METH_O, NULL},
	 { "VariableVector_assign", _wrap_VariableVector_assign, METH_VARARGS, NULL},
	 { "VariableVector_resize", _wrap_VariableVector_resize, METH_VARARGS, NULL},
	 { "VariableVector_insert", _wrap_VariableVector_insert, METH_VARARGS, NULL},
	 { "VariableVector_reserve", _wrap_VariableVector_reserve, METH_VARARGS, NULL},
	 { "VariableVector_capacity", _wrap_VariableVector_capacity, METH_O, NULL},
	 { "delete_VariableVector", _wrap_delete_VariableVector, METH_O, NULL},
	 { "VariableVector_swigregister", VariableVector_swigregister, METH_O, NULL},
	 { "VariableVector_swiginit", VariableVector_swiginit, METH_VARARGS, NULL},
	 { "RelationVector_iterator", _wrap_RelationVector_iterator, METH_O, NULL},
	 { "RelationVector___nonzero__", _wrap_RelationVector___nonzero__, METH_O, NULL},
	 { "RelationVector___bool__", _wrap_RelationVector___bool__, METH_O, NULL},
	 { "RelationVector___len__", _wrap_RelationVector___len__, METH_O, NULL},
	 { "RelationVector___getslice__", _wrap_RelationVector___getslice__, METH_VARARGS, NULL},
	 { "RelationVector___setslice__", _wrap_RelationVector___setslice__, METH_VARARGS, NULL},
	 { "RelationVector___delslice__", _wrap_RelationVector___delslice__, METH_VARARGS, NULL},
	 { "RelationVector___delitem__", _wrap_RelationVector___delitem__, METH_VARARGS, NULL},
	 { "RelationVector___getitem__", _wrap_RelationVector___getitem__, METH_VARARGS, NULL},
	 { "RelationVector___setitem__", _wrap_RelationVector___setitem__, METH_VARARGS, NULL},
	 { "RelationVector_pop", _wrap_RelationVector_pop, METH_O, NULL},
	 { "RelationVector_append", _wrap_RelationVector_append, METH_VARARGS, NULL},
	 { "RelationVector_empty", _wrap_RelationVector_empty, METH_O, NULL},
	 { "RelationVector_size", _wrap_RelationVector_size, METH_O, NULL},
	 { "RelationVector_swap", _wrap_RelationVector_swap, METH_VARARGS, NULL},
	 { "RelationVector_begin", _wrap_RelationVector_begin, METH_O, NULL},
	 { "RelationVector_end", _wrap_RelationVector_end, METH_O, NULL},
	 { "RelationVector_rbegin", _wrap_RelationVector_rbegin, METH_O, NULL},
	 { "RelationVector_rend", _wrap_RelationVector_rend, METH_O, NULL},
	 { "RelationVector_clear", _wrap_RelationVector_clear, METH_O, NULL},
	 { "RelationVector_get_allocator", _wrap_RelationVector_get_allocator, METH_O, NULL},
	 { "RelationVector_pop_back", _wrap_RelationVector_pop_back, METH_O, NULL},
	 { "RelationVector_erase", _wrap_RelationVector_erase, METH_VARARGS, NULL},
	 { "new_RelationVector", _wrap_new_RelationVector, METH_VARARGS, NULL},
	 { "RelationVector_push_back", _wrap_RelationVector_push_back, METH_VARARGS, NULL},
	 { "RelationVector_front", _wrap_RelationVector_front, METH_O, NULL},
	 { "RelationVector_back", _wrap_RelationVector_back, METH_O, NULL},
	 { "RelationVector_assign", _wrap_RelationVector_assign, METH_VARARGS, NULL},
	 { "RelationVector_resize", _wrap_RelationVector_resize, METH_VARARGS, NULL},
	 { "RelationVector_insert", _wrap_RelationVector_insert, METH_VARARGS, NULL},
	 { "RelationVector_reserve", _wrap_RelationVector_reserve, METH_VARARGS, NULL},
	 { "RelationVector_capacity", _wrap_RelationVector_capacity, METH_O, NULL},
	 { "delete_RelationVector", _wrap_delete_RelationVector, METH_O, NULL},
	 { "RelationVector_swigregister", RelationVector_swigregister, METH_O, NULL},
	 { "RelationVector_swiginit", RelationVector_swiginit, METH_VARARGS, NULL},
	 { "SolverVector_iterator", _wrap_SolverVector_iterator, METH_O, NULL},
	 { "SolverVector___nonzero__", _wrap_SolverVector___nonzero__, METH_O, NULL},
	 { "SolverVector___bool__", _wrap_SolverVector___bool__, METH_O, NULL},
	 { "SolverVector___len__", _wrap_SolverVector___len__, METH_O, NULL},
	 { "SolverVector___getslice__", _wrap_SolverVector___getslice__, METH_VARARGS, NULL},
	 { "SolverVector___setslice__", _wrap_SolverVector___setslice__, METH_VARARGS, NULL},
	 { "SolverVector___delslice__", _wrap_SolverVector___delslice__, METH_VARARGS, NULL},
	 { "SolverVector___delitem__", _wrap_SolverVector___delitem__, METH_VARARGS, NULL},
	 { "SolverVector___getitem__", _wrap_SolverVector___getitem__, METH_VARARGS, NULL},
	 { "SolverVector___setitem__", _wrap_SolverVector___setitem__, METH_VARARGS, NULL},
	 { "SolverVector_pop", _wrap_SolverVector_pop, METH_O, NULL},
	 { "SolverVector_append", _wrap_SolverVector_append, METH_VARARGS, NULL},
	 { "SolverVector_empty", _wrap_SolverVector_empty, METH_O, NULL},
	 { "SolverVector_size", _wrap_SolverVector_size, METH_O, NULL},
	 { "SolverVector_swap", _wrap_SolverVector_swap, METH_VARARGS, NULL},
	 { "SolverVector_begin", _wrap_SolverVector_begin, METH_O, NULL},
	 { "SolverVector_end", _wrap_SolverVector_end, METH_O, NULL},
	 { "SolverVector_rbegin", _wrap_SolverVector_rbegin, METH_O, NULL},
	 { "SolverVector_rend", _wrap_SolverVector_rend, METH_O, NULL},
	 { "SolverVector_clear", _wrap_SolverVector_clear, METH_O, NULL},
	 { "SolverVector_get_allocator", _wrap_SolverVector_get_allocator, METH_O, NULL},
	 { "SolverVector_pop_back", _wrap_SolverVector_pop_back, METH_O, NULL},
	 { "SolverVector_erase", _wrap_SolverVector_erase, METH_VARARGS, NULL},
	 { "new_SolverVector", _wrap_new_SolverVector, METH_VARARGS, NULL},
	 { "SolverVector_push_back", _wrap_SolverVector_push_back, METH_VARARGS, NULL},
	 { "SolverVector_front", _wrap_SolverVector_front, METH_O, NULL},
	 { "SolverVector_back", _wrap_SolverVector_back, METH_O, NULL},
	 { "SolverVector_assign", _wrap_SolverVector_assign, METH_VARARGS, NULL},
	 { "SolverVector_resize", _wrap_SolverVector_resize, METH_VARARGS, NULL},
	 { "SolverVector_insert", _wrap_SolverVector_insert, METH_VARARGS, NULL},
	 { "SolverVector_reserve", _wrap_SolverVector_reserve, METH_VARARGS, NULL},
	 { "SolverVector_capacity", _wrap_SolverVector_capacity, METH_O, NULL},
	 { "delete_SolverVector", _wrap_delete_SolverVector, METH_O, NULL},
	 { "SolverVector_swigregister", SolverVector_swigregister, METH_O, NULL},
	 { "SolverVector_swiginit", SolverVector_swiginit, METH_VARARGS, NULL},
	 { "new_SolverStatus", _wrap_new_SolverStatus, METH_VARARGS, NULL},
	 { "SolverStatus_getSimulationStatus", _wrap_SolverStatus_getSimulationStatus, METH_VARARGS, NULL},
	 { "SolverStatus_isOK", _wrap_SolverStatus_isOK, METH_O, NULL},
	 { "SolverStatus_isOverDefined", _wrap_SolverStatus_isOverDefined, METH_O, NULL},
	 { "SolverStatus_isUnderDefined", _wrap_SolverStatus_isUnderDefined, METH_O, NULL},
	 { "SolverStatus_isStructurallySingular", _wrap_SolverStatus_isStructurallySingular, METH_O, NULL},
	 { "SolverStatus_isInconsistent", _wrap_SolverStatus_isInconsistent, METH_O, NULL},
	 { "SolverStatus_isReadyToSolve", _wrap_SolverStatus_isReadyToSolve, METH_O, NULL},
	 { "SolverStatus_isConverged", _wrap_SolverStatus_isConverged, METH_O, NULL},
	 { "SolverStatus_isDiverged", _wrap_SolverStatus_isDiverged, METH_O, NULL},
	 { "SolverStatus_hasResidualCalculationErrors", _wrap_SolverStatus_hasResidualCalculationErrors, METH_O, NULL},
	 { "SolverStatus_hasExceededIterationLimit", _wrap_SolverStatus_hasExceededIterationLimit, METH_O, NULL},
	 { "SolverStatus_hasExceededTimeLimit", _wrap_SolverStatus_hasExceededTimeLimit, METH_O, NULL},
	 { "SolverStatus_isInterrupted", _wrap_SolverStatus_isInterrupted, METH_O, NULL},
	 { "SolverStatus_getIterationNum", _wrap_SolverStatus_getIterationNum, METH_O, NULL},
	 { "SolverStatus_getNumBlocks", _wrap_SolverStatus_getNumBlocks, METH_O, NULL},
	 { "SolverStatus_getCurrentBlockNum", _wrap_SolverStatus_getCurrentBlockNum, METH_O, NULL},
	 { "SolverStatus_getCurrentBlockSize", _wrap_SolverStatus_getCurrentBlockSize, METH_O, NULL},
	 { "SolverStatus_getCurrentBlockIteration", _wrap_SolverStatus_getCurrentBlockIteration, METH_O, NULL},
	 { "SolverStatus_getNumConverged", _wrap_SolverStatus_getNumConverged, METH_O, NULL},
	 { "SolverStatus_getNumJacobianEvals", _wrap_SolverStatus_getNumJacobianEvals, METH_O, NULL},
	 { "SolverStatus_getNumResidualEvals", _wrap_SolverStatus_getNumResidualEvals, METH_O, NULL},
	 { "SolverStatus_getBlockResidualRMS", _wrap_SolverStatus_getBlockResidualRMS, METH_O, NULL},
	 { "delete_SolverStatus", _wrap_delete_SolverStatus, METH_O, NULL},
	 { "SolverStatus_swigregister", SolverStatus_swigregister, METH_O, NULL},
	 { "SolverStatus_swiginit", SolverStatus_swiginit, METH_VARARGS, NULL},
	 { "new_SolverReporter", _wrap_new_SolverReporter, METH_O, NULL},
	 { "delete_SolverReporter", _wrap_delete_SolverReporter, METH_O, NULL},
	 { "SolverReporter_report", _wrap_SolverReporter_report, METH_VARARGS, NULL},
	 { "SolverReporter_finalise", _wrap_SolverReporter_finalise, METH_VARARGS, NULL},
	 { "disown_SolverReporter", _wrap_disown_SolverReporter, METH_O, NULL},
	 { "SolverReporter_swigregister", SolverReporter_swigregister, METH_O, NULL},
	 { "SolverReporter_swiginit", SolverReporter_swiginit, METH_VARARGS, NULL},
	 { "new_Integrator", _wrap_new_Integrator, METH_O, NULL},
	 { "delete_Integrator", _wrap_delete_Integrator, METH_O, NULL},
	 { "Integrator_getEngines", _wrap_Integrator_getEngines, METH_NOARGS, "Return dict of available integration engines {id:name,...}"},
	 { "Integrator_setEngine", _wrap_Integrator_setEngine, METH_VARARGS, NULL},
	 { "Integrator_getName", _wrap_Integrator_getName, METH_O, NULL},
	 { "Integrator_getParameters", _wrap_Integrator_getParameters, METH_O, NULL},
	 { "Integrator_setParameters", _wrap_Integrator_setParameters, METH_VARARGS, NULL},
	 { "Integrator_setReporter", _wrap_Integrator_setReporter, METH_VARARGS, NULL},
	 { "Integrator_setMinSubStep", _wrap_Integrator_setMinSubStep, METH_VARARGS, NULL},
	 { "Integrator_setMaxSubStep", _wrap_Integrator_setMaxSubStep, METH_VARARGS, NULL},
	 { "Integrator_setInitialSubStep", _wrap_Integrator_setInitialSubStep, METH_VARARGS, NULL},
	 { "Integrator_setMaxSubSteps", _wrap_Integrator_setMaxSubSteps, METH_VARARGS, NULL},
	 { "Integrator_setLinearTimesteps", _wrap_Integrator_setLinearTimesteps, METH_VARARGS, NULL},
	 { "Integrator_setLogTimesteps", _wrap_Integrator_setLogTimesteps, METH_VARARGS, NULL},
	 { "Integrator_getCurrentObservations", _wrap_Integrator_getCurrentObservations, METH_O, NULL},
	 { "Integrator_saveObservations", _wrap_Integrator_saveObservations, METH_O, NULL},
	 { "Integrator_getObservations", _wrap_Integrator_getObservations, METH_O, NULL},
	 { "Integrator_getObservedVariable", _wrap_Integrator_getObservedVariable, METH_VARARGS, NULL},
	 { "Integrator_getIndependentVariable", _wrap_Integrator_getIndependentVariable, METH_O, NULL},
	 { "Integrator_findIndependentVar", _wrap_Integrator_findIndependentVar, METH_O, NULL},
	 { "Integrator_analyse", _wrap_Integrator_analyse, METH_O, NULL},
	 { "Integrator_solve", _wrap_Integrator_solve, METH_O, NULL},
	 { "Integrator_writeMatrix", _wrap_Integrator_writeMatrix, METH_VARARGS, NULL},
	 { "Integrator_writeDebug", _wrap_Integrator_writeDebug, METH_VARARGS, NULL},
	 { "Integrator_getCurrentTime", _wrap_Integrator_getCurrentTime, METH_O, NULL},
	 { "Integrator_getCurrentStep", _wrap_Integrator_getCurrentStep, METH_O, NULL},
	 { "Integrator_getNumSteps", _wrap_Integrator_getNumSteps, METH_O, NULL},
	 { "Integrator_getNumVars", _wrap_Integrator_getNumVars, METH_O, NULL},
	 { "Integrator_getNumObservedVars", _wrap_Integrator_getNumObservedVars, METH_O, NULL},
	 { "Integrator_swigregister", Integrator_swigregister, METH_O, NULL},
	 { "Integrator_swiginit", Integrator_swiginit, METH_VARARGS, NULL},
	 { "new_IntegratorReporterCxx", _wrap_new_IntegratorReporterCxx, METH_VARARGS, NULL},
	 { "delete_IntegratorReporterCxx", _wrap_delete_IntegratorReporterCxx, METH_O, NULL},
	 { "IntegratorReporterCxx_initOutput", _wrap_IntegratorReporterCxx_initOutput, METH_O, NULL},
	 { "IntegratorReporterCxx_closeOutput", _wrap_IntegratorReporterCxx_closeOutput, METH_O, NULL},
	 { "IntegratorReporterCxx_updateStatus", _wrap_IntegratorReporterCxx_updateStatus, METH_O, NULL},
	 { "IntegratorReporterCxx_recordObservedValues", _wrap_IntegratorReporterCxx_recordObservedValues, METH_O, NULL},
	 { "IntegratorReporterCxx_getIntegrator", _wrap_IntegratorReporterCxx_getIntegrator, METH_O, NULL},
	 { "disown_IntegratorReporterCxx", _wrap_disown_IntegratorReporterCxx, METH_O, NULL},
	 { "IntegratorReporterCxx_swigregister", IntegratorReporterCxx_swigregister, METH_O, NULL},
	 { "IntegratorReporterCxx_swiginit", IntegratorReporterCxx_swiginit, METH_VARARGS, NULL},
	 { "new_IntegratorReporterNull", _wrap_new_IntegratorReporterNull, METH_O, NULL},
	 { "delete_IntegratorReporterNull", _wrap_delete_IntegratorReporterNull, METH_O, NULL},
	 { "IntegratorReporterNull_swigregister", IntegratorReporterNull_swigregister, METH_O, NULL},
	 { "IntegratorReporterNull_swiginit", IntegratorReporterNull_swiginit, METH_VARARGS, NULL},
	 { "new_IntegratorReporterConsole", _wrap_new_IntegratorReporterConsole, METH_O, NULL},
	 { "delete_IntegratorReporterConsole", _wrap_delete_IntegratorReporterConsole, METH_O, NULL},
	 { "IntegratorReporterConsole_swigregister", IntegratorReporterConsole_swigregister, METH_O, NULL},
	 { "IntegratorReporterConsole_swiginit", IntegratorReporterConsole_swiginit, METH_VARARGS, NULL},
	 { "new_SolverHooks", _wrap_new_SolverHooks, METH_VARARGS, NULL},
	 { "delete_SolverHooks", _wrap_delete_SolverHooks, METH_O, NULL},
	 { "SolverHooks_setSolver", _wrap_SolverHooks_setSolver, METH_VARARGS, NULL},
	 { "SolverHooks_setOption", _wrap_SolverHooks_setOption, METH_VARARGS, NULL},
	 { "SolverHooks_doSolve", _wrap_SolverHooks_doSolve, METH_VARARGS, NULL},
	 { "SolverHooks_getSolverReporter", _wrap_SolverHooks_getSolverReporter, METH_O, NULL},
	 { "SolverHooks_assign", _wrap_SolverHooks_assign, METH_VARARGS, NULL},
	 { "disown_SolverHooks", _wrap_disown_SolverHooks, METH_O, NULL},
	 { "SolverHooks_swigregister", SolverHooks_swigregister, METH_O, NULL},
	 { "SolverHooks_swiginit", SolverHooks_swiginit, METH_VARARGS, NULL},
	 { "SolverHooksManager_Instance", _wrap_SolverHooksManager_Instance, METH_NOARGS, NULL},
	 { "SolverHooksManager_setHooks", _wrap_SolverHooksManager_setHooks, METH_VARARGS, NULL},
	 { "SolverHooksManager_getHooks", _wrap_SolverHooksManager_getHooks, METH_O, NULL},
	 { "SolverHooksManager_swigregister", SolverHooksManager_swigregister, METH_O, NULL},
	 { "new_ExtMethod", _wrap_new_ExtMethod, METH_VARARGS, NULL},
	 { "ExtMethod_getHelp", _wrap_ExtMethod_getHelp, METH_O, NULL},
	 { "ExtMethod_getName", _wrap_ExtMethod_getName, METH_O, NULL},
	 { "ExtMethod_getNumInputs", _wrap_ExtMethod_getNumInputs, METH_O, NULL},
	 { "ExtMethod_getNumOutputs", _wrap_ExtMethod_getNumOutputs, METH_O, NULL},
	 { "delete_ExtMethod", _wrap_delete_ExtMethod, METH_O, NULL},
	 { "ExtMethod_swigregister", ExtMethod_swigregister, METH_O, NULL},
	 { "ExtMethod_swiginit", ExtMethod_swiginit, METH_VARARGS, NULL},
	 { "new_AnnotationDatabase", _wrap_new_AnnotationDatabase, METH_O, NULL},
	 { "AnnotationDatabase_getNotes", _wrap_AnnotationDatabase_getNotes, METH_VARARGS, NULL},
	 { "AnnotationDatabase_getTypeRefinedNotesLang", _wrap_AnnotationDatabase_getTypeRefinedNotesLang, METH_VARARGS, NULL},
	 { "AnnotationDatabase_getNoteForVariable", _wrap_AnnotationDatabase_getNoteForVariable, METH_VARARGS, NULL},
	 { "delete_AnnotationDatabase", _wrap_delete_AnnotationDatabase, METH_O, NULL},
	 { "AnnotationDatabase_swigregister", AnnotationDatabase_swigregister, METH_O, NULL},
	 { "AnnotationDatabase_swiginit", AnnotationDatabase_swiginit, METH_VARARGS, NULL},
	 { "new_Plot", _wrap_new_Plot, METH_O, NULL},
	 { "Plot_getTitle", _wrap_Plot_getTitle, METH_O, NULL},
	 { "Plot_getXLabel", _wrap_Plot_getXLabel, METH_O, NULL},
	 { "Plot_getYLabel", _wrap_Plot_getYLabel, METH_O, NULL},
	 { "Plot_getLegendPosition", _wrap_Plot_getLegendPosition, METH_O, NULL},
	 { "Plot_isXLog", _wrap_Plot_isXLog, METH_O, NULL},
	 { "Plot_isYLog", _wrap_Plot_isYLog, METH_O, NULL},
	 { "Plot_getXLow", _wrap_Plot_getXLow, METH_O, NULL},
	 { "Plot_getXHigh", _wrap_Plot_getXHigh, METH_O, NULL},
	 { "Plot_getYLow", _wrap_Plot_getYLow, METH_O, NULL},
	 { "Plot_getYHigh", _wrap_Plot_getYHigh, METH_O, NULL},
	 { "Plot_curves_set", _wrap_Plot_curves_set, METH_VARARGS, NULL},
	 { "Plot_curves_get", _wrap_Plot_curves_get, METH_O, NULL},
	 { "delete_Plot", _wrap_delete_Plot, METH_O, NULL},
	 { "Plot_swigregister", Plot_swigregister, METH_O, NULL},
	 { "Plot_swiginit", Plot_swiginit, METH_VARARGS, NULL},
	 { "new_Curve", _wrap_new_Curve, METH_O, NULL},
	 { "Curve_x_set", _wrap_Curve_x_set, METH_VARARGS, NULL},
	 { "Curve_x_get", _wrap_Curve_x_get, METH_O, NULL},
	 { "Curve_y_set", _wrap_Curve_y_set, METH_VARARGS, NULL},
	 { "Curve_y_get", _wrap_Curve_y_get, METH_O, NULL},
	 { "Curve_getLegend", _wrap_Curve_getLegend, METH_O, NULL},
	 { "Curve_getFormat", _wrap_Curve_getFormat, METH_O, NULL},
	 { "delete_Curve", _wrap_delete_Curve, METH_O, NULL},
	 { "Curve_swigregister", Curve_swigregister, METH_O, NULL},
	 { "Curve_swiginit", Curve_swiginit, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_CurveTo_p_Instanc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Instanc *)  ((Curve *) x));
}
static void *_p_PlotTo_p_Instanc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Instanc *)  ((Plot *) x));
}
static void *_p_SimulationTo_p_Instanc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Instanc *)  ((Simulation *) x));
}
static void *_p_IntegratorReporterConsoleTo_p_IntegratorReporterCxx(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IntegratorReporterCxx *)  ((IntegratorReporterConsole *) x));
}
static void *_p_IntegratorReporterNullTo_p_IntegratorReporterCxx(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IntegratorReporterCxx *)  ((IntegratorReporterNull *) x));
}
static swig_type_info _swigt__p_ASCXX_SetT_SymChar_t = {"_p_ASCXX_SetT_SymChar_t", "ASCXX_Set< SymChar > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ASCXX_SetT_long_t = {"_p_ASCXX_SetT_long_t", "ASCXX_Set< long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Annotation = {"_p_Annotation", "std::vector< Annotation >::value_type *|Annotation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AnnotationDatabase = {"_p_AnnotationDatabase", "AnnotationDatabase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BlockStatusType = {"_p_BlockStatusType", "BlockStatusType *|enum BlockStatusType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Compiler = {"_p_Compiler", "Compiler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Curve = {"_p_Curve", "std::vector< Curve >::value_type *|Curve *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Dimensions = {"_p_Dimensions", "Dimensions *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ExtMethod = {"_p_ExtMethod", "std::vector< ExtMethod >::value_type *|ExtMethod *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ExternalFunc = {"_p_ExternalFunc", "ExternalFunc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IncidenceMatrix = {"_p_IncidenceMatrix", "IncidenceMatrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IncidencePoint = {"_p_IncidencePoint", "std::vector< IncidencePoint >::value_type *|IncidencePoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IncidencePointType = {"_p_IncidencePointType", "IncidencePointType *|enum IncidencePointType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_InitProcedure = {"_p_InitProcedure", "InitProcedure *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Instanc = {"_p_Instanc", "std::vector< Instanc >::value_type *|Instanc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Instance = {"_p_Instance", "Instance *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_InstanceStatus = {"_p_InstanceStatus", "InstanceStatus *|enum InstanceStatus *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Integrator = {"_p_Integrator", "Integrator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IntegratorReporterConsole = {"_p_IntegratorReporterConsole", "IntegratorReporterConsole *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IntegratorReporterCxx = {"_p_IntegratorReporterCxx", "IntegratorReporterCxx *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IntegratorReporterNull = {"_p_IntegratorReporterNull", "IntegratorReporterNull *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Library = {"_p_Library", "Library *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Matrix = {"_p_Matrix", "Matrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Method = {"_p_Method", "std::vector< Method >::value_type *|Method *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Module = {"_p_Module", "std::vector< Module >::value_type *|Module *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Nam = {"_p_Nam", "Nam *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Plot = {"_p_Plot", "Plot *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Registry = {"_p_Registry", "Registry *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Relation = {"_p_Relation", "std::vector< Relation >::value_type *|Relation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Reporter = {"_p_Reporter", "Reporter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Simulation = {"_p_Simulation", "Simulation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SingularityInfo = {"_p_SingularityInfo", "SingularityInfo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Solver = {"_p_Solver", "std::vector< Solver >::value_type *|Solver *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SolverHooks = {"_p_SolverHooks", "SolverHooks *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SolverHooksManager = {"_p_SolverHooksManager", "SolverHooksManager *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SolverParameter = {"_p_SolverParameter", "SolverParameter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SolverParameters = {"_p_SolverParameters", "SolverParameters *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SolverReporter = {"_p_SolverReporter", "SolverReporter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SolverStatus = {"_p_SolverStatus", "SolverStatus *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SymChar = {"_p_SymChar", "SymChar *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Type = {"_p_Type", "std::set< Type >::key_type *|std::set< Type >::value_type *|std::vector< Type >::value_type *|Type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TypeDescription = {"_p_TypeDescription", "TypeDescription *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Units = {"_p_Units", "Units *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_UnitsM = {"_p_UnitsM", "std::vector< UnitsM >::value_type *|UnitsM *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Value = {"_p_Value", "Value *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ValueType = {"_p_ValueType", "ValueType *|enum ValueType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Variable = {"_p_Variable", "std::vector< Variable >::value_type *|Variable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dim_type = {"_p_dim_type", "dim_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_error_reporter_callback_t = {"_p_error_reporter_callback_t", "error_reporter_callback_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_key_type = {"_p_key_type", "key_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mapped_type = {"_p_mapped_type", "mapped_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mtx_matrix_t = {"_p_mtx_matrix_t", "mtx_matrix_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_slv_parameter = {"_p_slv_parameter", "slv_parameter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_Annotation_t = {"_p_std__allocatorT_Annotation_t", "std::vector< Annotation >::allocator_type *|std::allocator< Annotation > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_Curve_t = {"_p_std__allocatorT_Curve_t", "std::vector< Curve >::allocator_type *|std::allocator< Curve > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_ExtMethod_t = {"_p_std__allocatorT_ExtMethod_t", "std::vector< ExtMethod >::allocator_type *|std::allocator< ExtMethod > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_IncidencePoint_t = {"_p_std__allocatorT_IncidencePoint_t", "std::vector< IncidencePoint >::allocator_type *|std::allocator< IncidencePoint > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_Instanc_t = {"_p_std__allocatorT_Instanc_t", "std::vector< Instanc >::allocator_type *|std::allocator< Instanc > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_Method_t = {"_p_std__allocatorT_Method_t", "std::vector< Method >::allocator_type *|std::allocator< Method > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_Module_t = {"_p_std__allocatorT_Module_t", "std::vector< Module >::allocator_type *|std::allocator< Module > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_Relation_t = {"_p_std__allocatorT_Relation_t", "std::vector< Relation >::allocator_type *|std::allocator< Relation > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_Solver_t = {"_p_std__allocatorT_Solver_t", "std::vector< Solver >::allocator_type *|std::allocator< Solver > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_Type_t = {"_p_std__allocatorT_Type_t", "std::vector< Type >::allocator_type *|std::allocator< Type > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_UnitsM_t = {"_p_std__allocatorT_UnitsM_t", "std::vector< UnitsM >::allocator_type *|std::allocator< UnitsM > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_Variable_t = {"_p_std__allocatorT_Variable_t", "std::vector< Variable >::allocator_type *|std::allocator< Variable > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_double_t = {"_p_std__allocatorT_double_t", "std::vector< double >::allocator_type *|std::allocator< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_int_t = {"_p_std__allocatorT_int_t", "std::vector< int >::allocator_type *|std::allocator< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__pairT_int_const_std__string_t_t = {"_p_std__allocatorT_std__pairT_int_const_std__string_t_t", "std::map< int,std::string >::allocator_type *|std::allocator< std::pair< int const,std::string > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__string_t = {"_p_std__allocatorT_std__string_t", "std::vector< std::string >::allocator_type *|std::allocator< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__vectorT_double_t_t = {"_p_std__allocatorT_std__vectorT_double_t_t", "std::vector< std::vector< double > >::allocator_type *|std::allocator< std::vector< double,std::allocator< double > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__lessT_Type_t = {"_p_std__lessT_Type_t", "std::less< Type > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__lessT_int_t = {"_p_std__lessT_int_t", "std::less< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_int_std__string_t = {"_p_std__mapT_int_std__string_t", "std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > *|std::map< int,std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_Type_t = {"_p_std__setT_Type_t", "std::set< Type,std::less< Type >,std::allocator< Type > > *|std::set< Type > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Annotation_t = {"_p_std__vectorT_Annotation_t", "std::vector< Annotation,std::allocator< Annotation > > *|std::vector< Annotation > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Curve_t = {"_p_std__vectorT_Curve_t", "std::vector< Curve,std::allocator< Curve > > *|std::vector< Curve > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ExtMethod_t = {"_p_std__vectorT_ExtMethod_t", "std::vector< ExtMethod,std::allocator< ExtMethod > > *|std::vector< ExtMethod > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_IncidencePoint_t = {"_p_std__vectorT_IncidencePoint_t", "std::vector< IncidencePoint,std::allocator< IncidencePoint > > *|std::vector< IncidencePoint > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Instanc_t = {"_p_std__vectorT_Instanc_t", "std::vector< Instanc,std::allocator< Instanc > > *|std::vector< Instanc > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Method_t = {"_p_std__vectorT_Method_t", "std::vector< Method,std::allocator< Method > > *|std::vector< Method > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Module_t = {"_p_std__vectorT_Module_t", "std::vector< Module,std::allocator< Module > > *|std::vector< Module > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Relation_t = {"_p_std__vectorT_Relation_t", "std::vector< Relation,std::allocator< Relation > > *|std::vector< Relation > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Solver_t = {"_p_std__vectorT_Solver_t", "std::vector< Solver,std::allocator< Solver > > *|std::vector< Solver > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Type_t = {"_p_std__vectorT_Type_t", "std::vector< Type,std::allocator< Type > > *|std::vector< Type > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_UnitsM_t = {"_p_std__vectorT_UnitsM_t", "std::vector< UnitsM,std::allocator< UnitsM > > *|std::vector< UnitsM > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Variable_t = {"_p_std__vectorT_Variable_t", "std::vector< Variable,std::allocator< Variable > > *|std::vector< Variable > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_t = {"_p_std__vectorT_double_t", "std::vector< double,std::allocator< double > > *|std::vector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_t = {"_p_std__vectorT_int_t", "std::vector< int,std::allocator< int > > *|std::vector< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_t = {"_p_std__vectorT_std__string_t", "std::vector< std::string,std::allocator< std::string > > *|std::vector< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_double_t_t = {"_p_std__vectorT_std__vectorT_double_t_t", "std::vector< std::vector< double,std::allocator< double > > > *|std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *|std::vector< std::vector< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t = {"_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t", "std::vector< unsigned int,std::allocator< unsigned int > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tm = {"_p_tm", "tm *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_t = {"_p_value_t", "value_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_var_variable = {"_p_var_variable", "var_variable *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_ASCXX_SetT_SymChar_t,
  &_swigt__p_ASCXX_SetT_long_t,
  &_swigt__p_Annotation,
  &_swigt__p_AnnotationDatabase,
  &_swigt__p_BlockStatusType,
  &_swigt__p_Compiler,
  &_swigt__p_Curve,
  &_swigt__p_Dimensions,
  &_swigt__p_ExtMethod,
  &_swigt__p_ExternalFunc,
  &_swigt__p_IncidenceMatrix,
  &_swigt__p_IncidencePoint,
  &_swigt__p_IncidencePointType,
  &_swigt__p_InitProcedure,
  &_swigt__p_Instanc,
  &_swigt__p_Instance,
  &_swigt__p_InstanceStatus,
  &_swigt__p_Integrator,
  &_swigt__p_IntegratorReporterConsole,
  &_swigt__p_IntegratorReporterCxx,
  &_swigt__p_IntegratorReporterNull,
  &_swigt__p_Library,
  &_swigt__p_Matrix,
  &_swigt__p_Method,
  &_swigt__p_Module,
  &_swigt__p_Nam,
  &_swigt__p_Plot,
  &_swigt__p_Registry,
  &_swigt__p_Relation,
  &_swigt__p_Reporter,
  &_swigt__p_Simulation,
  &_swigt__p_SingularityInfo,
  &_swigt__p_Solver,
  &_swigt__p_SolverHooks,
  &_swigt__p_SolverHooksManager,
  &_swigt__p_SolverParameter,
  &_swigt__p_SolverParameters,
  &_swigt__p_SolverReporter,
  &_swigt__p_SolverStatus,
  &_swigt__p_SymChar,
  &_swigt__p_Type,
  &_swigt__p_TypeDescription,
  &_swigt__p_Units,
  &_swigt__p_UnitsM,
  &_swigt__p_Value,
  &_swigt__p_ValueType,
  &_swigt__p_Variable,
  &_swigt__p_allocator_type,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_dim_type,
  &_swigt__p_error_reporter_callback_t,
  &_swigt__p_key_type,
  &_swigt__p_mapped_type,
  &_swigt__p_mtx_matrix_t,
  &_swigt__p_p_PyObject,
  &_swigt__p_size_type,
  &_swigt__p_slv_parameter,
  &_swigt__p_std__allocatorT_Annotation_t,
  &_swigt__p_std__allocatorT_Curve_t,
  &_swigt__p_std__allocatorT_ExtMethod_t,
  &_swigt__p_std__allocatorT_IncidencePoint_t,
  &_swigt__p_std__allocatorT_Instanc_t,
  &_swigt__p_std__allocatorT_Method_t,
  &_swigt__p_std__allocatorT_Module_t,
  &_swigt__p_std__allocatorT_Relation_t,
  &_swigt__p_std__allocatorT_Solver_t,
  &_swigt__p_std__allocatorT_Type_t,
  &_swigt__p_std__allocatorT_UnitsM_t,
  &_swigt__p_std__allocatorT_Variable_t,
  &_swigt__p_std__allocatorT_double_t,
  &_swigt__p_std__allocatorT_int_t,
  &_swigt__p_std__allocatorT_std__pairT_int_const_std__string_t_t,
  &_swigt__p_std__allocatorT_std__string_t,
  &_swigt__p_std__allocatorT_std__vectorT_double_t_t,
  &_swigt__p_std__lessT_Type_t,
  &_swigt__p_std__lessT_int_t,
  &_swigt__p_std__mapT_int_std__string_t,
  &_swigt__p_std__setT_Type_t,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_Annotation_t,
  &_swigt__p_std__vectorT_Curve_t,
  &_swigt__p_std__vectorT_ExtMethod_t,
  &_swigt__p_std__vectorT_IncidencePoint_t,
  &_swigt__p_std__vectorT_Instanc_t,
  &_swigt__p_std__vectorT_Method_t,
  &_swigt__p_std__vectorT_Module_t,
  &_swigt__p_std__vectorT_Relation_t,
  &_swigt__p_std__vectorT_Solver_t,
  &_swigt__p_std__vectorT_Type_t,
  &_swigt__p_std__vectorT_UnitsM_t,
  &_swigt__p_std__vectorT_Variable_t,
  &_swigt__p_std__vectorT_double_t,
  &_swigt__p_std__vectorT_int_t,
  &_swigt__p_std__vectorT_std__string_t,
  &_swigt__p_std__vectorT_std__vectorT_double_t_t,
  &_swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_tm,
  &_swigt__p_value_t,
  &_swigt__p_value_type,
  &_swigt__p_var_variable,
};

static swig_cast_info _swigc__p_ASCXX_SetT_SymChar_t[] = {  {&_swigt__p_ASCXX_SetT_SymChar_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ASCXX_SetT_long_t[] = {  {&_swigt__p_ASCXX_SetT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Annotation[] = {  {&_swigt__p_Annotation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AnnotationDatabase[] = {  {&_swigt__p_AnnotationDatabase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BlockStatusType[] = {  {&_swigt__p_BlockStatusType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Compiler[] = {  {&_swigt__p_Compiler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Curve[] = {  {&_swigt__p_Curve, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dimensions[] = {  {&_swigt__p_Dimensions, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ExtMethod[] = {  {&_swigt__p_ExtMethod, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ExternalFunc[] = {  {&_swigt__p_ExternalFunc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IncidenceMatrix[] = {  {&_swigt__p_IncidenceMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IncidencePoint[] = {  {&_swigt__p_IncidencePoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IncidencePointType[] = {  {&_swigt__p_IncidencePointType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_InitProcedure[] = {  {&_swigt__p_InitProcedure, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Instanc[] = {  {&_swigt__p_Instanc, 0, 0, 0},  {&_swigt__p_Curve, _p_CurveTo_p_Instanc, 0, 0},  {&_swigt__p_Plot, _p_PlotTo_p_Instanc, 0, 0},  {&_swigt__p_Simulation, _p_SimulationTo_p_Instanc, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Instance[] = {  {&_swigt__p_Instance, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_InstanceStatus[] = {  {&_swigt__p_InstanceStatus, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Integrator[] = {  {&_swigt__p_Integrator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IntegratorReporterConsole[] = {  {&_swigt__p_IntegratorReporterConsole, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IntegratorReporterCxx[] = {  {&_swigt__p_IntegratorReporterCxx, 0, 0, 0},  {&_swigt__p_IntegratorReporterConsole, _p_IntegratorReporterConsoleTo_p_IntegratorReporterCxx, 0, 0},  {&_swigt__p_IntegratorReporterNull, _p_IntegratorReporterNullTo_p_IntegratorReporterCxx, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IntegratorReporterNull[] = {  {&_swigt__p_IntegratorReporterNull, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Library[] = {  {&_swigt__p_Library, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Matrix[] = {  {&_swigt__p_Matrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Method[] = {  {&_swigt__p_Method, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Module[] = {  {&_swigt__p_Module, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Nam[] = {  {&_swigt__p_Nam, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Plot[] = {  {&_swigt__p_Plot, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Registry[] = {  {&_swigt__p_Registry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Relation[] = {  {&_swigt__p_Relation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Reporter[] = {  {&_swigt__p_Reporter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Simulation[] = {  {&_swigt__p_Simulation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SingularityInfo[] = {  {&_swigt__p_SingularityInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Solver[] = {  {&_swigt__p_Solver, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SolverHooks[] = {  {&_swigt__p_SolverHooks, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SolverHooksManager[] = {  {&_swigt__p_SolverHooksManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SolverParameter[] = {  {&_swigt__p_SolverParameter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SolverParameters[] = {  {&_swigt__p_SolverParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SolverReporter[] = {  {&_swigt__p_SolverReporter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SolverStatus[] = {  {&_swigt__p_SolverStatus, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SymChar[] = {  {&_swigt__p_SymChar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Type[] = {  {&_swigt__p_Type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TypeDescription[] = {  {&_swigt__p_TypeDescription, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Units[] = {  {&_swigt__p_Units, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_UnitsM[] = {  {&_swigt__p_UnitsM, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Value[] = {  {&_swigt__p_Value, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ValueType[] = {  {&_swigt__p_ValueType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Variable[] = {  {&_swigt__p_Variable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dim_type[] = {  {&_swigt__p_dim_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_error_reporter_callback_t[] = {  {&_swigt__p_error_reporter_callback_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_key_type[] = {  {&_swigt__p_key_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mapped_type[] = {  {&_swigt__p_mapped_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mtx_matrix_t[] = {  {&_swigt__p_mtx_matrix_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_slv_parameter[] = {  {&_swigt__p_slv_parameter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_Annotation_t[] = {  {&_swigt__p_std__allocatorT_Annotation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_Curve_t[] = {  {&_swigt__p_std__allocatorT_Curve_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_ExtMethod_t[] = {  {&_swigt__p_std__allocatorT_ExtMethod_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_IncidencePoint_t[] = {  {&_swigt__p_std__allocatorT_IncidencePoint_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_Instanc_t[] = {  {&_swigt__p_std__allocatorT_Instanc_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_Method_t[] = {  {&_swigt__p_std__allocatorT_Method_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_Module_t[] = {  {&_swigt__p_std__allocatorT_Module_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_Relation_t[] = {  {&_swigt__p_std__allocatorT_Relation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_Solver_t[] = {  {&_swigt__p_std__allocatorT_Solver_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_Type_t[] = {  {&_swigt__p_std__allocatorT_Type_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_UnitsM_t[] = {  {&_swigt__p_std__allocatorT_UnitsM_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_Variable_t[] = {  {&_swigt__p_std__allocatorT_Variable_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_double_t[] = {  {&_swigt__p_std__allocatorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_int_t[] = {  {&_swigt__p_std__allocatorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__pairT_int_const_std__string_t_t[] = {  {&_swigt__p_std__allocatorT_std__pairT_int_const_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__string_t[] = {  {&_swigt__p_std__allocatorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__vectorT_double_t_t[] = {  {&_swigt__p_std__allocatorT_std__vectorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__lessT_Type_t[] = {  {&_swigt__p_std__lessT_Type_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__lessT_int_t[] = {  {&_swigt__p_std__lessT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_int_std__string_t[] = {  {&_swigt__p_std__mapT_int_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_Type_t[] = {  {&_swigt__p_std__setT_Type_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Annotation_t[] = {  {&_swigt__p_std__vectorT_Annotation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Curve_t[] = {  {&_swigt__p_std__vectorT_Curve_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ExtMethod_t[] = {  {&_swigt__p_std__vectorT_ExtMethod_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_IncidencePoint_t[] = {  {&_swigt__p_std__vectorT_IncidencePoint_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Instanc_t[] = {  {&_swigt__p_std__vectorT_Instanc_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Method_t[] = {  {&_swigt__p_std__vectorT_Method_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Module_t[] = {  {&_swigt__p_std__vectorT_Module_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Relation_t[] = {  {&_swigt__p_std__vectorT_Relation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Solver_t[] = {  {&_swigt__p_std__vectorT_Solver_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Type_t[] = {  {&_swigt__p_std__vectorT_Type_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_UnitsM_t[] = {  {&_swigt__p_std__vectorT_UnitsM_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Variable_t[] = {  {&_swigt__p_std__vectorT_Variable_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_t[] = {  {&_swigt__p_std__vectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_t[] = {  {&_swigt__p_std__vectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_t[] = {  {&_swigt__p_std__vectorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_double_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t[] = {  {&_swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tm[] = {  {&_swigt__p_tm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_t[] = {  {&_swigt__p_value_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_var_variable[] = {  {&_swigt__p_var_variable, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_ASCXX_SetT_SymChar_t,
  _swigc__p_ASCXX_SetT_long_t,
  _swigc__p_Annotation,
  _swigc__p_AnnotationDatabase,
  _swigc__p_BlockStatusType,
  _swigc__p_Compiler,
  _swigc__p_Curve,
  _swigc__p_Dimensions,
  _swigc__p_ExtMethod,
  _swigc__p_ExternalFunc,
  _swigc__p_IncidenceMatrix,
  _swigc__p_IncidencePoint,
  _swigc__p_IncidencePointType,
  _swigc__p_InitProcedure,
  _swigc__p_Instanc,
  _swigc__p_Instance,
  _swigc__p_InstanceStatus,
  _swigc__p_Integrator,
  _swigc__p_IntegratorReporterConsole,
  _swigc__p_IntegratorReporterCxx,
  _swigc__p_IntegratorReporterNull,
  _swigc__p_Library,
  _swigc__p_Matrix,
  _swigc__p_Method,
  _swigc__p_Module,
  _swigc__p_Nam,
  _swigc__p_Plot,
  _swigc__p_Registry,
  _swigc__p_Relation,
  _swigc__p_Reporter,
  _swigc__p_Simulation,
  _swigc__p_SingularityInfo,
  _swigc__p_Solver,
  _swigc__p_SolverHooks,
  _swigc__p_SolverHooksManager,
  _swigc__p_SolverParameter,
  _swigc__p_SolverParameters,
  _swigc__p_SolverReporter,
  _swigc__p_SolverStatus,
  _swigc__p_SymChar,
  _swigc__p_Type,
  _swigc__p_TypeDescription,
  _swigc__p_Units,
  _swigc__p_UnitsM,
  _swigc__p_Value,
  _swigc__p_ValueType,
  _swigc__p_Variable,
  _swigc__p_allocator_type,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_dim_type,
  _swigc__p_error_reporter_callback_t,
  _swigc__p_key_type,
  _swigc__p_mapped_type,
  _swigc__p_mtx_matrix_t,
  _swigc__p_p_PyObject,
  _swigc__p_size_type,
  _swigc__p_slv_parameter,
  _swigc__p_std__allocatorT_Annotation_t,
  _swigc__p_std__allocatorT_Curve_t,
  _swigc__p_std__allocatorT_ExtMethod_t,
  _swigc__p_std__allocatorT_IncidencePoint_t,
  _swigc__p_std__allocatorT_Instanc_t,
  _swigc__p_std__allocatorT_Method_t,
  _swigc__p_std__allocatorT_Module_t,
  _swigc__p_std__allocatorT_Relation_t,
  _swigc__p_std__allocatorT_Solver_t,
  _swigc__p_std__allocatorT_Type_t,
  _swigc__p_std__allocatorT_UnitsM_t,
  _swigc__p_std__allocatorT_Variable_t,
  _swigc__p_std__allocatorT_double_t,
  _swigc__p_std__allocatorT_int_t,
  _swigc__p_std__allocatorT_std__pairT_int_const_std__string_t_t,
  _swigc__p_std__allocatorT_std__string_t,
  _swigc__p_std__allocatorT_std__vectorT_double_t_t,
  _swigc__p_std__lessT_Type_t,
  _swigc__p_std__lessT_int_t,
  _swigc__p_std__mapT_int_std__string_t,
  _swigc__p_std__setT_Type_t,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_Annotation_t,
  _swigc__p_std__vectorT_Curve_t,
  _swigc__p_std__vectorT_ExtMethod_t,
  _swigc__p_std__vectorT_IncidencePoint_t,
  _swigc__p_std__vectorT_Instanc_t,
  _swigc__p_std__vectorT_Method_t,
  _swigc__p_std__vectorT_Module_t,
  _swigc__p_std__vectorT_Relation_t,
  _swigc__p_std__vectorT_Solver_t,
  _swigc__p_std__vectorT_Type_t,
  _swigc__p_std__vectorT_UnitsM_t,
  _swigc__p_std__vectorT_Variable_t,
  _swigc__p_std__vectorT_double_t,
  _swigc__p_std__vectorT_int_t,
  _swigc__p_std__vectorT_std__string_t,
  _swigc__p_std__vectorT_std__vectorT_double_t_t,
  _swigc__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_tm,
  _swigc__p_value_t,
  _swigc__p_value_type,
  _swigc__p_var_variable,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------
   * Patch %callback methods' docstrings to hold the callback ptrs
   * -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods, const swig_const_info *const_table, swig_type_info **types, swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        const swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              memcpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              memcpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif




#ifdef __cplusplus
extern "C" {
#endif
  
  /* -----------------------------------------------------------------------------
   * Method creation and docstring support functions
   * ----------------------------------------------------------------------------- */
  
  /* -----------------------------------------------------------------------------
   * Function to find the method definition with the correct docstring for the
   * proxy module as opposed to the low-level API
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyMethodDef *SWIG_PythonGetProxyDoc(const char *name) {
    /* Find the function in the modified method table */
    size_t offset = 0;
    int found = 0;
    while (SwigMethods_proxydocs[offset].ml_meth != NULL) {
      if (strcmp(SwigMethods_proxydocs[offset].ml_name, name) == 0) {
        found = 1;
        break;
      }
      offset++;
    }
    /* Use the copy with the modified docstring if available */
    return found ? &SwigMethods_proxydocs[offset] : NULL;
  }
  
  /* -----------------------------------------------------------------------------
   * Wrapper of PyInstanceMethod_New() used in Python 3
   * It is exported to the generated module, used for -fastproxy
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyObject *SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func) {
    if (PyCFunction_Check(func)) {
      PyCFunctionObject *funcobj = (PyCFunctionObject *)func;
      PyMethodDef *ml = SWIG_PythonGetProxyDoc(funcobj->m_ml->ml_name);
      if (ml)
      func = PyCFunction_NewEx(ml, funcobj->m_self, funcobj->m_module);
    }
#if PY_VERSION_HEX >= 0x03000000
    return PyInstanceMethod_New(func);
#else
    return PyMethod_New(func, NULL, NULL);
#endif
  }
  
  /* -----------------------------------------------------------------------------
   * Wrapper of PyStaticMethod_New()
   * It is exported to the generated module, used for -fastproxy
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyObject *SWIG_PyStaticMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func) {
    if (PyCFunction_Check(func)) {
      PyCFunctionObject *funcobj = (PyCFunctionObject *)func;
      PyMethodDef *ml = SWIG_PythonGetProxyDoc(funcobj->m_ml->ml_name);
      if (ml)
      func = PyCFunction_NewEx(ml, funcobj->m_self, funcobj->m_module);
    }
    return PyStaticMethod_New(func);
  }
  
#ifdef __cplusplus
}
#endif




/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md, *globals;
  
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
    PyModuleDef_HEAD_INIT,
    SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    SwigPyObject_own,
    SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  PyTypeObject *swigpyobject;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* Metaclass is used to implement static member variables */
  metatype = SwigPyObjectType();
  assert(metatype);
#endif
  
  (void)globals;
  
  /* Create singletons now to avoid potential deadlocks with multi-threaded usage after module initialization */
  SWIG_This();
  SWIG_Python_TypeCache();
  SwigPyPacked_type();
#ifndef SWIGPYTHON_BUILTIN
  SwigPyObject_type();
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule(SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  swigpyobject = SwigPyObject_TypeOnce();
  
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = swigpyobject;
  } else if (swigpyobject->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  
  // thread safe initialization
  swig::container_owner_attribute();
  
  SWIG_Python_SetConstant(d, "Dimensions_MAX_DIMS",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(Dimensions::MAX_DIMS)));
  globals = SWIG_globals();
  if (!globals) {
    PyErr_SetString(PyExc_TypeError, "Failure to create SWIG globals.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  PyDict_SetItemString(md, "cvar", globals);
  SWIG_addvarlink(globals, "Dimensions_BASEUNITS", Swig_var_Dimensions_BASEUNITS_get, Swig_var_Dimensions_BASEUNITS_set);
  SWIG_Python_SetConstant(d, "ASCXX_INST_STATUS_UNKNOWN",SWIG_From_int(static_cast< int >(ASCXX_INST_STATUS_UNKNOWN)));
  SWIG_Python_SetConstant(d, "ASCXX_VAR_FIXED",SWIG_From_int(static_cast< int >(ASCXX_VAR_FIXED)));
  SWIG_Python_SetConstant(d, "ASCXX_VAR_UNSOLVED",SWIG_From_int(static_cast< int >(ASCXX_VAR_UNSOLVED)));
  SWIG_Python_SetConstant(d, "ASCXX_VAR_ACTIVE",SWIG_From_int(static_cast< int >(ASCXX_VAR_ACTIVE)));
  SWIG_Python_SetConstant(d, "ASCXX_VAR_SOLVED",SWIG_From_int(static_cast< int >(ASCXX_VAR_SOLVED)));
  SWIG_Python_SetConstant(d, "ASCXX_REL_INACTIVE",SWIG_From_int(static_cast< int >(ASCXX_REL_INACTIVE)));
  SWIG_Python_SetConstant(d, "ASCXX_DOF_UNDERSPECIFIED",SWIG_From_int(static_cast< int >(ASCXX_DOF_UNDERSPECIFIED)));
  SWIG_Python_SetConstant(d, "ASCXX_DOF_SQUARE",SWIG_From_int(static_cast< int >(ASCXX_DOF_SQUARE)));
  SWIG_Python_SetConstant(d, "ASCXX_DOF_OVERSPECIFIED",SWIG_From_int(static_cast< int >(ASCXX_DOF_OVERSPECIFIED)));
  SWIG_Python_SetConstant(d, "ASCXX_DOF_STRUCT_SINGULAR",SWIG_From_int(static_cast< int >(ASCXX_DOF_STRUCT_SINGULAR)));
  SWIG_Python_SetConstant(d, "VALUE_INT",SWIG_From_int(static_cast< int >(VALUE_INT)));
  SWIG_Python_SetConstant(d, "VALUE_REAL",SWIG_From_int(static_cast< int >(VALUE_REAL)));
  SWIG_Python_SetConstant(d, "VALUE_BOOL",SWIG_From_int(static_cast< int >(VALUE_BOOL)));
  SWIG_Python_SetConstant(d, "VALUE_CHAR",SWIG_From_int(static_cast< int >(VALUE_CHAR)));
  SWIG_Python_SetConstant(d, "VALUE_UNIMPLEMENTED",SWIG_From_int(static_cast< int >(VALUE_UNIMPLEMENTED)));
  SWIG_Python_SetConstant(d, "IM_NULL",SWIG_From_int(static_cast< int >(IM_NULL)));
  SWIG_Python_SetConstant(d, "IM_ACTIVE_FIXED",SWIG_From_int(static_cast< int >(IM_ACTIVE_FIXED)));
  SWIG_Python_SetConstant(d, "IM_ACTIVE_FREE",SWIG_From_int(static_cast< int >(IM_ACTIVE_FREE)));
  SWIG_Python_SetConstant(d, "IM_DORMANT_FIXED",SWIG_From_int(static_cast< int >(IM_DORMANT_FIXED)));
  SWIG_Python_SetConstant(d, "IM_DORMANT_FREE",SWIG_From_int(static_cast< int >(IM_DORMANT_FREE)));
  SWIG_Python_SetConstant(d, "IM_CONVERGED",SWIG_From_int(static_cast< int >(IM_CONVERGED)));
  SWIG_Python_SetConstant(d, "IM_OVER_ITER",SWIG_From_int(static_cast< int >(IM_OVER_ITER)));
  SWIG_Python_SetConstant(d, "IM_OVER_TIME",SWIG_From_int(static_cast< int >(IM_OVER_TIME)));
  SWIG_Python_SetConstant(d, "IM_DIVERGED",SWIG_From_int(static_cast< int >(IM_DIVERGED)));
  SWIG_Python_SetConstant(d, "IM_NOT_YET_ATTEMPTED",SWIG_From_int(static_cast< int >(IM_NOT_YET_ATTEMPTED)));
  SWIG_addvarlink(globals, "LSODE", Swig_var_LSODE_get, Swig_var_LSODE_set);
  SWIG_Python_SetConstant(d, "PLOT_TITLE",SWIG_FromCharPtr("title"));
  SWIG_Python_SetConstant(d, "PLOT_XLABEL",SWIG_FromCharPtr("XLabel"));
  SWIG_Python_SetConstant(d, "PLOT_YLABEL",SWIG_FromCharPtr("YLabel"));
  SWIG_Python_SetConstant(d, "PLOT_XLOG",SWIG_FromCharPtr("Xlog"));
  SWIG_Python_SetConstant(d, "PLOT_YLOG",SWIG_FromCharPtr("Ylog"));
  SWIG_Python_SetConstant(d, "PLOT_XLO",SWIG_FromCharPtr("Xlow"));
  SWIG_Python_SetConstant(d, "PLOT_XHI",SWIG_FromCharPtr("Xhigh"));
  SWIG_Python_SetConstant(d, "PLOT_YLO",SWIG_FromCharPtr("Ylow"));
  SWIG_Python_SetConstant(d, "PLOT_YHI",SWIG_FromCharPtr("Yhigh"));
  SWIG_Python_SetConstant(d, "PLOT_CURVE",SWIG_FromCharPtr("curve"));
  SWIG_Python_SetConstant(d, "PLOT_LEGEND",SWIG_FromCharPtr("legend"));
  SWIG_Python_SetConstant(d, "PLOT_FORMAT",SWIG_FromCharPtr("format"));
  SWIG_Python_SetConstant(d, "PLOT_LEGENDPOSITION",SWIG_FromCharPtr("legend_position"));
  SWIG_Python_SetConstant(d, "PLOT_POINT",SWIG_FromCharPtr("pnt"));
  SWIG_Python_SetConstant(d, "PLOT_XPOINT",SWIG_FromCharPtr("x"));
  SWIG_Python_SetConstant(d, "PLOT_YPOINT",SWIG_FromCharPtr("y"));
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

